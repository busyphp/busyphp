/*!
 * jQuery JavaScript Library v3.0.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-06-09T18:02Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


var
	version = "3.0.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.0
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-01-04
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true;
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {
	// Known :disabled false positives:
	// IE: *[disabled]:not(button, input, select, textarea, optgroup, option, menuitem, fieldset)
	// not IE: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Check form elements and option elements for explicit disabling
		return "label" in elem && elem.disabled === disabled ||
			"form" in elem && elem.disabled === disabled ||

			// Check non-disabled form elements for fieldset[disabled] ancestors
			"form" in elem && elem.disabled === false && (
				// Support: IE6-11+
				// Ancestry is covered for us
				elem.isDisabled === disabled ||

				// Otherwise, assume any non-<option> under fieldset[disabled] is disabled
				/* jshint -W018 */
				elem.isDisabled !== !disabled &&
					("label" in elem || !disabledAncestor( elem )) !== disabled
			);
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			resolve.call( undefined, value );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( /*jshint -W002 */ value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.call( undefined, value );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList.then( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnotwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? JSON.parse( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) ),
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support: IE <=9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox <=42
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			return ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

function manipulationTarget( elem, content ) {
	if ( jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE <=9 only
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val,
		valueIsBorderBox = true,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE <=11 only
	// Running getBoundingClientRect on a disconnected node
	// in IE throws an error.
	if ( elem.getClientRects().length ) {
		val = elem.getBoundingClientRect()[ name ];
	}

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function raf() {
	if ( timerId ) {
		window.requestAnimationFrame( raf );
		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* jshint -W083 */
			anim.done( function() {

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off or if document is hidden
	if ( jQuery.fx.off || document.hidden ) {
		opt.duration = 0;

	} else {
		opt.duration = typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.requestAnimationFrame ?
			window.requestAnimationFrame( raf ) :
			window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	if ( window.cancelAnimationFrame ) {
		window.cancelAnimationFrame( timerId );
	} else {
		window.clearInterval( timerId );
	}

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// Handle most common string cases
					ret.replace( rreturn, "" ) :

					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in uncached url if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rts, "" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win, rect, doc,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		// Make sure element is not hidden (display: none)
		if ( rect.width || rect.height ) {
			doc = elem.ownerDocument;
			win = getWindow( doc );
			docElem = doc.documentElement;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		}

		// Return zeros for disconnected and hidden elements (gh-2310)
		return rect;
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.parseJSON = JSON.parse;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}





var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}


return jQuery;
} ) );

/*!
 * pace.js v1.2.4
 * https://github.com/CodeByZach/pace/
 * Licensed MIT © HubSpot, Inc.
 */
(function() {
	var AjaxMonitor, Bar, DocumentMonitor, ElementMonitor, ElementTracker, EventLagMonitor, Evented, Events, NoTargetError, Pace, RequestIntercept, SOURCE_KEYS, Scaler, SocketRequestTracker, XHRRequestTracker, addEventListener, animation, avgAmplitude, bar, cancelAnimation, cancelAnimationFrame, defaultOptions, extend, extendNative, getFromDOM, getIntercept, handlePushState, ignoreStack, init, now, options, requestAnimationFrame, result, runAnimation, scalers, shouldIgnoreURL, shouldTrack, source, sources, uniScaler, _WebSocket, _XDomainRequest, _XMLHttpRequest, _i, _intercept, _len, _pushState, _ref, _ref1, _replaceState,
		__slice = [].slice,
		__hasProp = {}.hasOwnProperty,
		__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		__indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
		__bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	defaultOptions = {
		className: '',
		catchupTime: 100,
		initialRate: .03,
		minTime: 250,
		ghostTime: 100,
		maxProgressPerFrame: 20,
		easeFactor: 1.25,
		startOnPageLoad: true,
		restartOnPushState: true,
		restartOnRequestAfter: 500,
		target: 'body',
		elements: {
			checkInterval: 100,
			selectors: ['body']
		},
		eventLag: {
			minSamples: 10,
			sampleCount: 3,
			lagThreshold: 3
		},
		ajax: {
			trackMethods: ['GET'],
			trackWebSockets: true,
			ignoreURLs: []
		}
	};

	now = function() {
		var _ref;
		return (_ref = typeof performance !== "undefined" && performance !== null ? typeof performance.now === "function" ? performance.now() : void 0 : void 0) != null ? _ref : +(new Date);
	};

	requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

	cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

	addEventListener = function(obj, event, callback) {
		if (typeof obj.addEventListener === "function") {
			return obj.addEventListener(event, callback, false);
		} else {
			return function() {
				if (typeof obj["on" + event] !== "function" || typeof obj["on" + event].eventListeners !== "object") {
					var eventListeners = new Events();
					if (typeof obj["on" + event] === "function") {
						eventListeners.on(event, obj["on" + event]);
					}
					obj["on" + event] = function(evt) {
						return eventListeners.trigger(event, evt);
					};
					obj["on" + event].eventListeners = eventListeners;
				} else {
					var eventListeners = obj["on" + event].eventListeners;
				}
				eventListeners.on(event, callback);
			}();
		}
	};

	if (requestAnimationFrame == null) {
		requestAnimationFrame = function(fn) {
			return setTimeout(fn, 50);
		};
		cancelAnimationFrame = function(id) {
			return clearTimeout(id);
		};
	}

	runAnimation = function(fn) {
		var last, tick;
		last = now();
		tick = function() {
			var diff;
			diff = now() - last;
			if (diff >= 33) {
				last = now();
				return fn(diff, function() {
					return requestAnimationFrame(tick);
				});
			} else {
				return setTimeout(tick, 33 - diff);
			}
		};
		return tick();
	};

	result = function() {
		var args, key, obj;
		obj = arguments[0], key = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
		if (typeof obj[key] === 'function') {
			return obj[key].apply(obj, args);
		} else {
			return obj[key];
		}
	};

	extend = function() {
		var key, out, source, sources, val, _i, _len;
		out = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
		for (_i = 0, _len = sources.length; _i < _len; _i++) {
			source = sources[_i];
			if (source) {
				for (key in source) {
					if (!__hasProp.call(source, key)) continue;
					val = source[key];
					if ((out[key] != null) && typeof out[key] === 'object' && (val != null) && typeof val === 'object') {
						extend(out[key], val);
					} else {
						out[key] = val;
					}
				}
			}
		}
		return out;
	};

	avgAmplitude = function(arr) {
		var count, sum, v, _i, _len;
		sum = count = 0;
		for (_i = 0, _len = arr.length; _i < _len; _i++) {
			v = arr[_i];
			sum += Math.abs(v);
			count++;
		}
		return sum / count;
	};

	getFromDOM = function(key, json) {
		var data, e, el;
		if (key == null) {
			key = 'options';
		}
		if (json == null) {
			json = true;
		}
		el = document.querySelector("[data-pace-" + key + "]");
		if (!el) {
			return;
		}
		data = el.getAttribute("data-pace-" + key);
		if (!json) {
			return data;
		}
		try {
			return JSON.parse(data);
		} catch (_error) {
			e = _error;
			return typeof console !== "undefined" && console !== null ? console.error("Error parsing inline pace options", e) : void 0;
		}
	};

	Evented = (function() {
		function Evented() {}

		Evented.prototype.on = function(event, handler, ctx, once) {
			var _base;
			if (once == null) {
				once = false;
			}
			if (this.bindings == null) {
				this.bindings = {};
			}
			if ((_base = this.bindings)[event] == null) {
				_base[event] = [];
			}
			return this.bindings[event].push({
				handler: handler,
				ctx: ctx,
				once: once
			});
		};

		Evented.prototype.once = function(event, handler, ctx) {
			return this.on(event, handler, ctx, true);
		};

		Evented.prototype.off = function(event, handler) {
			var i, _ref, _results;
			if (((_ref = this.bindings) != null ? _ref[event] : void 0) == null) {
				return;
			}
			if (handler == null) {
				return delete this.bindings[event];
			} else {
				i = 0;
				_results = [];
				while (i < this.bindings[event].length) {
					if (this.bindings[event][i].handler === handler) {
						_results.push(this.bindings[event].splice(i, 1));
					} else {
						_results.push(i++);
					}
				}
				return _results;
			}
		};

		Evented.prototype.trigger = function() {
			var args, ctx, event, handler, i, once, _ref, _ref1, _results;
			event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
			if ((_ref = this.bindings) != null ? _ref[event] : void 0) {
				i = 0;
				_results = [];
				while (i < this.bindings[event].length) {
					_ref1 = this.bindings[event][i], handler = _ref1.handler, ctx = _ref1.ctx, once = _ref1.once;
					handler.apply(ctx != null ? ctx : this, args);
					if (once) {
						_results.push(this.bindings[event].splice(i, 1));
					} else {
						_results.push(i++);
					}
				}
				return _results;
			}
		};

		return Evented;

	})();

	Pace = window.Pace || {};

	window.Pace = Pace;

	extend(Pace, Evented.prototype);

	options = Pace.options = extend({}, defaultOptions, window.paceOptions, getFromDOM());

	_ref = ['ajax', 'document', 'eventLag', 'elements'];
	for (_i = 0, _len = _ref.length; _i < _len; _i++) {
		source = _ref[_i];
		if (options[source] === true) {
			options[source] = defaultOptions[source];
		}
	}

	NoTargetError = (function(_super) {
		__extends(NoTargetError, _super);

		function NoTargetError() {
			_ref1 = NoTargetError.__super__.constructor.apply(this, arguments);
			return _ref1;
		}

		return NoTargetError;

	})(Error);

	Bar = (function() {
		function Bar() {
			this.progress = 0;
			this.$body = $('body');
		}

		Bar.prototype.getElement = function() {
			var targetElement;
			if (this.el == null) {
				targetElement = document.querySelector(options.target);
				if (!targetElement) {
					throw new NoTargetError;
				}
				this.el = document.createElement('div');
				this.el.className = "pace pace-active";
				document.body.className = document.body.className.replace(/(pace-done )|/, 'pace-running ');
				var _custom_class_name = (options.className !== '') ? ' '+options.className : '';
				this.el.innerHTML = '<div class="pace-progress'+_custom_class_name+'">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>';
				if (targetElement.firstChild != null) {
					targetElement.insertBefore(this.el, targetElement.firstChild);
				} else {
					targetElement.appendChild(this.el);
				}
			}
			return this.el;
		};

		Bar.prototype.finish = function() {
			var el;
			el = this.getElement();
			el.className = el.className.replace('pace-active', 'pace-inactive');
			this.$body.removeClass('pace-running').addClass('pace-done');
			return document.body.className;
		};

		Bar.prototype.update = function(prog) {
			this.progress = prog;
			Pace.trigger('progress', prog);
			return this.render();
		};

		Bar.prototype.destroy = function() {
			try {
				this.getElement().parentNode.removeChild(this.getElement());
			} catch (_error) {
				NoTargetError = _error;
			}
			return this.el = void 0;
		};

		Bar.prototype.render = function() {
			var el, key, progressStr, transform, _j, _len1, _ref2;
			if (document.querySelector(options.target) == null) {
				return false;
			}
			el = this.getElement();
			transform = "translate3d(" + this.progress + "%, 0, 0)";
			_ref2 = ['webkitTransform', 'msTransform', 'transform'];
			for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
				key = _ref2[_j];
				el.children[0].style[key] = transform;
			}
			if (!this.lastRenderedProgress || this.lastRenderedProgress | 0 !== this.progress | 0) {
				el.children[0].setAttribute('data-progress-text', "" + (this.progress | 0) + "%");
				if (this.progress >= 100) {
					progressStr = '99';
				} else {
					progressStr = this.progress < 10 ? "0" : "";
					progressStr += this.progress | 0;
				}
				el.children[0].setAttribute('data-progress', "" + progressStr);
			}
			Pace.trigger('change', this.progress);
			return this.lastRenderedProgress = this.progress;
		};

		Bar.prototype.done = function() {
			return this.progress >= 100;
		};

		return Bar;

	})();

	Events = (function() {
		function Events() {
			this.bindings = {};
		}

		Events.prototype.trigger = function(name, val) {
			var binding, _j, _len1, _ref2, _results;
			if (this.bindings[name] != null) {
				_ref2 = this.bindings[name];
				_results = [];
				for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
					binding = _ref2[_j];
					_results.push(binding.call(this, val));
				}
				return _results;
			}
		};

		Events.prototype.on = function(name, fn) {
			var _base;
			if ((_base = this.bindings)[name] == null) {
				_base[name] = [];
			}
			return this.bindings[name].push(fn);
		};

		return Events;

	})();

	_XMLHttpRequest = window.XMLHttpRequest;

	_XDomainRequest = window.XDomainRequest;

	_WebSocket = window.WebSocket;

	extendNative = function(to, from) {
		var e, key, _results;
		_results = [];
		for (key in from.prototype) {
			try {
				if ((to[key] == null) && typeof from[key] !== 'function') {
					if (typeof Object.defineProperty === 'function') {
						_results.push(Object.defineProperty(to, key, {
							get: (function(key) {
								return function() {
									return from.prototype[key];
								};
							})(key),
							configurable: true,
							enumerable: true
						}));
					} else {
						_results.push(to[key] = from.prototype[key]);
					}
				} else {
					_results.push(void 0);
				}
			} catch (_error) {
				e = _error;
			}
		}
		return _results;
	};

	ignoreStack = [];

	Pace.ignore = function() {
		var args, fn, ret;
		fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
		ignoreStack.unshift('ignore');
		ret = fn.apply(null, args);
		ignoreStack.shift();
		return ret;
	};

	Pace.track = function() {
		var args, fn, ret;
		fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
		ignoreStack.unshift('track');
		ret = fn.apply(null, args);
		ignoreStack.shift();
		return ret;
	};

	shouldTrack = function(method) {
		var _ref2;
		if (method == null) {
			method = 'GET';
		}
		if (ignoreStack[0] === 'track') {
			return 'force';
		}
		if (!ignoreStack.length && options.ajax) {
			if (method === 'socket' && options.ajax.trackWebSockets) {
				return true;
			} else if (_ref2 = method.toUpperCase(), __indexOf.call(options.ajax.trackMethods, _ref2) >= 0) {
				return true;
			}
		}
		return false;
	};

	RequestIntercept = (function(_super) {
		__extends(RequestIntercept, _super);

		function RequestIntercept() {
			var monitorXHR,
				_this = this;
			RequestIntercept.__super__.constructor.apply(this, arguments);
			monitorXHR = function(req) {
				var _open;
				_open = req.open;
				return req.open = function(type, url, async) {
					if (shouldTrack(type)) {
						_this.trigger('request', {
							type: type,
							url: url,
							request: req
						});
					}
					return _open.apply(req, arguments);
				};
			};
			window.XMLHttpRequest = function(flags) {
				var req;
				req = new _XMLHttpRequest(flags);
				monitorXHR(req);
				return req;
			};
			try {
				extendNative(window.XMLHttpRequest, _XMLHttpRequest);
			} catch (_error) {}
			if (_XDomainRequest != null) {
				window.XDomainRequest = function() {
					var req;
					req = new _XDomainRequest;
					monitorXHR(req);
					return req;
				};
				try {
					extendNative(window.XDomainRequest, _XDomainRequest);
				} catch (_error) {}
			}
			if ((_WebSocket != null) && options.ajax.trackWebSockets) {
				window.WebSocket = function(url, protocols) {
					var req;
					if (protocols != null) {
						req = new _WebSocket(url, protocols);
					} else {
						req = new _WebSocket(url);
					}
					if (shouldTrack('socket')) {
						_this.trigger('request', {
							type: 'socket',
							url: url,
							protocols: protocols,
							request: req
						});
					}
					return req;
				};
				try {
					extendNative(window.WebSocket, _WebSocket);
				} catch (_error) {}
			}
		}

		return RequestIntercept;

	})(Events);

	_intercept = null;

	getIntercept = function() {
		if (_intercept == null) {
			_intercept = new RequestIntercept;
		}
		return _intercept;
	};

	shouldIgnoreURL = function(url) {
		var pattern, _j, _len1, _ref2;
		_ref2 = options.ajax.ignoreURLs;
		for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
			pattern = _ref2[_j];
			if (typeof pattern === 'string') {
				if (url.indexOf(pattern) !== -1) {
					return true;
				}
			} else {
				if (pattern.test(url)) {
					return true;
				}
			}
		}
		return false;
	};

	getIntercept().on('request', function(_arg) {
		var after, args, request, type, url;
		type = _arg.type, request = _arg.request, url = _arg.url;
		if (shouldIgnoreURL(url)) {
			return;
		}
		if (!Pace.running && (options.restartOnRequestAfter !== false || shouldTrack(type) === 'force')) {
			args = arguments;
			after = options.restartOnRequestAfter || 0;
			if (typeof after === 'boolean') {
				after = 0;
			}
			return setTimeout(function() {
				var stillActive, _j, _len1, _ref2, _ref3, _results;
				if (type === 'socket') {
					stillActive = request.readyState < 1;
				} else {
					stillActive = (0 < (_ref2 = request.readyState) && _ref2 < 4);
				}
				if (stillActive) {
					Pace.restart();
					_ref3 = Pace.sources;
					_results = [];
					for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
						source = _ref3[_j];
						if (source instanceof AjaxMonitor) {
							source.watch.apply(source, args);
							break;
						} else {
							_results.push(void 0);
						}
					}
					return _results;
				}
			}, after);
		}
	});

	AjaxMonitor = (function() {
		function AjaxMonitor() {
			this.complete = __bind(this.complete, this);
			var _this = this;
			this.elements = [];
			getIntercept().on('request', function() {
				return _this.watch.apply(_this, arguments);
			});
		}

		AjaxMonitor.prototype.watch = function(_arg) {
			var request, tracker, type, url;
			type = _arg.type, request = _arg.request, url = _arg.url;
			if (shouldIgnoreURL(url)) {
				return;
			}
			if (type === 'socket') {
				tracker = new SocketRequestTracker(request, this.complete);
			} else {
				tracker = new XHRRequestTracker(request, this.complete);
			}
			return this.elements.push(tracker);
		};

		AjaxMonitor.prototype.complete = function(tracker) {
			return this.elements = this.elements.filter(function(e) {
				return e !== tracker;
			});
		};

		return AjaxMonitor;

	})();

	XHRRequestTracker = (function() {
		function XHRRequestTracker(request, completeCallback) {
			var event, size, _j, _len1, _onreadystatechange, _ref2,
				_this = this;
			this.progress = 0;
			if (window.ProgressEvent != null) {
				size = null;
				addEventListener(request, 'progress', function(evt) {
					if (evt.lengthComputable) {
						return _this.progress = 100 * evt.loaded / evt.total;
					} else {
						return _this.progress = _this.progress + (100 - _this.progress) / 2;
					}
				}, false);
				_ref2 = ['load', 'abort', 'timeout', 'error'];
				for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
					event = _ref2[_j];
					addEventListener(request, event, function() {
						completeCallback(_this);
						return _this.progress = 100;
					}, false);
				}
			} else {
				_onreadystatechange = request.onreadystatechange;
				request.onreadystatechange = function() {
					var _ref3;
					if ((_ref3 = request.readyState) === 0 || _ref3 === 4) {
						completeCallback(_this);
						_this.progress = 100;
					} else if (request.readyState === 3) {
						_this.progress = 50;
					}
					return typeof _onreadystatechange === "function" ? _onreadystatechange.apply(null, arguments) : void 0;
				};
			}
		}

		return XHRRequestTracker;

	})();

	SocketRequestTracker = (function() {
		function SocketRequestTracker(request, completeCallback) {
			var event, _j, _len1, _ref2,
				_this = this;
			this.progress = 0;
			_ref2 = ['error', 'open'];
			for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
				event = _ref2[_j];
				addEventListener(request, event, function() {
					completeCallback(_this);
					return _this.progress = 100;
				}, false);
			}
		}

		return SocketRequestTracker;

	})();

	ElementMonitor = (function() {
		function ElementMonitor(options) {
			var selector, _j, _len1, _ref2;
			if (options == null) {
				options = {};
			}
			this.complete = __bind(this.complete, this);
			this.elements = [];
			if (options.selectors == null) {
				options.selectors = [];
			}
			_ref2 = options.selectors;
			for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
				selector = _ref2[_j];
				this.elements.push(new ElementTracker(selector, this.complete));
			}
		}

		ElementMonitor.prototype.complete = function(tracker) {
			return this.elements = this.elements.filter(function(e) {
				return e !== tracker;
			});
		};

		return ElementMonitor;

	})();

	ElementTracker = (function() {
		function ElementTracker(selector, completeCallback) {
			this.selector = selector;
			this.completeCallback = completeCallback;
			this.progress = 0;
			this.check();
		}

		ElementTracker.prototype.check = function() {
			var _this = this;
			if (document.querySelector(this.selector)) {
				return this.done();
			} else {
				return setTimeout((function() {
					return _this.check();
				}), options.elements.checkInterval);
			}
		};

		ElementTracker.prototype.done = function() {
			this.completeCallback(this);
			this.completeCallback = null;
			return this.progress = 100;
		};

		return ElementTracker;

	})();

	DocumentMonitor = (function() {
		DocumentMonitor.prototype.states = {
			loading: 0,
			interactive: 50,
			complete: 100
		};

		function DocumentMonitor() {
			var _onreadystatechange, _ref2,
				_this = this;
			this.progress = (_ref2 = this.states[document.readyState]) != null ? _ref2 : 100;
			_onreadystatechange = document.onreadystatechange;
			document.onreadystatechange = function() {
				if (_this.states[document.readyState] != null) {
					_this.progress = _this.states[document.readyState];
				}
				return typeof _onreadystatechange === "function" ? _onreadystatechange.apply(null, arguments) : void 0;
			};
		}

		return DocumentMonitor;

	})();

	EventLagMonitor = (function() {
		function EventLagMonitor() {
			var avg, interval, last, points, samples,
				_this = this;
			this.progress = 0;
			avg = 0;
			samples = [];
			points = 0;
			last = now();
			interval = setInterval(function() {
				var diff;
				diff = now() - last - 50;
				last = now();
				samples.push(diff);
				if (samples.length > options.eventLag.sampleCount) {
					samples.shift();
				}
				avg = avgAmplitude(samples);
				if (++points >= options.eventLag.minSamples && avg < options.eventLag.lagThreshold) {
					_this.progress = 100;
					return clearInterval(interval);
				} else {
					return _this.progress = 100 * (3 / (avg + 3));
				}
			}, 50);
		}

		return EventLagMonitor;

	})();

	Scaler = (function() {
		function Scaler(source) {
			this.source = source;
			this.last = this.sinceLastUpdate = 0;
			this.rate = options.initialRate;
			this.catchup = 0;
			this.progress = this.lastProgress = 0;
			if (this.source != null) {
				this.progress = result(this.source, 'progress');
			}
		}

		Scaler.prototype.tick = function(frameTime, val) {
			var scaling;
			if (val == null) {
				val = result(this.source, 'progress');
			}
			if (val >= 100) {
				this.done = true;
			}
			if (val === this.last) {
				this.sinceLastUpdate += frameTime;
			} else {
				if (this.sinceLastUpdate) {
					this.rate = (val - this.last) / this.sinceLastUpdate;
				}
				this.catchup = (val - this.progress) / options.catchupTime;
				this.sinceLastUpdate = 0;
				this.last = val;
			}
			if (val > this.progress) {
				this.progress += this.catchup * frameTime;
			}
			scaling = 1 - Math.pow(this.progress / 100, options.easeFactor);
			this.progress += scaling * this.rate * frameTime;
			this.progress = Math.min(this.lastProgress + options.maxProgressPerFrame, this.progress);
			this.progress = Math.max(0, this.progress);
			this.progress = Math.min(100, this.progress);
			this.lastProgress = this.progress;
			return this.progress;
		};

		return Scaler;

	})();

	sources = null;

	scalers = null;

	bar = null;

	uniScaler = null;

	animation = null;

	cancelAnimation = null;

	Pace.running = false;

	handlePushState = function() {
		if (options.restartOnPushState) {
			return Pace.restart();
		}
	};

	if (window.history.pushState != null) {
		_pushState = window.history.pushState;
		window.history.pushState = function() {
			handlePushState();
			return _pushState.apply(window.history, arguments);
		};
	}

	if (window.history.replaceState != null) {
		_replaceState = window.history.replaceState;
		window.history.replaceState = function() {
			handlePushState();
			return _replaceState.apply(window.history, arguments);
		};
	}

	SOURCE_KEYS = {
		ajax: AjaxMonitor,
		elements: ElementMonitor,
		document: DocumentMonitor,
		eventLag: EventLagMonitor
	};

	(init = function() {
		var type, _j, _k, _len1, _len2, _ref2, _ref3, _ref4;
		Pace.sources = sources = [];
		_ref2 = ['ajax', 'elements', 'document', 'eventLag'];
		for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
			type = _ref2[_j];
			if (options[type] !== false) {
				sources.push(new SOURCE_KEYS[type](options[type]));
			}
		}
		_ref4 = (_ref3 = options.extraSources) != null ? _ref3 : [];
		for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
			source = _ref4[_k];
			sources.push(new source(options));
		}
		Pace.bar = bar = new Bar;
		scalers = [];
		return uniScaler = new Scaler;
	})();

	Pace.stop = function() {
		Pace.trigger('stop');
		Pace.running = false;
		bar.destroy();
		cancelAnimation = true;
		if (animation != null) {
			if (typeof cancelAnimationFrame === "function") {
				cancelAnimationFrame(animation);
			}
			animation = null;
		}
		return init();
	};

	Pace.restart = function() {
		Pace.trigger('restart');
		Pace.stop();
		return Pace.start();
	};

	Pace.go = function() {
		var start;
		Pace.running = true;
		bar.render();
		start = now();
		cancelAnimation = false;
		return animation = runAnimation(function(frameTime, enqueueNextFrame) {
			var avg, count, done, element, elements, i, j, remaining, scaler, scalerList, sum, _j, _k, _len1, _len2, _ref2;
			remaining = 100 - bar.progress;
			count = sum = 0;
			done = true;
			for (i = _j = 0, _len1 = sources.length; _j < _len1; i = ++_j) {
				source = sources[i];
				scalerList = scalers[i] != null ? scalers[i] : scalers[i] = [];
				elements = (_ref2 = source.elements) != null ? _ref2 : [source];
				for (j = _k = 0, _len2 = elements.length; _k < _len2; j = ++_k) {
					element = elements[j];
					scaler = scalerList[j] != null ? scalerList[j] : scalerList[j] = new Scaler(element);
					done &= scaler.done;
					if (scaler.done) {
						continue;
					}
					count++;
					sum += scaler.tick(frameTime);
				}
			}
			avg = sum / count;
			bar.update(uniScaler.tick(frameTime, avg));
			if (bar.done() || done || cancelAnimation) {
				bar.update(100);
				Pace.trigger('done');
				return setTimeout(function() {
					bar.finish();
					Pace.running = false;
					return Pace.trigger('hide');
				}, Math.max(options.ghostTime, Math.max(options.minTime - (now() - start), 0)));
			} else {
				return enqueueNextFrame();
			}
		});
	};

	Pace.start = function(_options) {
		extend(options, _options);
		Pace.running = true;
		try {
			bar.render();
		} catch (_error) {
			NoTargetError = _error;
		}
		if (!document.querySelector('.pace')) {
			return setTimeout(Pace.start, 50);
		} else {
			Pace.trigger('start');
			return Pace.go();
		}
	};

	if (typeof define === 'function' && define.amd) {
		define(function() {
			return Pace;
		});
	} else if (typeof exports === 'object') {
		module.exports = Pace;
	} else {
		if (options.startOnPageLoad) {
			Pace.start();
		}
	}

}).call(this);
/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.3.6 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, https://github.com/requirejs/requirejs/blob/master/LICENSE
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global, setTimeout) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.3.6',
        commentRegExp = /\/\*[\s\S]*?\*\/|([^:"'=]|^)\/\/.*$/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    //Could match something like ')//comment', do not lose the prefix to comment.
    function commentReplace(match, singlePrefix) {
        return singlePrefix || '';
    }

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value === 'object' && value &&
                        !isArray(value) && !isFunction(value) &&
                        !(value instanceof RegExp)) {

                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    function defaultOnError(err) {
        throw err;
    }

    //Allow getting a global that is expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttps://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite an existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                bundles: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            bundlesMap = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; i < ary.length; i++) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,
                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,
                baseParts = (baseName && baseName.split('/')),
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // If wanting node ID compatibility, strip .js from end
                // of IDs. Have to do this here, and not in nameToUrl
                // because node allows either .js or non .js to map
                // to same file.
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                // Starts with a '.' so need the baseName
                if (name[0].charAt(0) === '.' && baseParts) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that 'directory' and not name of the baseName's
                    //module. For instance, baseName of 'one/two/three', maps to
                    //'one/two/three.js', but we want the directory, 'one/two' for
                    //this normalization.
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = normalizedBaseParts.concat(name);
                }

                trimDots(name);
                name = name.join('/');
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break outerLoop;
                                }
                            }
                        }
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            // If the name points to a package's name, use
            // the package main instead.
            pkgMain = getOwn(config.pkgs, name);

            return pkgMain ? pkgMain : name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);

                //Custom require that does not do map translation, since
                //ID is "absolute", already mapped/resolved.
                context.makeRequire(null, {
                    skipMap: true
                })([id]);

                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (isNormalized) {
                        normalizedName = name;
                    } else if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        // If nested plugin references, then do not try to
                        // normalize, as it will not normalize correctly. This
                        // places a restriction on resourceIds, and the longer
                        // term solution is not to normalize until plugins are
                        // loaded and all normalizations to allow for async
                        // loading of a loader plugin. But for now, fixes the
                        // common uses. Details in #1131
                        normalizedName = name.indexOf('!') === -1 ?
                                         normalize(name, parentName, applyMap) :
                                         name;
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                mod = getModule(depMap);
                if (mod.error && name === 'error') {
                    fn(mod.error);
                } else {
                    mod.on(name, fn);
                }
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                each(globalDefQueue, function(queueItem) {
                    var id = queueItem[0];
                    if (typeof id === 'string') {
                        context.defQueueMap[id] = true;
                    }
                    defQueue.push(queueItem);
                });
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return (defined[mod.map.id] = mod.exports);
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return getOwn(config.config, mod.map.id) || {};
                        },
                        exports: mod.exports || (mod.exports = {})
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function (mod) {
                var map = mod.map,
                    modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    // Only fetch if not already in the defQueue.
                    if (!hasProp(context.defQueueMap, id)) {
                        this.fetch();
                    }
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error. However,
                            //only do it for define()'d  modules. require
                            //errbacks should not be called for failures in
                            //their callbacks (#699). However if a global
                            //onError is set, use that.
                            if ((this.events.error && this.map.isDefine) ||
                                req.onError !== defaultOnError) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            // Favor return value over exports. If node/cjs in play,
                            // then will not have a return value anyway. Favor
                            // module.exports assignment over exports object.
                            if (this.map.isDefine && exports === undefined) {
                                cjsModule = this.module;
                                if (cjsModule) {
                                    exports = cjsModule.exports;
                                } else if (this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                err.requireType = this.map.isDefine ? 'define' : 'require';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                var resLoadMaps = [];
                                each(this.depMaps, function (depMap) {
                                    resLoadMaps.push(depMap.normalizedMap || depMap);
                                });
                                req.onResourceLoad(context, this.map, resLoadMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        bundleId = getOwn(bundlesMap, this.map.id),
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap,
                                                      true);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.map.normalizedMap = normalizedMap;
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    //If a paths config, then just load that file instead to
                    //resolve the plugin, as it is built into that paths layer.
                    if (bundleId) {
                        this.map.url = context.nameToUrl(bundleId);
                        this.load();
                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            if (this.undefed) {
                                return;
                            }
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', bind(this, this.errback));
                        } else if (this.events.error) {
                            // No direct errback on this module, but something
                            // else is listening for errors, so be sure to
                            // propagate the error correctly.
                            on(depMap, 'error', bind(this, function(err) {
                                this.emit('error', err);
                            }));
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +
                        args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
            context.defQueueMap = {};
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            defQueueMap: {},
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                // Convert old style urlArgs string to a function.
                if (typeof cfg.urlArgs === 'string') {
                    var urlArgs = cfg.urlArgs;
                    cfg.urlArgs = function(id, url) {
                        return (url.indexOf('?') === -1 ? '?' : '&') + urlArgs;
                    };
                }

                //Save off the paths since they require special processing,
                //they are additive.
                var shim = config.shim,
                    objs = {
                        paths: true,
                        bundles: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (!config[prop]) {
                            config[prop] = {};
                        }
                        mixin(config[prop], value, true, true);
                    } else {
                        config[prop] = value;
                    }
                });

                //Reverse map the bundles
                if (cfg.bundles) {
                    eachProp(cfg.bundles, function (value, prop) {
                        each(value, function (v) {
                            if (v !== prop) {
                                bundlesMap[v] = prop;
                            }
                        });
                    });
                }

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location, name;

                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;

                        name = pkgObj.name;
                        location = pkgObj.location;
                        if (location) {
                            config.paths[name] = pkgObj.location;
                        }

                        //Save pointer to main module ID for pkg name.
                        //Remove leading dot in main, so main paths are normalized,
                        //and remove any trailing .js, since different package
                        //envs have different conventions: some use a module name,
                        //some use a file name.
                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')
                                     .replace(currDirRegExp, '')
                                     .replace(jsSuffixRegExp, '');
                    });
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id, null, true);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext,  true);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        mod.undefed = true;
                        removeScript(id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        //Clean queued defines too. Go backwards
                        //in array so that the splices do not
                        //mess up the iteration.
                        eachReverse(defQueue, function(args, i) {
                            if (args[0] === id) {
                                defQueue.splice(i, 1);
                            }
                        });
                        delete context.defQueueMap[id];

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overridden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }
                context.defQueueMap = {};

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, syms, i, parentModule, url,
                    parentPath, bundleId,
                    pkgMain = getOwn(config.pkgs, moduleName);

                if (pkgMain) {
                    moduleName = pkgMain;
                }

                bundleId = getOwn(bundlesMap, moduleName);

                if (bundleId) {
                    return context.nameToUrl(bundleId, ext, skipExt);
                }

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');

                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/^data\:|^blob\:|\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs && !/^blob\:/.test(url) ?
                       url + config.urlArgs(moduleName, url) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callback function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    var parents = [];
                    eachProp(registry, function(value, key) {
                        if (key.indexOf('_@r') !== 0) {
                            each(value.depMaps, function(depMap) {
                                if (depMap.id === data.id) {
                                    parents.push(key);
                                    return true;
                                }
                            });
                        }
                    });
                    return onError(makeError('scripterror', 'Script error for "' + data.id +
                                             (parents.length ?
                                             '", needed by: ' + parents.join(', ') :
                                             '"'), evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = defaultOnError;

    /**
     * Creates the node for the load command. Only used in browser envs.
     */
    req.createNode = function (config, moduleName, url) {
        var node = config.xhtml ?
                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                document.createElement('script');
        node.type = config.scriptType || 'text/javascript';
        node.charset = 'utf-8';
        node.async = true;
        return node;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = req.createNode(config, moduleName, url);

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/requirejs/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/requirejs/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //Calling onNodeCreated after all properties on the node have been
            //set, but before it is placed in the DOM.
            if (config.onNodeCreated) {
                config.onNodeCreated(node, config, moduleName, url);
            }

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation is that a build has been done so
                //that only one script needs to be loaded anyway. This may need
                //to be reevaluated if other use cases become common.

                // Post a task to the event loop to work around a bug in WebKit
                // where the worker gets garbage-collected after calling
                // importScripts(): https://webkit.org/b/153317
                setTimeout(function() {}, 0);
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts',
                                'importScripts failed for ' +
                                    moduleName + ' at ' + url,
                                e,
                                [moduleName]));
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser && !cfg.skipDataMain) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Preserve dataMain in case it is a path (i.e. contains '?')
                mainScript = dataMain;

                //Set final baseUrl if there is not already an explicit one,
                //but only do so if the data-main value is not a loader plugin
                //module ID.
                if (!cfg.baseUrl && mainScript.indexOf('!') === -1) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = mainScript.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                }

                //Strip off any trailing .js since mainScript is now
                //like a module name.
                mainScript = mainScript.replace(jsSuffixRegExp, '');

                //If mainScript is still a path, fall back to dataMain
                if (req.jsExtRegExp.test(mainScript)) {
                    mainScript = dataMain;
                }

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = null;
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps && isFunction(callback)) {
            deps = [];
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, commentReplace)
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        if (context) {
            context.defQueue.push([name, deps, callback]);
            context.defQueueMap[name] = true;
        } else {
            globalDefQueue.push([name, deps, callback]);
        }
    };

    define.amd = {
        jQuery: true
    };

    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this, (typeof setTimeout === 'undefined' ? undefined : setTimeout)));

/**
 * 基本
 */
;(function (global) {

    /**
     * 初始化require模块
     */
    function requireInit() {
        var bs         = busyAdmin;
        var moduleRoot = bs.moduleRoot();
        var root       = bs.root();

        // 三方库
        init.addMod('bootstrap', 'bootstrap/js/bootstrap.min')
            .addMod('layer', 'layer/layer.min', ['css!' + moduleRoot + 'layer/theme/default/layer'])
            .addMod('moment', 'moment/moment.min')
            .addMod('marked', 'marked/marked.min')
            .addMod('vue', bs.config.debug ? 'vue/vue' : 'vue/vue.min')
            .addMod('clipboard', 'clipboard/clipboard.min')
            .addMod('md5', 'md5/md5.min')
            .addMod('sticky', 'sticky/jquery.sticky.min')
            .addMod('jqueryUi', 'jquery-ui/jquery-ui.min')

            // toastr
            // https://codeseven.github.io/toastr/demo.html
            .addMod('toastr', 'toastr/toastr.min', ['css!' + moduleRoot + 'toastr/toastr.min'])

            // 代码高亮
            .addMod('highlight', 'hijs/highlight.min', {
                deps    : ['css!hijs/css.min'],
                exports : 'hljs'
            })

            // 颜色选择器
            // @see https://itsjavi.com/bootstrap-colorpicker/
            .addMod('colorPicker', 'bootstrap-colorpicker/js/bootstrap-colorpicker.min', ['css!' + moduleRoot + 'bootstrap-colorpicker/css/bootstrap-colorpicker.min'])

            // 树结构
            // @see https://www.jstree.com.cn/
            .addMod('tree', 'tree/jstree.min', ['css!' + moduleRoot + 'tree/themes/default/style.min'])

            // 上传配置
            .addMod('uploadConfig', bs.getConfig('upload', {}).configUrl)

            // webUploader
            // @see http://fex.baidu.com/webuploader/getting-started.html
            .addMod('webUploader', 'webuploader/webuploader.min', ['css!' + moduleRoot + 'webuploader/webuploader'])


            // VideoJs
            // @see https://videojs.com/getting-started
            .addMod('video', 'video-js/video.min', ['css!video-js/video.min'])


            // AudioJs
            // @see http://kolber.github.io/audiojs/
            .addMod('audio', 'audio-js/audio.min')

            // ImageViewer
            // @see https://fengyuanchen.github.io/viewer/
            .addMod('imageViewer', 'image-viewer/viewer.min', ['css!image-viewer/viewer.min'])

            // 拖拽插件
            // @see http://sortablejs.github.io/Sortable/
            .addMod('sortable', 'sortable/sortable.min')

            // 表格拖拽
            .addMod('dragtable', 'dragtable/jquery-dragtable.min', ['css!' + moduleRoot + 'dragtable/dragtable.min', 'jqueryUi',])

            // treegrid
            // http://maxazan.github.io/jquery-treegrid/
            .addMod('treegrid', 'treegrid/jquery.treegrid.min', ['css!' + moduleRoot + 'treegrid/jquery.treegrid.min'])


            // bootstrapTable
            // @see https://bootstrap-table.com/docs/getting-started/introduction/
            .addMod('bootstrapTable', 'bootstrap-table/bootstrap-table.min', ['css!bootstrap-table/bootstrap-table.min'])


            // bootstrapTable 列拖拽排序
            // @see https://examples.bootstrap-table.com/#extensions/reorder-columns.html
            .addMod('bootstrapTableReorderColumns', 'bootstrap-table/reorder-columns/bootstrap-table-reorder-columns.min', ['dragtable'])


            // bootstrapTable 列宽度拖拽调整
            // @see https://bootstrap-table.com/docs/extensions/resizable/
            .addMod('bootstrapTableResizable', 'bootstrap-table/resizable/bootstrap-table-resizable', ['css!bootstrap-table/resizable/jquery.resizableColumns', 'bootstrap-table/resizable/jquery.resizableColumns.min',])

            // bootstrapTable 行拖拽排序
            // @see https://examples.bootstrap-table.com/#extensions/reorder-rows.html
            .addMod('bootstrapTableReorderRows', 'bootstrap-table/reorder-rows/bootstrap-table-reorder-rows.min', ['css!bootstrap-table/reorder-rows/bootstrap-table-reorder-rows', 'bootstrap-table/reorder-rows/jquery.tablednd.min',])


            // bootstrapTable 表头sticky固定
            // @see https://examples.bootstrap-table.com/#extensions/sticky-header.html
            .addMod('bootstrapTableStickyHeader', 'bootstrap-table/sticky-header/bootstrap-table-sticky-header.min', ['css!bootstrap-table/sticky-header/bootstrap-table-sticky-header'])

            // bootstrapTable tree插件
            // @see https://examples.bootstrap-table.com/#extensions/treegrid.html
            .addMod('bootstrapTableTree', 'bootstrap-table/tree/bootstrap-table-treegrid.min', ['treegrid'])


            // bootstrapTable 打印插件
            // @see https://examples.bootstrap-table.com/#extensions/print.html
            .addMod('bootstrapTablePrint', 'bootstrap-table/print/bootstrap-table-print.min')


            // bootstrapTable 冻结窗口
            // @see https://examples.bootstrap-table.com/#extensions/fixed-columns.html
            .addMod('bootstrapTableFixedColumns', 'bootstrap-table/fixed-columns/bootstrap-table-fixed-columns.min', ['css!bootstrap-table/fixed-columns/bootstrap-table-fixed-columns.min'])


            // bootstrapTable 导出
            // @see https://examples.bootstrap-table.com/index.html#extensions/export.html
            .addMod('bootstrapTableExport', 'bootstrap-table/export/bootstrap-table-export.min', ['bootstrap-table/export/tableExport.min'])

            // Ueditor
            // http://fex.baidu.com/ueditor/
            // https://github.com/fex-team/ueditor#ueditor
            .addMod('ueditor', 'ueditor/ueditor.all.min', [bs.getConfig('editor', {}).ueConfigUrl])
            .addMod('zeroClipboard', 'ueditor/third-party/zeroclipboard/ZeroClipboard.min')

            // ckEditor5Classic
            // https://ckeditor.com/docs/ckeditor5/latest/
            .addMod('ckEditor5Classic', 'ckeditor/ckeditor5-build-classic/ckeditor')

            // select2
            // https://select2.org/
            .addMod('select2', 'select2/select2.min', ['css!' + moduleRoot + 'select2/select2.min', 'css!' + moduleRoot + 'select2/select2-bootstrap.min'])

            // Autocomplete
            // https://goodies.pixabay.com/javascript/auto-complete/demo.html
            .addMod('autocomplete', 'autocomplete/auto-complete.min', ['css!' + moduleRoot + 'autocomplete/auto-complete.min'])


            // ArtTemplate
            // https://aui.github.io/art-template/zh-cn/docs/
            .addMod('artTemplate', 'art-template/template-web')


            // TreeTable
            // http://ludo.cubicphuse.nl/jquery-treetable/
            .addMod('treeTable', 'tree-table/jquery.treetable', ['css!' + moduleRoot + 'tree-table/jquery.treetable', 'css!' + moduleRoot + 'tree-table/jquery.treetable.theme.default'])

            // jQuery.validate
            // https://jqueryvalidation.org/
            .addMod('validate', 'validate/jquery.validate.min')

            // https://socketio.bootcss.com/
            .addMod('socketio', 'socketio/socket.io.min')

            // https://gitcode.net/mirrors/loadchange/gwm
            .addMod('gwm', 'gwm/gwm')

            // https://github.com/satazor/js-spark-md5
            .addMod('sparkMd5', 'spark-md5/spark-md5.min')

            // https://github.com/brix/crypto-js
            .addMod('cryptoJs', 'crypto-js/crypto-js.min')

            // https://github.com/NaturalIntelligence/fast-xml-parser
            .addMod('fxParser', 'fxparser/fxparser.min')

            // https://echarts.apache.org/zh/index.html
            .addMod('echarts', 'echarts/echarts.min')
            .addMod('echartsGl', 'echarts-gl/echarts-gl.min')

            // ion.rangeSlider
            // http://ionden.com/a/plugins/ion.rangeSlider
            .addMod('ionRangeSlider', 'ion-range-slider/ion.rangeSlider.min', ['css!ion-range-slider/ion.rangeSlider.min'])

            // bootstrap-star-rating
            // https://github.com/kartik-v/bootstrap-star-rating
            .addMod('bootstrapStarRatingCore', 'bootstrap-star-rating/js/star-rating.min', ['css!bootstrap-star-rating/css/star-rating.min'])
            .addMod('bootstrapStarRating', 'bootstrap-star-rating/themes/krajee-svg/theme.min', ['bootstrapStarRatingCore', 'css!bootstrap-star-rating/themes/krajee-svg/theme.min'])

            // fullcalendar
            // https://fullcalendar.io/
            .addMod('fullcalendar', 'fullcalendar/locales-all.min', [moduleRoot + 'fullcalendar/main.min.js', 'css!' + moduleRoot + 'fullcalendar/main.min'])

            // requirejs-plugins
            // https://github.com/millermedeiros/requirejs-plugins
            .addMod('json', 'require/json.min')
            .addMod('depend', 'require/depend.min')
            .addMod('font', 'require/font.min')
            .addMod('goog', 'require/goog.min')
            .addMod('i18n', 'require/i18n.min')
            .addMod('image', 'require/image.min')
            .addMod('mdown', 'require/mdown.min')
            .addMod('noext', 'require/noext.min')
            .addMod('propertyParser', 'require/propertyParser.min')
            .addMod('text', 'require/text.min');


        // 配置require
        require.config({
            baseUrl     : moduleRoot,
            urlArgs     : 'v=' + bs.config.version,
            waitSeconds : 0,
            map         : {
                '*' : {
                    css : 'require/css'
                }
            },
            paths       : init.requirePaths,
            shim        : init.requireShims
        });
    }

    /**
     * 驼峰转下划线
     * @param str
     * @return {string}
     */
    function snake(str) {
        return str.replace(/([A-Z])/g, "_$1").toLowerCase();
    }

    /**
     * 基本类
     * @constructor
     */
    function BusyAdmin() {
        var me = this;
        // 系统库
        me.sys = {
            core   : 'busyAdmin',
            jquery : 'jquery',
            pace   : 'pace',
        };

        // 三方基本库，
        // 只准备这2个预设值方便plugins初始导入使用，其他不提前准备
        me.lib = {
            bootstrap : 'bootstrap',
            layer     : 'layer'
        };

        // 事件
        me.e = {};

        // 组件
        me.plugins = {};

        // 连接点击忽略回调
        me.linkClickIgnore = [];


        // 表单提交忽略回调
        me.formSubmitIgnore = [];

        // 自动初始化
        me.autoInitList = [];

        /**
         * 辅助类
         * @type {BusyAdminHelper}
         */
        me.helper = null;

        /**
         * 应用
         * @type {BusyAdminApp}
         */
        me.app = null;

        /**
         * 路由
         * @type {BusyAdminRoute}
         */
        me.route = null;

        /**
         * 请求
         * @type {BusyAdminRequest}
         */
        me.request = null;

        /**
         * 请求
         * @type {BusyAdminResponse}
         */
        me.response = null;

        /**
         * 对话框
         * @type {BusyAdminDialog}
         */
        me.dialog = null;

        /**
         * require
         * @type {require}
         */
        me.require = require;

        /**
         * define
         * @type {define}
         */
        me.define = define;

        // 语言
        me.locale = {};

        // 配置
        me.config = {
            root       : '/',
            moduleRoot : '/',
            version    : '1.0.0',
            configs    : {},
        };

        // 自定义数据
        me.data = {};

        // 语法糖
        me.sugars = {};

        // require插件配置
        me.requireShims = {};
        me.requirePaths = {};

        // 默认层级
        me.defaultZIndex = 10000;
    }

    BusyAdmin.prototype = {
        /**
         * 添加自动实例化的方法和选择器
         * @param {String} selector
         * @param {Function} callback
         */
        autoInit : function (selector, callback) {
            this.autoInitList.push({
                selector : selector,
                callback : callback
            });
        },

        /**
         * 注册语法糖处理器
         * @param name
         * @param callback
         */
        regSugar : function (name, callback) {
            this.sugars[name] = callback;
        },

        /**
         * 调度语法糖
         * @param {HTMLElement} element DOM对象
         * @param {String} methods 语法糖方法
         * @param {BusyAdminResponse} result 响应内容
         * @param {[]} args 附加参数
         */
        dispatchSugar : function (element, methods, result, args) {
            if (typeof methods !== 'string' || !methods) {
                return;
            }

            var me  = this;
            methods = methods.split('|@');
            methods.map(function (item) {
                item = item.trim();
                if (!item || -1 === item.indexOf('.')) {
                    return;
                }

                if (0 === item.indexOf('@')) {
                    item = item.substr(1);
                }

                var index    = item.indexOf('.');
                var name     = item.substr(0, index).trim();
                var method   = item.substr(index + 1).trim();
                var callback = me.sugars[name];
                if (!name || !method || typeof callback !== "function") {
                    return;
                }

                callback.call(me, element, method, result, args);
            });
        },

        /**
         * 生成事件名称
         * @param {String} event
         * @param {String} group
         * @return {string}
         */
        ee : function (event, group) {
            return 'busy-admin:' + group + '-' + snake(event).replace(/_/g, '-').toLowerCase();
        },

        /**
         * 添加Require模块
         * @param {string} name 模块名称
         * @param {string} path 模块路径
         * @param {?[]} shim 模块依赖
         * @return {BusyAdmin}
         */
        addMod : function (name, path, shim) {
            var me                = this;
            me.lib[name]          = name;
            me.requirePaths[name] = path;
            if (shim) {
                me.requireShims[name] = shim;
            }

            return me;
        },

        /**
         * 设置配置
         * @param {Object} config
         * @return BusyAdmin
         */
        init : function (config) {
            var me    = this;
            me.config = config || {};

            // 初始化require定义
            requireInit();

            // 插件
            // plugins
            var plugins = $.map(['modal', 'audio', 'audioViewer', 'autocomplete', 'catalog', 'changeVerify', 'checkboxRadio', 'checkedAll', 'colorPicker', 'copy', 'datePicker', 'editor', 'filePicker', 'form', 'verify', 'high', 'iconPicker', 'imageViewer', 'markdown', 'request', 'searchBar', 'selectPicker', 'shuttle', 'table', 'tree', 'upload', 'videoViewer', 'dialog', 'random', 'linkagePicker', 'rangeSlider', 'rate', 'calendar'], function (item) {
                return './busyAdmin/plugins/' + item;
            });

            // 初始化全局运行requires
            var requireList = me.config.requires || [];
            if (typeof requireList === 'string' && requireList) {
                plugins.push(requireList);
            } else {
                $.map(requireList, function (item) {
                    plugins.push(item);
                })
            }

            // 加载Plugins
            require(plugins, function () {
                me.app.start();
            });

            return this;
        },

        /**
         * 获取跟目录地址
         * @return {String}
         */
        root : function () {
            return this.config.root || '/';
        },

        /**
         * 获取插件根目录
         * @return {String}
         */
        moduleRoot : function () {
            return this.config.moduleRoot || '/';
        },

        /**
         * 获取Skin根目录
         * @return {any}
         */
        skinRoot : function () {
            return this.config.skinRoot || '/';
        },


        /**
         * 获取Css根目录
         * @return {any}
         */
        cssRoot : function () {
            return this.config.cssRoot || '/';
        },

        /**
         * 获取Js根目录
         * @return {any}
         */
        jsRoot : function () {
            return this.config.jsRoot || '/';
        },

        /**
         * 获取图片根目录
         * @return {any}
         */
        imagesRoot : function () {
            return this.config.imagesRoot || '/';
        },

        /**
         * 获取配置
         * @param {String} key
         * @param defaults
         */
        getConfig : function (key, defaults) {
            return this.config.configs[key] || defaults;
        },

        /**
         * 准备完成回调
         * @param callback
         * @return {BusyAdmin}
         */
        ready : function (callback) {
            this.app.ready(callback);

            return this;
        },

        /**
         * 获取层级
         * @param {?number} step
         * @return {number}
         */
        zIndex : function (step) {
            this.defaultZIndex += (step || 1);

            return this.defaultZIndex;
        }
    }

    var init;
    global.busyAdmin = init = new BusyAdmin();

    // 定义插件
    define(init.sys.core, function () {
        return init;
    });
    define(init.sys.jquery, function () {
        return jQuery;
    });
    define(init.sys.pace, function () {
        return Pace;
    });


    // 初始化事件名称
    var eventGroup      = 'app';
    var eventRouteGroup = 'route';
    $.extend(init.e, {
        /**
         * 页面准备完成触发，此时基本元素还没有完全展示出来
         */
        appReady : init.ee('ready', eventGroup),
        /**
         * 应用销毁前执行
         */
        appBeforeDestroy : init.ee('before-destroy', eventGroup),
        /**
         * 页面准备就绪触发，基本元素都已经完全展示出来
         */
        appReadies : init.ee('readies', eventGroup),
        /**
         * 单页发起请求前触发，返回false阻止请求
         */
        appReqBefore : init.ee('req-before', eventGroup),
        /**
         * 单页请求完成触发，返回false阻止成功和失败执行
         */
        appReqComplete : init.ee('req-complete', eventGroup),
        /**
         * 单页请求错误触发，返回false阻止渲染错误页面
         */
        appReqError : init.ee('req-error', eventGroup),
        /**
         * 单页请求成功触发，返回false阻止渲染页面
         */
        appReqSuccess : init.ee('req-success', eventGroup),
        /**
         * 单页渲染完成前触发，返回false阻止继续渲染
         */
        appRenderBefore : init.ee('render-before', eventGroup),
        /**
         * 单页渲染完毕触发，此时插件可能还没有准备完成
         */
        appRenderSuccess : init.ee('render-success', eventGroup),
        /**
         * 单页渲染完成触发(所有插件准备完成后)
         */
        appComplete : init.ee('complete', eventGroup),
        /**
         * 插件准备完成触发
         */
        appPluginReady : init.ee('plugin-ready', eventGroup),
        /**
         * 登录成功
         */
        appLoginSucceed : init.ee('login-succeed', eventGroup),
        /**
         * 退出登录
         */
        appLoginOuted : init.ee('login-outed', eventGroup),
        /**
         * 清理缓存
         */
        appClearCache: init.ee('clear-cache', eventGroup),
        /**
         * 路由离开前触发，返回false阻止离开
         */
        routeBeforeLeave : init.ee('before-leave', eventRouteGroup),
        /**
         * 单页前进后退触发
         */
        routePopState : init.ee('pop-state', eventRouteGroup),
        /**
         * 单页前进后退决定不调度后触发
         */
        routeNoDispatch : init.ee('no-dispatch', eventRouteGroup)
    })
})(this);
;(function (busyAdmin, $) {
    'use strict';

    var isarray = Array.isArray || function (arr) {
        return Object.prototype.toString.call(arr) == '[object Array]';
    };

    /**
     * Expose `pathToRegexp`.
     */
    var pathToRegexp_1     = pathToRegexp;
    var parse_1            = parse;
    var compile_1          = compile;
    var tokensToFunction_1 = tokensToFunction;
    var tokensToRegExp_1   = tokensToRegExp;

    /**
     * The main path matching regexp utility.
     *
     * @type {RegExp}
     */
    var PATH_REGEXP = new RegExp([
        // Match escaped characters that would otherwise appear in future matches.
        // This allows the user to escape special characters that won't transform.
        '(\\\\.)',
        // Match Express-style parameters and un-named parameters with a prefix
        // and optional suffixes. Matches appear as:
        //
        // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
        // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
        // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
        '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))'
    ].join('|'), 'g');

    /**
     * Parse a string for the raw tokens.
     *
     * @param  {String} str
     * @return {Array}
     */
    function parse(str) {
        var tokens = [];
        var key    = 0;
        var index  = 0;
        var path   = '';
        var res;

        while ((res = PATH_REGEXP.exec(str)) != null) {
            var m       = res[0];
            var escaped = res[1];
            var offset  = res.index;
            path += str.slice(index, offset);
            index       = offset + m.length;

            // Ignore already escaped sequences.
            if (escaped) {
                path += escaped[1];
                continue
            }

            // Push the current path onto the tokens.
            if (path) {
                tokens.push(path);
                path = '';
            }

            var prefix   = res[2];
            var name     = res[3];
            var capture  = res[4];
            var group    = res[5];
            var suffix   = res[6];
            var asterisk = res[7];

            var repeat    = suffix === '+' || suffix === '*';
            var optional  = suffix === '?' || suffix === '*';
            var delimiter = prefix || '/';
            var pattern   = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?');

            tokens.push({
                name      : name || key++,
                prefix    : prefix || '',
                delimiter : delimiter,
                optional  : optional,
                repeat    : repeat,
                pattern   : escapeGroup(pattern)
            });
        }

        // Match any characters still remaining.
        if (index < str.length) {
            path += str.substr(index);
        }

        // If the path exists, push it onto the end.
        if (path) {
            tokens.push(path);
        }

        return tokens
    }

    /**
     * Compile a string to a template function for the path.
     *
     * @param  {String}   str
     * @return {Function}
     */
    function compile(str) {
        return tokensToFunction(parse(str))
    }

    /**
     * Expose a method for transforming tokens into the path function.
     */
    function tokensToFunction(tokens) {
        // Compile all the tokens into regexps.
        var matches = new Array(tokens.length);

        // Compile all the patterns before compilation.
        for (var i = 0; i < tokens.length; i++) {
            if (typeof tokens[i] === 'object') {
                matches[i] = new RegExp('^' + tokens[i].pattern + '$');
            }
        }

        return function (obj) {
            var path = '';
            var data = obj || {};

            for (var i = 0; i < tokens.length; i++) {
                var token = tokens[i];

                if (typeof token === 'string') {
                    path += token;

                    continue
                }

                var value = data[token.name];
                var segment;

                if (value == null) {
                    if (token.optional) {
                        continue
                    } else {
                        throw new TypeError('Expected "' + token.name + '" to be defined')
                    }
                }

                if (isarray(value)) {
                    if (!token.repeat) {
                        throw new TypeError('Expected "' + token.name + '" to not repeat, but received "' + value + '"')
                    }

                    if (value.length === 0) {
                        if (token.optional) {
                            continue
                        } else {
                            throw new TypeError('Expected "' + token.name + '" to not be empty')
                        }
                    }

                    for (var j = 0; j < value.length; j++) {
                        segment = encodeURIComponent(value[j]);

                        if (!matches[i].test(segment)) {
                            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
                        }

                        path += (j === 0 ? token.prefix : token.delimiter) + segment;
                    }

                    continue
                }

                segment = encodeURIComponent(value);

                if (!matches[i].test(segment)) {
                    throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
                }

                path += token.prefix + segment;
            }

            return path
        }
    }

    /**
     * Escape a regular expression string.
     *
     * @param  {String} str
     * @return {String}
     */
    function escapeString(str) {
        return str.replace(/([.+*?=^!:${}()[\]|\/])/g, '\\$1')
    }

    /**
     * Escape the capturing group by escaping special characters and meaning.
     *
     * @param  {String} group
     * @return {String}
     */
    function escapeGroup(group) {
        return group.replace(/([=!:$\/()])/g, '\\$1')
    }

    /**
     * Attach the keys as a property of the regexp.
     *
     * @param  {RegExp} re
     * @param  {Array}  keys
     * @return {RegExp}
     */
    function attachKeys(re, keys) {
        re.keys = keys;
        return re
    }

    /**
     * Get the flags for a regexp from the options.
     *
     * @param  {Object} options
     * @return {String}
     */
    function flags(options) {
        return options.sensitive ? '' : 'i'
    }

    /**
     * Pull out keys from a regexp.
     *
     * @param  {RegExp} path
     * @param  {Array}  keys
     * @return {RegExp}
     */
    function regexpToRegexp(path, keys) {
        // Use a negative lookahead to match only capturing groups.
        var groups = path.source.match(/\((?!\?)/g);

        if (groups) {
            for (var i = 0; i < groups.length; i++) {
                keys.push({
                    name      : i,
                    prefix    : null,
                    delimiter : null,
                    optional  : false,
                    repeat    : false,
                    pattern   : null
                });
            }
        }

        return attachKeys(path, keys)
    }

    /**
     * Transform an array into a regexp.
     *
     * @param  {Array}  path
     * @param  {Array}  keys
     * @param  {Object} options
     * @return {RegExp}
     */
    function arrayToRegexp(path, keys, options) {
        var parts = [];

        for (var i = 0; i < path.length; i++) {
            parts.push(pathToRegexp(path[i], keys, options).source);
        }

        var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

        return attachKeys(regexp, keys)
    }

    /**
     * Create a path regexp from string input.
     *
     * @param  {String} path
     * @param  {Array}  keys
     * @param  {Object} options
     * @return {RegExp}
     */
    function stringToRegexp(path, keys, options) {
        var tokens = parse(path);
        var re     = tokensToRegExp(tokens, options);

        // Attach keys back to the regexp.
        for (var i = 0; i < tokens.length; i++) {
            if (typeof tokens[i] !== 'string') {
                keys.push(tokens[i]);
            }
        }

        return attachKeys(re, keys)
    }

    /**
     * Expose a function for taking tokens and returning a RegExp.
     *
     * @param  {Array}  tokens
     * @param  {Array}  keys
     * @param  {Object} options
     * @return {RegExp}
     */
    function tokensToRegExp(tokens, options) {
        options = options || {};

        var strict        = options.strict;
        var end           = options.end !== false;
        var route         = '';
        var lastToken     = tokens[tokens.length - 1];
        var endsWithSlash = typeof lastToken === 'string' && /\/$/.test(lastToken);

        // Iterate over the tokens and create our regexp string.
        for (var i = 0; i < tokens.length; i++) {
            var token = tokens[i];

            if (typeof token === 'string') {
                route += escapeString(token);
            } else {
                var prefix  = escapeString(token.prefix);
                var capture = token.pattern;

                if (token.repeat) {
                    capture += '(?:' + prefix + capture + ')*';
                }

                if (token.optional) {
                    if (prefix) {
                        capture = '(?:' + prefix + '(' + capture + '))?';
                    } else {
                        capture = '(' + capture + ')?';
                    }
                } else {
                    capture = prefix + '(' + capture + ')';
                }

                route += capture;
            }
        }

        // In non-strict mode we allow a slash at the end of match. If the path to
        // match already ends with a slash, we remove it for consistency. The slash
        // is valid at the end of a path match, not in the middle. This is important
        // in non-ending mode, where "/test/" shouldn't match "/test//route".
        if (!strict) {
            route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\/(?=$))?';
        }

        if (end) {
            route += '$';
        } else {
            // In non-ending mode, we need the capturing groups to match as much as
            // possible by using a positive lookahead to the end or next path segment.
            route += strict && endsWithSlash ? '' : '(?=\\/|$)';
        }

        return new RegExp('^' + route, flags(options))
    }

    /**
     * Normalize the given path string, returning a regular expression.
     *
     * An empty array can be passed in for the keys, which will hold the
     * placeholder key descriptions. For example, using `/user/:id`, `keys` will
     * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
     *
     * @param  {(String|RegExp|Array)} path
     * @param  {Array}                 [keys]
     * @param  {Object}                [options]
     * @return {RegExp}
     */
    function pathToRegexp(path, keys, options) {
        keys = keys || [];

        if (!isarray(keys)) {
            options = keys;
            keys    = [];
        } else if (!options) {
            options = {};
        }

        if (path instanceof RegExp) {
            return regexpToRegexp(path, keys, options)
        }

        if (isarray(path)) {
            return arrayToRegexp(path, keys, options)
        }

        return stringToRegexp(path, keys, options)
    }

    pathToRegexp_1.parse            = parse_1;
    pathToRegexp_1.compile          = compile_1;
    pathToRegexp_1.tokensToFunction = tokensToFunction_1;
    pathToRegexp_1.tokensToRegExp   = tokensToRegExp_1;

    /**
     * Module dependencies.
     */


    /**
     * Short-cuts for global-object checks
     */

    var hasDocument = ('undefined' !== typeof document);
    var hasWindow   = ('undefined' !== typeof window);
    var hasHistory  = ('undefined' !== typeof history);
    var hasProcess  = typeof process !== 'undefined';

    /**
     * Detect click event
     */
    var clickEvent = hasDocument && document.ontouchstart ? 'touchstart' : 'click';

    /**
     * To work properly with the URL
     * history.location generated polyfill in https://github.com/devote/HTML5-History-API
     */

    var isLocation = hasWindow && !!(window.history.location || window.location);

    /**
     * The page instance
     * @api private
     */
    function Page() {
        // public things
        this.callbacks = [];
        this.exits     = [];
        this.current   = '';
        this.len       = 0;

        // private things
        this._decodeURLComponents = true;
        this._base                = '';
        this._strict              = false;
        this._running             = false;
        this._hashbang            = false;

        // bound functions
        this.clickHandler = this.clickHandler.bind(this);
        this._onpopstate  = this._onpopstate.bind(this);
    }

    Page.prototype = {
        /**
         * 配置页面参数，可以多次掉用
         * @param {Object} options
         * @api public
         */
        configure : function (options) {
            var opts = options || {};

            this._window              = opts.window || (hasWindow && window);
            this._decodeURLComponents = opts.decodeURLComponents !== false;
            this._popstate            = opts.popstate !== false && hasWindow;
            this._click               = opts.click !== false && hasDocument;
            this._hashbang            = !!opts.hashbang;

            var _window = this._window;
            if (this._popstate) {
                _window.addEventListener('popstate', this._onpopstate, false);
            } else if (hasWindow) {
                _window.removeEventListener('popstate', this._onpopstate, false);
            }

            if (this._click) {
                _window.document.addEventListener(clickEvent, this.clickHandler, false);
            } else if (hasDocument) {
                _window.document.removeEventListener(clickEvent, this.clickHandler, false);
            }

            if (this._hashbang && hasWindow && !hasHistory) {
                _window.addEventListener('hashchange', this._onpopstate, false);
            } else if (hasWindow) {
                _window.removeEventListener('hashchange', this._onpopstate, false);
            }
        },

        /**
         * 获取或设置路由基本路径
         * @param {string} path
         * @return {string|null}
         * @api public
         */
        base : function (path) {
            if (0 === arguments.length) {
                return this._base;
            }

            this._base = path;
        },

        /**
         * 获取基本路径
         * @return {string}
         * @api private
         */
        _getBase : function () {
            var base = this._base;
            if (base) {
                return base;
            }

            var loc = hasWindow && this._window && this._window.location;
            if (hasWindow && this._hashbang && loc && loc.protocol === 'file:') {
                base = loc.pathname;
            }

            return base;
        },

        /**
         * 获取或设置是否启用严格路径匹配
         * @param {boolean} enable
         * @api public
         * @return {boolean|null}
         */
        strict : function (enable) {
            if (0 === arguments.length) {
                return this._strict;
            }

            this._strict = enable;
        },

        /**
         * 启动路由并配置参数
         * Options:
         *    - `click` bind to click events [true]
         *    - `popstate` bind to popstate [true]
         *    - `dispatch` perform initial dispatch [true]
         * @param {Object} options
         * @api public
         */
        start : function (options) {
            var opts = options || {};
            this.configure(opts);

            // 不执行初始调度
            if (false === opts.dispatch) {
                return;
            }

            this._running = true;

            var url;
            if (isLocation) {
                var window = this._window;
                var loc    = window.location;

                if (this._hashbang && ~loc.hash.indexOf('#/')) {
                    url = loc.hash.substr(2) + loc.search;
                } else if (this._hashbang) {
                    url = loc.search + loc.hash;
                } else {
                    url = loc.pathname + loc.search + loc.hash;
                }
            }

            if (url === busyAdmin.helper.rtrim(this._base, '/')) {
                url = this._base;
            }
            this.replace(url, null, true, opts.dispatch);
        },

        /**
         * 取消点击事件和popstate事件处理
         * @api public
         */
        stop : function () {
            if (!this._running) {
                return;
            }

            this.current  = '';
            this.len      = 0;
            this._running = false;

            var window = this._window;
            this._click && window.document.removeEventListener(clickEvent, this.clickHandler, false);
            hasWindow && window.removeEventListener('popstate', this._onpopstate, false);
            hasWindow && window.removeEventListener('hashchange', this._onpopstate, false);
        },

        /**
         * 执行一个路由
         * @param {string} path 路由地址
         * @param {Object} state 路由状态设置
         * @param {boolean} dispatch 是否执行路由调度
         * @param {boolean} push 是否记录到浏览器历史记录
         * @return {Context}
         * @api public
         */
        show : function (path, state, dispatch, push) {
            var url = this._toURL(path);
            path    = url.pathname + url.search + url.hash;

            var ctx  = new Context(path, state, this);
            var prev = this.prevContext;

            this.prevContext = ctx;
            this.current     = ctx.path;

            // 执行调度
            if (false !== dispatch) {
                this.dispatch(ctx, prev);
            }

            // 添加到浏览器记录中
            if (false !== ctx.handled && false !== push) {
                ctx.pushState();
            }

            return ctx;
        },

        /**
         * 返回到某个地址
         * @param {string} path 路由地址
         * @param {Object} state 路由状态设置
         * @api public
         */
        back : function (path, state) {
            var page = this;
            if (this.len > 0) {
                var window = this._window;
                // this may need more testing to see if all browsers
                // wait for the next tick to go back in history
                hasHistory && window.history.back();
                this.len--;
            } else if (path) {
                setTimeout(function () {
                    page.show(path, state);
                });
            } else {
                setTimeout(function () {
                    page.show(page._getBase(), state);
                });
            }
        },

        /**
         * 重定向从一个地址跳转到另外一个地址，或者直接重定向到地址
         * @param {string} from 来源地址，如果to为空，则直接跳转到该页面
         * @param {string} to 目标地址
         */
        redirect : function (from, to) {
            var inst = this;

            // 定义从一条路径到另一条路径的路线
            if ('string' === typeof from && 'string' === typeof to) {
                var url = inst._toURL(from);
                page.call(this, url.pathname + url.search + url.hash, function (e) {
                    setTimeout(function () {
                        inst.replace(to);
                    }, 0);
                });
            }

            // Wait for the push state and replace it with another
            if ('string' === typeof from && 'undefined' === typeof to) {
                setTimeout(function () {
                    inst.replace(from);
                }, 0);
            }
        },

        /**
         * 替换路由
         * @param {string} path 路由路径
         * @param {Object} state 路由状态参数
         * @param {boolean} init 是否属于初始化
         * @param {boolean} dispatch 是否调度
         * @return {Context}
         */
        replace : function (path, state, init, dispatch) {
            var url  = this._toURL(path);
            path     = url.pathname + url.search + url.hash;
            var ctx  = new Context(path, state, this);
            var prev = this.prevContext;

            this.prevContext = ctx;
            this.current     = ctx.path;

            // 调度前保存路由, 可能会重定向
            ctx.init = init;
            ctx.save();

            // 执行调度
            if (false !== dispatch) {
                this.dispatch(ctx, prev);
            }

            return ctx;
        },

        /**
         * 通过Context执行调度
         * @param {Context} ctx
         * @param {Context} prev
         * @api private
         */
        dispatch : function (ctx, prev) {
            var i = 0, j = 0, page = this;

            // 触发路由离开前事件
            if (false === busyAdmin.helper.execCallback(null, document, [page, ctx, prev], $(document), busyAdmin.e.routeBeforeLeave, true, false)) {
                return;
            }

            function nextExit() {
                var fn = page.exits[j++];
                if (!fn) return nextEnter();
                fn(prev, nextExit);
            }

            function nextEnter() {
                var fn = page.callbacks[i++];

                if (ctx.path !== page.current) {
                    ctx.handled = false;
                    return;
                }
                if (!fn) return unhandled.call(page, ctx);
                fn(ctx, nextEnter);
            }

            if (prev) {
                nextExit();
            } else {
                nextEnter();
            }
        },

        /**
         * 注册退出路由回调，当访问新页面是执行
         * @param {string|Function} path 页面路径或回调方法，设置回调方法则注册全部页面的退出回调
         * @param {Function} fn 回调方法
         * @return {undefined}
         */
        exit : function (path, fn) {
            if (typeof path === 'function') {
                return this.exit('*', path);
            }

            var route = new Route(path, null, this);
            for (var i = 1; i < arguments.length; ++i) {
                this.exits.push(route.middleware(arguments[i]));
            }
        },

        /**
         * 拦截点击事件
         * @param e
         * @param show
         * @return {boolean}
         */
        clickHandler : function (e, show) {
            if (1 !== this._which(e)) {
                return false;
            }

            if (e.metaKey || e.ctrlKey || e.shiftKey) {
                return false;
            }
            if (e.defaultPrevented) {
                return false;
            }

            // ensure link
            // use shadow dom when available if not, fall back to composedPath()
            // for browsers that only have shady
            var el        = e.target;
            var eventPath = e.path || (e.composedPath ? e.composedPath() : null);

            if (eventPath) {
                for (var i = 0; i < eventPath.length; i++) {
                    if (!eventPath[i].nodeName) continue;
                    if (eventPath[i].nodeName.toUpperCase() !== 'A') continue;
                    if (!eventPath[i].href) continue;

                    el = eventPath[i];
                    break;
                }
            }

            // continue ensure link
            // el.nodeName for svg links are 'a' instead of 'A'
            while (el && 'A' !== el.nodeName.toUpperCase()) el = el.parentNode;
            if (!el || 'A' !== el.nodeName.toUpperCase()) {
                return false;
            }

            // check if link is inside an svg
            // in this case, both href and target are always inside an object
            var svg = (typeof el.href === 'object') && el.href.constructor.name === 'SVGAnimatedString';

            // Ignore if tag has
            // 1. "download" attribute
            // 2. rel="external" attribute
            if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') {
                return false;
            }

            // ensure non-hash for the same path
            var link = el.getAttribute('href');
            if (!this._hashbang && this._samePath(el) && (el.hash || '#' === link)) {
                return false;
            }

            // Check for mailto: in the href
            if (link && link.indexOf('mailto:') > -1) {
                return false;
            }

            // check target
            // svg target is an object and its desired value is in .baseVal property
            if (svg ? el.target.baseVal : el.target) {
                return false;
            }

            // x-origin
            // note: svg links that are not relative don't call click events (and skip page.js)
            // consequently, all svg links tested inside page.js are relative and in the same origin
            if (!svg && !this.sameOrigin(el.href)) {
                return false;
            }

            // rebuild path
            // There aren't .pathname and .search properties in svg links, so we use href
            // Also, svg href is an object and its desired value is in .baseVal property
            var path = svg ? el.href.baseVal : (el.pathname + el.search + (el.hash || ''));

            path = path[0] !== '/' ? '/' + path : path;

            // strip leading "/[drive letter]:" on NW.js on Windows
            if (hasProcess && path.match(/^\/[a-zA-Z]:\//)) {
                path = path.replace(/^\/[a-zA-Z]:\//, '/');
            }

            // same page
            var orig     = path;
            var pageBase = this._getBase();

            if (path.indexOf(pageBase) === 0) {
                path = path.substr(pageBase.length);
            }

            if (this._hashbang) {
                path = path.replace('#/', '');
            }

            if (pageBase && orig === path && (!isLocation || this._window.location.protocol !== 'file:')) {
                return false;
            }

            e.preventDefault();
            show !== false && this.show(orig);

            return orig;
        },

        /**
         * 拦截浏览器的前进后队事件
         * @type {(function(...[*]=))|onpopstate}
         * @private
         */
        _onpopstate : (function () {
            var loaded = false;
            if (!hasWindow) {
                return function () {
                };
            }
            if (hasDocument && document.readyState === 'complete') {
                loaded = true;
            } else {
                window.addEventListener('load', function () {
                    setTimeout(function () {
                        loaded = true;
                    }, 0);
                });
            }

            return function onpopstate(e) {
                if (!loaded) {
                    return;
                }

                var page = this;

                // 触发前进后退事件
                if (false === busyAdmin.helper.execCallback(null, document, [this, e], $(document), busyAdmin.e.routePopState, true, false)) {
                    return;
                }

                if (e.state) {
                    var path             = e.state.path;
                    var popStateDispatch = e.state.popStateDispatch;
                    page.replace(path, e.state, undefined, popStateDispatch);
                    if (popStateDispatch === false) {
                        busyAdmin.helper.execCallback(null, document, [this, e], $(document), busyAdmin.e.routeNoDispatch);
                    }
                } else if (isLocation) {
                    var loc = page._window.location;
                    page.show(loc.pathname + loc.search + loc.hash, undefined, undefined, false);
                }
            };
        })(),

        /**
         * Event button.
         * @param e
         * @return {*}
         * @private
         */
        _which : function (e) {
            e = e || (hasWindow && this._window.event);
            return null == e.which ? e.button : e.which;
        },

        /**
         * URL转对象
         * @api private
         * @return {URL}
         */
        _toURL : function (href) {
            var window = this._window;
            if (typeof URL === 'function' && isLocation) {
                return new URL(href, window.location.toString());
            } else if (hasDocument) {
                var anc  = window.document.createElement('a');
                anc.href = href;
                return anc;
            }
        },

        /**
         * 判断网址是否和当前访问的网址一致
         * @param {string} href
         * @return {boolean}
         */
        sameOrigin : function (href) {
            if (!href || !isLocation) return false;

            var url    = this._toURL(href);
            var window = this._window;

            var loc = window.location;

            /*
             When the port is the default http port 80 for http, or 443 for
             https, internet explorer 11 returns an empty string for loc.port,
             so we need to compare loc.port with an empty string if url.port
             is the default port 80 or 443.
             Also the comparition with `port` is changed from `===` to `==` because
             `port` can be a string sometimes. This only applies to ie11.
             */
            return loc.protocol === url.protocol &&
                   loc.hostname === url.hostname &&
                   (loc.port === url.port || loc.port === '' && (url.port == 80 || url.port == 443)); // jshint ignore:line
        },

        /**
         * 判断路径和当前访问的路径一致
         * @param {URL} url
         * @return {boolean}
         * @private
         */
        _samePath : function (url) {
            if (!isLocation) return false;
            var window = this._window;
            var loc    = window.location;
            return url.pathname === loc.pathname && url.search === loc.search;
        },

        /**
         * 将URL中的+号替换成空格
         * @param {string} val
         * @return {string}
         * @private
         */
        _decodeURLEncodedURIComponent : function (val) {
            if (typeof val !== 'string') {
                return val;
            }
            return this._decodeURLComponents ? decodeURIComponent(val.replace(/\+/g, ' ')) : val;
        },

        /**
         * 重新载入页面
         */
        reload : function () {
            var loc  = this._window.location;
            var path = loc.pathname + loc.search + loc.hash;
            this.replace(path);
        },

        /**
         * 解析响应操作
         * @param {BusyAdminResponse~result} result
         * @param {String} operate
         * @param {Function} after
         */
        parseRespOperate : function (result, operate, after) {
            if (typeof operate === "string") {
                operate = operate.trim().toLowerCase();
                if (!operate.length) {
                    return;
                }

                switch (operate) {
                    case 'reload':
                    case 'refresh':
                        this.reload();
                        return;
                    case 'redirect':
                    case 'jump':
                    case 'go':
                        this.show(result.url || this.base());
                        return;
                    case 'replace':
                        this.replace(result.url || this.base());
                        return;
                    case 'back':
                        this.back();
                        return;
                    default:
                        typeof after === "function" && after.call(this, operate);
                }
            }
        },
    };


    /**
     * Create a new `page` instance and function
     */
    function createPage() {
        var pageInstance = new Page();

        function pageFn(/* args */) {
            return page.apply(pageInstance, arguments);
        }

        // Copy all of the things over. In 2.0 maybe we use setPrototypeOf
        pageFn.callbacks        = pageInstance.callbacks;
        pageFn.exits            = pageInstance.exits;
        pageFn.base             = pageInstance.base.bind(pageInstance);
        pageFn.strict           = pageInstance.strict.bind(pageInstance);
        pageFn.start            = pageInstance.start.bind(pageInstance);
        pageFn.stop             = pageInstance.stop.bind(pageInstance);
        pageFn.show             = pageInstance.show.bind(pageInstance);
        pageFn.back             = pageInstance.back.bind(pageInstance);
        pageFn.redirect         = pageInstance.redirect.bind(pageInstance);
        pageFn.replace          = pageInstance.replace.bind(pageInstance);
        pageFn.dispatch         = pageInstance.dispatch.bind(pageInstance);
        pageFn.exit             = pageInstance.exit.bind(pageInstance);
        pageFn.configure        = pageInstance.configure.bind(pageInstance);
        pageFn.sameOrigin       = pageInstance.sameOrigin.bind(pageInstance);
        pageFn.clickHandler     = pageInstance.clickHandler.bind(pageInstance);
        pageFn.reload           = pageInstance.reload.bind(pageInstance);
        pageFn.parseRespOperate = pageInstance.parseRespOperate.bind(pageInstance);

        pageFn.create = createPage;

        Object.defineProperty(pageFn, 'len', {
            get : function () {
                return pageInstance.len;
            },
            set : function (val) {
                pageInstance.len = val;
            }
        });

        Object.defineProperty(pageFn, 'current', {
            get : function () {
                return pageInstance.current;
            },
            set : function (val) {
                pageInstance.current = val;
            }
        });

        // In 2.0 these can be named exports
        pageFn.Context = Context;
        pageFn.Route   = Route;

        return pageFn;
    }

    /**
     * Register `path` with callback `fn()`,
     * or route `path`, or redirection,
     * or `page.start()`.
     *
     *   page(fn);
     *   page('*', fn);
     *   page('/user/:id', load, user);
     *   page('/user/' + user.id, { some: 'thing' });
     *   page('/user/' + user.id);
     *   page('/from', '/to')
     *   page();
     *
     * @param {string|!Function|!Object} path
     * @param {Function=} fn
     * @api public
     */
    function page(path, fn) {
        // <callback>
        if ('function' === typeof path) {
            return page.call(this, '*', path);
        }

        // route <path> to <callback ...>
        if ('function' === typeof fn) {
            var route = new Route(/** @type {string} */ (path), null, this);
            for (var i = 1; i < arguments.length; ++i) {
                this.callbacks.push(route.middleware(arguments[i]));
            }
            // show <path> with [state]
        } else if ('string' === typeof path) {
            this['string' === typeof fn ? 'redirect' : 'show'](path, fn);
            // start [options]
        } else {
            this.start(path);
        }
    }

    /**
     * Unhandled `ctx`. When it's not the initial
     * popstate then redirect. If you wish to handle
     * 404s on your own use `page('*', callback)`.
     *
     * @param {Context} ctx
     * @api private
     */
    function unhandled(ctx) {
        if (ctx.handled) return;
        var current;
        var page   = this;
        var window = page._window;

        if (page._hashbang) {
            current = isLocation && this._getBase() + window.location.hash.replace('#/', '');
        } else {
            current = isLocation && window.location.pathname + window.location.search;
        }

        if (current === ctx.canonicalPath) return;
        page.stop();
        ctx.handled = false;
        isLocation && (window.location.href = ctx.canonicalPath);
    }

    /**
     * Escapes RegExp characters in the given string.
     *
     * @param {string} s
     * @api private
     */
    function escapeRegExp(s) {
        return s.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1');
    }

    /**
     * Initialize a new "request" `Context`
     * with the given `path` and optional initial `state`.
     *
     * @constructor
     * @param {string} path
     * @param {Object=} state
     * @param pageInstance
     * @api public
     */
    function Context(path, state, pageInstance) {
        var _page    = this.page = pageInstance || page;
        var window   = _page._window;
        var hashbang = _page._hashbang;

        var pageBase = _page._getBase();
        if ('/' === path[0] && 0 !== path.indexOf(pageBase)) path = pageBase + (hashbang ? '#/' : '') + path;
        var i = path.indexOf('?');

        this.canonicalPath = path;
        var re             = new RegExp('^' + escapeRegExp(pageBase));
        this.path          = path.replace(re, '') || '/';
        if (hashbang) this.path = this.path.replace('#/', '') || '/';

        this.title       = (hasDocument && window.document.title);
        this.state       = state || {};
        this.state.path  = path;
        this.querystring = ~i ? _page._decodeURLEncodedURIComponent(path.slice(i + 1)) : '';
        this.pathname    = _page._decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);
        this.params      = {};

        // fragment
        this.hash = '';
        if (!hashbang) {
            if (!~this.path.indexOf('#')) return;
            var parts        = this.path.split('#');
            this.path        = this.pathname = parts[0];
            this.hash        = _page._decodeURLEncodedURIComponent(parts[1]) || '';
            this.querystring = this.querystring.split('#')[0];
        }
    }

    Context.prototype = {
        /**
         * Push state.
         * @api private
         */
        pushState : function () {
            var page     = this.page;
            var window   = page._window;
            var hashbang = page._hashbang;

            page.len++;
            if (hasHistory) {
                window.history.pushState(this.state, this.title, hashbang && this.path !== '/' ? '#/' + this.path : this.canonicalPath);
            }
        },

        /**
         * Save the context state.
         * @api public
         */
        save : function () {
            var page = this.page;
            if (hasHistory) {
                page._window.history.replaceState(this.state, this.title, page._hashbang && this.path !== '/' ? '#/' + this.path : this.canonicalPath);
            }
        },
    };


    /**
     * Initialize `Route` with the given HTTP `path`,
     * and an array of `callbacks` and `options`.
     *
     * Options:
     *
     *   - `sensitive`    enable case-sensitive routes
     *   - `strict`       enable strict matching for trailing slashes
     *
     * @constructor
     * @param {string} path
     * @param {Object=} options
     * @param page
     * @api private
     */
    function Route(path, options, page) {
        var _page   = this.page = page || globalPage;
        var opts    = options || {};
        opts.strict = opts.strict || _page._strict;
        this.path   = (path === '*') ? '(.*)' : path;
        this.method = 'GET';
        this.regexp = pathToRegexp_1(this.path, this.keys = [], opts);
    }

    Route.prototype = {
        /**
         * Return route middleware with
         * the given callback `fn()`.
         *
         * @param {Function} fn
         * @return {Function}
         * @api public
         */
        middleware : function (fn) {
            var self = this;
            return function (ctx, next) {
                if (self.match(ctx.path, ctx.params)) {
                    ctx.routePath = self.path;
                    return fn(ctx, next);
                }
                next();
            };
        },

        /**
         * Check if this route matches `path`, if so
         * populate `params`.
         *
         * @param {string} path
         * @param {Object} params
         * @return {boolean}
         * @api private
         */
        match : function (path, params) {
            var keys     = this.keys,
                qsIndex  = path.indexOf('?'),
                pathname = ~qsIndex ? path.slice(0, qsIndex) : path,
                m        = this.regexp.exec(decodeURIComponent(pathname));

            if (!m) return false;

            delete params[0];

            for (var i = 1, len = m.length; i < len; ++i) {
                var key = keys[i - 1];
                var val = this.page._decodeURLEncodedURIComponent(m[i]);
                if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {
                    params[key.name] = val;
                }
            }

            return true;
        },
    };

    /**
     * Module exports.
     */
    var globalPage = createPage();
    var page_js    = globalPage;
    var default_1  = globalPage;

    page_js.default = default_1;

    busyAdmin.route = page_js;
    busyAdmin.regSugar('route', function (element, method, result, args) {
        busyAdmin.route.parseRespOperate(result, method);
    });

    return page_js;
})(window.busyAdmin || {}, jQuery);

/**
 * busyAdmin辅助
 */
;(function ($, busyAdmin) {
    'use strict';

    busyAdmin.helper = {
        /**
         * 解析URL
         * @method {parseURL}
         * @param {string} url 要解析的URL，空则获取当前网址
         * @return {BusyAdminParseURL~result}
         */
        parseURL : function (url) {
            var a  = document.createElement('a');
            a.href = url;

            var path         = a.pathname.replace(/^([^\/])/, '/$1');
            var pathNoSuffix = path.substring(0, path.lastIndexOf('.'));
            pathNoSuffix     = pathNoSuffix ? pathNoSuffix : path;

            return {
                source       : url,
                protocol     : a.protocol.replace(':', ''),
                host         : a.hostname,
                port         : a.port,
                query        : a.search,
                params       : (function () {
                    var ret = {}, seg = a.search.replace(/^\?/, '').split('&'), len = seg.length, i = 0, s;

                    for (; i < len; i++) {
                        if (!seg[i]) {
                            continue;
                        }

                        s         = seg[i].split('=');
                        var name  = decodeURIComponent(s[0]);
                        var value = decodeURIComponent(s[1]);
                        if (ret.hasOwnProperty(name)) {
                            if ($.isArray(ret[name])) {
                                ret[name].push(value);
                            } else {
                                ret[name] = [ret[name]];
                                ret[name].push(value);
                            }
                        } else {
                            ret[name] = value;
                        }
                    }
                    return ret;
                })(),
                filename     : (a.pathname.match(/\/([^\/?#]+)$/i) || [, ''])[1],
                hash         : a.hash.replace('#', ''),
                path         : path,
                pathNoSuffix : pathNoSuffix,
                relative     : (a.href.match(/tps?:\/\/[^\/]+(.+)/) || [, ''])[1],
                segments     : a.pathname.replace(/^\//, '').split('/')
            };
        },


        /**
         * 检测是否URL
         * @param {string} url
         * @return {boolean}
         */
        checkURL : function (url) {
            url = url || '';

            return !(0 === url.indexOf('javascript:') || 0 === url.indexOf('#'));
        },


        /**
         * 获取值
         * @param {object} data object对象
         * @param {string} key 键名称
         * @param {any?} defaults 默认值
         * @param {boolean?} checkEmpty 是否检测为空，如果为空则输出默认值
         * @return {any}
         */
        getObjectValue : function (data, key, defaults, checkEmpty) {
            if (!data.hasOwnProperty(key)) {
                return defaults;
            }

            var value = data[key];
            if (checkEmpty === true) {
                if (typeof defaults === 'string') {
                    value = value.trim();
                }

                if (!value) {
                    return defaults;
                }
            }

            return value;
        },


        /**
         * 监听DOM结构发生改变
         * @param {Function} callback
         */
        onDomChange : function (callback) {
            var timer   = null;
            var timeout = 0;
            if (window.MutationObserver) {
                var observer = new MutationObserver(function (mutations) {
                    if (mutations[0].addedNodes.length || mutations[0].removedNodes.length) {
                        clearTimeout(timer);
                        timer = setTimeout(function () {
                            callback();
                        }, timeout);
                    }
                });
                observer.observe(window.document, {
                    subtree   : true,
                    childList : true,
                })
            } else {
                if (window.addEventListener) {
                    document.addEventListener('DOMNodeInserted', function (e) {
                        clearTimeout(timer);
                        timer = setTimeout(function () {
                            callback();
                        }, timeout);
                    }, false);
                } else if (window.attachEvent) {
                    document.attachEvent('onDOMNodeInserted', function () {
                        clearTimeout(timer);
                        timer = setTimeout(function () {
                            callback();
                        }, timeout);
                    });
                }
            }

            $(function () {
                callback();
            });
        },

        /**
         * 监听浏览器前进后退事件
         * @param {Function} callback
         */
        onPopState : function (callback) {
            if (window.history && window.history.pushState) {
                $(window).on('popstate', callback);
            }
        },

        /**
         * 解析data
         * @param {Object} data 要转换的数据
         * @param {string|[string]} prefix 移除的前缀
         * @param {string|[string]} filter 要保留的前缀
         * @return {Object}
         */
        parseData : function (data, prefix, filter) {
            prefix      = typeof prefix === "string" ? [prefix] : prefix;
            filter      = typeof filter === "string" ? [filter] : (filter || []);
            var newData = {};
            for (var k in data) {
                filter.map(function (item) {
                    if (0 === k.indexOf(item)) {
                        newData[k] = data[k];
                    }
                });

                prefix.map(function (item) {
                    var length = item.length;
                    if (0 === k.indexOf(item)) {
                        var str    = k.slice(length);
                        var newKey = str.slice(0, 1).toLowerCase() + str.slice(1);
                        if (newKey.length == 0) {
                            return;
                        }

                        newData[str.slice(0, 1).toLowerCase() + str.slice(1)] = data[k];
                    }
                });
            }

            return newData;
        },

        /**
         * 生成UUID
         * @return {string}
         */
        uuid : function uuid() {
            var s         = [];
            var hexDigits = "0123456789abcdef";
            for (var i = 0; i < 36; i++) {
                s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
            }
            s[14] = "4";
            s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);
            s[8]  = s[13] = s[18] = s[23] = "-";

            return s.join("");
        },

        /**
         * 转义HTML
         * @param html
         * @return {string}
         */
        htmlEncode : function (html) {
            var temp = document.createElement("div");
            (temp.textContent != null) ? (temp.textContent = html) : (temp.innerText = html);
            var output = temp.innerHTML;
            temp       = null;
            return output;
        },

        /**
         * 还原转义的HTML
         * @param content
         * @return {string}
         */
        htmlDecode : function (content) {
            var temp       = document.createElement("div");
            temp.innerHTML = content;
            var output     = temp.innerText || temp.textContent;
            temp           = null;
            return output;
        },


        /**
         * 执行回调
         * @param {string|Function} callback 回调方法或全局window变量
         * @param {[]} context 内部指针
         * @param {[]} args 附加参数
         * @param {jQuery|[jQuery]} $target jQuery对象，设置后触发对应的事件
         * @param {String|$.Event} event jQuery事件名称
         * @param {Boolean|null} prevent 是否阻止callback传递，默认不阻止
         * @param {[]} preventResult 回调返回什么内容才阻止callback传递
         * @param {Boolean} preventResultIsType 返回的内容按照类型拦截
         * @return {*}
         */
        execCallback : function (callback, context, args, $target, event, prevent, preventResult, preventResultIsType) {
            if (typeof callback === 'string') {
                callback = callback.trim();

                // 解析this为上级
                if (0 === callback.indexOf('!')) {
                    callback = callback.substring(1, callback.length);
                    var scope = callback.substring(0, callback.lastIndexOf('.'));
                    if (scope.length > 0) {
                        context = busyAdmin.helper.scope(scope) || context;
                    }
                }

                if (callback.length > 0) {
                    callback = busyAdmin.helper.scope(callback);
                }
            }

            var result = null;
            if ($target && $target.length && $target.length > 0) {
                var other = [];
                if ($.isArray($target)) {
                    var $first = $target.shift();
                    other      = $target;
                    $target    = $first;
                }

                other.map(function ($item) {
                    $item.triggerHandler(event, args);
                })

                result = $target.triggerHandler(event, args);
                if (prevent === null) {
                    return result;
                }

                if (prevent) {
                    if (preventResultIsType) {
                        if (typeof result === preventResult) {
                            return result;
                        }
                    } else {
                        if (preventResult === result) {
                            return result;
                        }
                    }
                }
            }

            if (typeof callback === 'function') {
                args    = args || [];
                context = context || this;

                return callback.apply(context, args);
            }

            return result;
        },

        /**
         * Base64加密
         * @param {string} content 要加密的字符
         * @return {string}
         */
        base64Encode : function (content) {
            return window.btoa(unescape(encodeURIComponent(content)));
        },

        /**
         * Base64解密
         * @param {string} content 要解密的字符
         * @return {string}
         */
        base64Decode : function (content) {
            return decodeURIComponent(escape(window.atob(content)));
        },

        /**
         * 强制转为int
         * @param number
         * @return {number}
         */
        int : function (number) {
            number = parseInt(number);

            return isNaN(number) ? 0 : number;
        },

        /**
         * 强制转为float
         * @param number
         * @return {number}
         */
        float : function (number) {
            number = parseFloat(number);

            return isNaN(number) ? 0 : number;
        },


        /**
         * 通过jQuery选择器获取对应的jQuery对象
         * @param {String} selector
         * @return {jQuery}
         */
        getElementBySelector : function (selector) {
            var $custom = $(selector);
            if ($custom.length > 0) {
                if ($custom[0].tagName === 'SCRIPT') {
                    $custom = $($custom.html());
                }
            }

            return $custom;
        },

        /**
         * 下划线转驼峰
         * @param {String} str
         * @return {string}
         */
        camel : function (str) {
            return str.replace(/_(\w)/g, function (all, letter) {
                return letter.toUpperCase();
            });
        },


        /**
         * 驼峰转下划线
         * @param {String} str
         * @param {String} line
         * @return {string}
         */
        snake : function (str, line) {
            line = line || '_';
            str  = str.replace(/\s+/ug, '', str);

            return str.replace(/(.)(?=[A-Z])/ug, "$1" + line).toLowerCase();
        },

        /**
         * 替换字符
         * @param {...String}
         * @return {String}
         */
        sprintf : function () {
            let args = arguments, string = args[0];
            for (let i = 1; i < args.length; i++) {
                let item = arguments[i];
                string   = string.replace('%s', item);
            }

            return string;
        },


        /**
         * 地址预览处理
         * @param options
         */
        urlPreviewHandler : function (options) {
            switch (options.url.substring(options.url.lastIndexOf(".") + 1).trim().toLowerCase()) {
                case 'jpeg':
                case 'png':
                case 'gif':
                case 'jpg':
                    typeof options.image === 'function' && options.image();
                    break;
                case 'mp4':
                case 'webm':
                case 'ogv':
                    typeof options.video === 'function' && options.video();
                    break;
                case 'mp3':
                    typeof options.audio === 'function' && options.audio();
                    break;
                default:
                    typeof options.file === 'function' && options.file();
            }
        },

        /**
         * 通过下标删除数组
         * @param {[T]} data
         * @param {number} index
         * @return {[T]}
         */
        arrayRemoveByIndex : function (data, index) {
            data = data || [];
            if (data.length === 0 || index < 0) {
                return data;
            }

            return data.slice(0, n).concat(data.slice(n + 1, data.length));
        },

        /**
         * 触发插件准备完成事件
         * @param {jQuery} $element
         * @param {String} pluginName
         * @param {?[]} context 插件上下文
         */
        triggerPluginReady : function ($element, pluginName, context) {
            $(document).triggerHandler(busyAdmin.e.appPluginReady, [$element, pluginName, context]);
        },

        /**
         * 类继承实现
         * @param {Object} classTarget 要继承的类
         * @param {Object} methods 覆盖的方法
         * @return {Object} 旧方法集合
         */
        extends : function (classTarget, methods) {
            // 保留旧方法
            var oldMethods = {};
            for (var methodsKey in methods) {
                oldMethods[methodsKey] = classTarget[methodsKey];
            }

            $.extend(classTarget, methods);

            return oldMethods;
        },

        /**
         * 类方法重写方法实现
         * @param {Object} oldMethods 旧方法集合
         * @param {String} name 方法名称
         * @param {[]} context 上下文
         * @param {Arguments} args 方法参数
         * @return {*}
         */
        override : function (oldMethods, name, context, args) {
            var method = oldMethods[name];
            if (typeof method === 'function') {
                return method.apply(context, Array.prototype.slice.call(args));
            }

            throw method;
        },


        /**
         * 获取作用域内的变量或方法
         * @param {[]} name
         * @param {[]} defaults
         * @return {[]}
         */
        scope : function (name, defaults) {
            if (typeof name !== 'string') {
                return name;
            }

            var startDot = name.indexOf('.');
            if (startDot === -1) {
                return busyAdmin.data[name] || window[name] || defaults;
            }

            var arr   = name.split('.');
            name      = arr.shift();
            var value = busyAdmin.data[name] || window[name] || {};
            var len   = arr.length;

            var createCode = function (val, key, def) {
                return '(' + val + '.' + key + ' || ' + def + ')';
            };
            var code       = '';
            for (var i = 0; i < len; i++) {
                var val, def;
                if (i == 0) {
                    code = 'value';
                }
                code = createCode(code, arr.shift(), i + 1 == len ? 'defaults' : '{}');
            }

            try {
                return eval(code);
            } catch (e) {
                return defaults;
            }
        },

        /**
         * 获取滚动条宽度
         * @return {number}
         */
        getScrollbarWidth : function () {
            var outer            = document.createElement('div')
            var inner            = document.createElement('div')
            outer.style.overflow = 'scroll'
            document.body.appendChild(outer)
            outer.appendChild(inner)
            var scrollbarWidth = outer.offsetWidth - inner.offsetWidth
            document.body.removeChild(outer)
            return scrollbarWidth;
        },

        /**
         * 剔除左侧内容
         * @param str
         * @param space
         * @return {string}
         */
        ltrim : function (str, space) {
            space = space || '\s';
            return str.replace(RegExp('(^' + space + '*)', 'g'), "");
        },

        /**
         * 剔除右侧内容
         * @param str
         * @param space
         * @return {string}
         */
        rtrim : function (str, space) {
            space = space || '\s';

            return str.replace(RegExp('(' + space + '*$)', 'g'), "");
        },

        /**
         * 生成随机字符
         * @param length
         * @param chars
         * @return {string}
         */
        random : function (length, chars) {
            length     = length || 32;
            chars      = chars || 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';
            var max    = chars.length;
            var string = '';
            for (var i = 0; i < length; i++) {
                string += chars.charAt(Math.floor(Math.random() * max));
            }

            return string;
        },

        /**
         * 数组转树结构
         * @param {[{}]} list
         * @param {String} idField
         * @param {String} childField
         * @param {String} parentField
         * @param {String} root
         * @returns {[{}]}
         */
        listToTree : function (list, idField, childField, parentField, root) {
            list        = list || [];
            idField     = idField || 'id';
            childField  = childField || 'child';
            parentField = parentField || 'parent';
            root        = root || '';

            var tree   = []
            var record = {}
            for (var i = 0, len = list.length; i < len; i++) {
                var item = list[i]
                var id   = item[idField]

                if (!id) {
                    continue
                }

                if (record[id]) {
                    item[childField] = record[id]
                } else {
                    item[childField] = record[id] = []
                }

                if (item[parentField] && item[parentField] != root) {
                    var parentId = item[parentField]

                    if (!record[parentId]) {
                        record[parentId] = []
                    }

                    record[parentId].push(item)
                } else {
                    tree.push(item)
                }
            }

            return tree
        }

        /**
         * 解析URL返回结果
         * @name BusyAdminParseURL~result
         * @property {string} source 原网址
         * @property {string} protocol 请求协议
         * @property {string} host 域名
         * @property {string} port 端口号
         * @property {string} query 查询参数
         * @property {object} params 参数集合
         * @property {string} filename 文件名
         * @property {string} hash URL hash 部分
         * @property {string} path URL路径，不包含hash和query
         * @property {string} relative 不包含域名的URL
         * @property {array} segments 按斜杠拆分的路径数组
         */
    };
})(jQuery, busyAdmin);
/**
 * 兼容
 */
;(function (global) {
    var noop = function () {
    };
    if (!window.console) {
        window.console = {
            log            : noop,
            error          : noop,
            warn           : noop,
            assert         : noop,
            clear          : noop,
            count          : noop,
            group          : noop,
            groupCollapsed : noop,
            groupEnd       : noop,
            info           : noop,
            table          : noop,
            time           : noop,
            timeEnd        : noop,
            trace          : noop,
        };
    }

    if (!Object.keys) {
        Object.keys = function (o) {
            if (o !== Object(o)) {
                throw new TypeError('Object.keys called on a non-object');
            }
            var k = [], p;
            for (p in o) {
                if (Object.prototype.hasOwnProperty.call(o, p)) {
                    k.push(p);
                }
            }
            return k;
        }
    }

    if (!Array.prototype.map) {
        Array.prototype.map = function (callback, args) {
            var arg, arr, index;

            if (this == null) {
                throw new TypeError('this is null or not defined');
            }

            var obj = new Object(this);
            var len = obj >>> 0;

            if (Object.prototype.toString.call(callback) != '[object Function]') {
                throw new TypeError(callback + 'is not a function');
            }

            if (args) {
                arg = args;
            }

            arr   = new Array(len);
            index = 0;

            while (index < len) {
                var kValue, mappedValue;
                if (index in obj) {
                    kValue      = obj[index];
                    mappedValue = callback.call(arg, kValue, index, obj);
                    arr[index]  = mappedValue;
                }
                index++;
            }
            return arr;
        }
    }

    if (!Array.prototype.del) {
        Array.prototype.del = function (n) {
            if (n < 0) {
                return this;
            } else {
                return this.slice(0, n).concat(this.slice(n + 1, this.length));
            }
        }
    }


    // Base64
    var base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

    function InvalidCharacterError(message) {
        this.message = message;
    }

    InvalidCharacterError.prototype      = new Error();
    InvalidCharacterError.prototype.name = 'InvalidCharacterError';

    if (!window.btoa) {
        // encoder
        // [https://gist.github.com/999166] by [https://github.com/nignag]
        window.btoa = function (input) {
            var str = String(input);
            for (// initialize result and counter
                var block, charCode, idx = 0, map = base64Chars, output = ''; // if the next str index does not exist:
                //   change the mapping table to "="
                //   check if d has no fractional digits
                str.charAt(idx | 0) || (map = '=', idx % 1); // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
                output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
                charCode = str.charCodeAt(idx += 3 / 4);
                if (charCode > 0xFF) {
                    throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
                }
                block = block << 8 | charCode;
            }
            return output;
        }
    }
    if (!window.atob) {
        window.atob = function (input) {
            var str = (String(input)).replace(/[=]+$/, ''); // #31: ExtendScript bad parse of /=
            if (str.length % 4 === 1) {
                throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
            }
            for (// initialize result and counters
                var bc = 0, bs, buffer, idx = 0, output = ''; // get next character
                buffer = str.charAt(idx++); // eslint-disable-line no-cond-assign
                // character found in table? initialize bit storage and add its ascii value;
                ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, // and if not first of each 4 characters,
                    // convert the first 8 bits to one ascii character
                bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
                // try to find character in table (0-63, not found => -1)
                buffer = base64Chars.indexOf(buffer);
            }
            return output;
        }
    }
})(this);
/**
 * jQuery辅助
 */
;(function ($, busyAdmin) {
    /**
     * 监听Transition动画结束
     * @param {boolean} one 是否监听一次
     * @param {Function} callback 回调
     * @return {jQuery}
     */
    $.fn.busyAdminOnTransEnd = function (one, callback) {
        this[one ? 'one' : 'on']('webkitTransitionEnd msTransitionend oTransitionEnd otransitionend mozTransitionend transitionend', callback);
        return this;
    };


    /**
     * 监听Animation动画结束
     * @param {boolean} one 是否监听一次
     * @param {Function} callback 回调
     * @return {jQuery}
     */
    $.fn.busyAdminOnAnimEnd = function (one, callback) {
        this[one ? 'one' : 'on']('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', callback);
        return this;
    };


    /**
     * 为表单设置值
     * @param {Object|String} data 表单数据
     * @param {Boolean} isUrl 数据是否URL
     */
    $.fn.busyAdminFormVal = function (data, isUrl) {
        var $this = $(this);

        if (isUrl) {
            if (!data) {
                data = document.URL;
            }
            data = busyAdmin.helper.parseURL(data).params;
        } else {
            data = data || {};
        }

        for (var dataKey in data) {
            var value = data[dataKey];
            var $item = $this.find('[name="' + dataKey + '"]');
            if ($item.length > 0) {
                switch (($item.attr('type') || '').toLowerCase()) {
                    case 'checkbox':
                    case 'radio':
                        $item.each(function () {
                            $(this).prop('checked', $(this).val() == value).trigger('change');
                        });
                        break;
                    default:
                        $item.val(value).trigger('change');
                }
            } else {
                $this.append('<input type="hidden" name="' + dataKey + '" value="' + value + '"/>');
            }
        }

        return this;
    };

    /**
     * 触发自定义事件
     * @param event
     * @return {jQuery}
     */
    $.fn.busyAdminEvent = function (event) {
        this.each(function () {
            this.dispatchEvent(new Event(event));
        });

        return this;
    };

    /**
     * 触发Input事件
     * @param {?boolean} change 是否同时触发change事件
     * @param {?boolean} input 是否同时触发input事件
     * @return {jQuery}
     */
    $.fn.busyAdminEventInput = function (change, input) {
        this.busyAdminEvent('input');

        if (input !== false) {
            this.trigger('input')
        }

        if (change) {
            this.trigger('change');
        }

        return this;
    };

})(jQuery, busyAdmin);

/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function ($) {
    var pluses = /\+/g;

    function encode(s) {
        return config.raw ? s : encodeURIComponent(s);
    }

    function decode(s) {
        return config.raw ? s : decodeURIComponent(s);
    }

    function stringifyCookieValue(value) {
        return encode(config.json ? JSON.stringify(value) : String(value));
    }

    function parseCookieValue(s) {
        if (s.indexOf('"') === 0) {
            // This is a quoted cookie as according to RFC2068, unescape...
            s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
        }

        try {
            // Replace server-side written pluses with spaces.
            // If we can't decode the cookie, ignore it, it's unusable.
            // If we can't parse the cookie, ignore it, it's unusable.
            s = decodeURIComponent(s.replace(pluses, ' '));
            return config.json ? JSON.parse(s) : s;
        } catch (e) {
        }
    }

    function read(s, converter) {
        var value = config.raw ? s : parseCookieValue(s);
        return $.isFunction(converter) ? converter(value) : value;
    }

    var config = $.cookie = function (key, value, options) {

        // Write

        if (value !== undefined && !$.isFunction(value)) {
            options = $.extend({}, config.defaults, options);

            if (typeof options.expires === 'number') {
                var days = options.expires, t = options.expires = new Date();
                t.setTime(+t + days * 864e+5);
            }

            return (document.cookie = [encode(key), '=', stringifyCookieValue(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
                                       options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join(''));
        }

        // Read

        var result = key ? undefined : {};

        // To prevent the for loop in the first place assign an empty array
        // in case there are no cookies at all. Also prevents odd result when
        // calling $.cookie().
        var cookies = document.cookie ? document.cookie.split('; ') : [];

        for (var i = 0, l = cookies.length; i < l; i++) {
            var parts  = cookies[i].split('=');
            var name   = decode(parts.shift());
            var cookie = parts.join('=');

            if (key && key === name) {
                // If second argument (value) is a function it's a converter...
                result = read(cookie, value);
                break;
            }

            // Prevent storing a cookie that we couldn't decode.
            if (!key && (cookie = read(cookie)) !== undefined) {
                result[name] = cookie;
            }
        }

        return result;
    };

    config.defaults = {};

    $.removeCookie = function (key, options) {
        if ($.cookie(key) === undefined) {
            return false;
        }

        // Must not alter options, thus extending a fresh object...
        $.cookie(key, '', $.extend({}, options, {expires : -1}));
        return !$.cookie(key);
    };
})(jQuery);
;(function ($, busyAdmin) {
    /**
     * 请求模块
     * @constructor
     * @param {string | object?} url 请求的URL 或 ajax配置
     * @param {object?} ajaxOptions ajax配置
     */
    var BusyAdminRequest = function (url, ajaxOptions) {
        this.config = {
            method         : BusyAdminRequest.options.method,
            cache          : BusyAdminRequest.options.cache,
            pendingStatus  : BusyAdminRequest.options.pendingStatus,
            pendingMessage : BusyAdminRequest.options.pendingMessage,
            before         : BusyAdminRequest.options.beforeCallback,
            complete       : BusyAdminRequest.options.completeCallback,
            success        : BusyAdminRequest.options.successCallback,
            error          : BusyAdminRequest.options.errorCallback,
            progress       : BusyAdminRequest.options.progressCallback,
            parse          : BusyAdminRequest.options.parse,
            parseExec      : '',
            ajaxOptions    : {},
            url            : document.URL,
            params         : [],
            headers        : {},
        };

        if (typeof url === 'object') {
            this.config.ajaxOptions = url || {};
        } else if (typeof url === 'string' && url.length) {
            this.url(url);
            this.config.ajaxOptions = ajaxOptions || {};
        }

        this.paramElements = [];
        this.ajax          = null;
    }

    /**
     * 全局配置
     * @name BusyAdminRequest~options
     * @property {string} root 请求URL入口地址，默认：空
     * @property {string} method 请求方式，支持GET|POST等请求方式，默认：GET
     * @property {boolean} cache 有缓存的时候是否请求缓存，默认：否
     * @property {object} params 全局请求参数，键值对
     * @property {object} headers 全局请求头，键值对
     * @property {boolean} pendingStatus 是否展示请求等待对话框，默认：是
     * @property {string} pendingMessage 请求等待框提示文字，默认：请稍候...
     * @property {object} ajaxOptions ajax配置
     * @property {BusyAdminRequest~beforeCallback} beforeCallback 请求前回调
     * @property {BusyAdminRequest~completeCallback} completeCallback 请求完成回调
     * @property {BusyAdminRequest~successCallback} successCallback 请求成功回调
     * @property {BusyAdminRequest~errorCallback} errorCallback 请求失败回调
     * @property {BusyAdminRequest~progressCallback} progressCallback 请求失败回调
     */
    BusyAdminRequest.options = {
        root             : '',
        contentType      : 'application/x-www-form-urlencoded',
        method           : 'get',
        cache            : false,
        params           : {},
        headers          : {},
        parse            : '',
        pendingStatus    : true,
        pendingMessage   : '请稍候...',
        ajaxOptions      : {},
        beforeCallback   : $.noop,
        completeCallback : $.noop,
        successCallback  : function (json) {
            busyAdmin.dialog.tipSuccess(json.message || 'success');
        },
        errorCallback    : function (json) {
            busyAdmin.dialog.tipError(json.message || 'error');
        },
        progressCallback : $.noop,
    };


    BusyAdminRequest.prototype = {
        /**
         * 设置是否显示pending模态框
         * @param {boolean | string} status 是否展示加载窗口或消息
         * @param {string?} message 加载的消息文本
         * @return {BusyAdminRequest}
         */
        pending : function (status, message) {
            if (typeof status === 'string' && status.length) {
                message = status;
                status  = true;
            }

            this.config.pendingStatus = status;
            if (message) {
                this.config.pendingMessage = message;
            }

            return this;
        },

        /**
         * 设置GET请求是否启用缓存，默认不启用
         * @param {boolean} status
         * @return {BusyAdminRequest}
         */
        cache : function (status) {
            this.config.cache = status;

            return this;
        },

        /**
         * 设置请求链接
         * @param {String} url
         * @return {BusyAdminRequest}
         */
        url : function (url) {
            this.config.url = url || document.URL;

            return this;
        },

        /**
         * 设置是否POST请求
         * @param {boolean} status 是否POST请求，否则GET请求
         * @return {BusyAdminRequest}
         */
        post : function (status) {
            return this.method(status ? 'post' : 'get');
        },

        /**
         * 设置请求方式
         * @param {string} method 支持GET|POST等方式
         * @return {BusyAdminRequest}
         */
        method : function (method) {
            this.config.method = method;

            return this;
        },

        /**
         * 设置请求头
         * @param {object} headers
         * @return {BusyAdminRequest}
         */
        headers : function (headers) {
            this.config.headers = headers;

            return this;
        },

        /**
         * 添加请求头
         * @param {string} name 请求头名称
         * @param {any} value 请求头值
         * @return {BusyAdminRequest}
         */
        addHeader : function (name, value) {
            this.config.headers[name] = value;

            return this;
        },

        /**
         * 设置请求参数
         * @param {object|array|string} params
         * @return {BusyAdminRequest}
         */
        params : function (params) {
            var me           = this;
            me.config.params = [];

            // jQuery对象
            if (params instanceof jQuery) {
                me.config.params = params.serializeArray();
            }

            // 数组
            else if ($.isArray(params)) {
                me.config.params = params;
            }

            // Object转数组
            else if (typeof params === 'object') {
                for (var key in params) {
                    var value = params[key];
                    if ($.isArray(value)) {
                        value.map(function (val) {
                            me.config.params.push({
                                name  : -1 !== key.indexOf('[') ? key : key + '[]',
                                value : val
                            });
                        });
                    } else {
                        me.config.params.push({
                            name  : key,
                            value : value
                        });
                    }
                }
            }

            // 字符串
            else if (typeof params === 'string') {
                var tempParams = busyAdmin.helper.parseURL('?' + params).params || {};
                for (var key in tempParams) {
                    var value = tempParams[key];
                    if ($.isArray(value)) {
                        value.map(function (val) {
                            me.config.params.push({
                                name  : -1 !== key.indexOf('[') ? key : key + '[]',
                                value : val
                            });
                        });
                    } else {
                        me.config.params.push({
                            name  : key,
                            value : value
                        });
                    }
                }
            }

            // 其它类型
            else {
                console.error('参数类型错误，仅支持: object, string, array', params);
            }

            return this;
        },

        /**
         * 添加请求参数
         * @param {string} name 参数名
         * @param {any|Blob} value 参数值
         * @param {string?} filename 文件名
         * @return {BusyAdminRequest}
         */
        addParam : function (name, value, filename) {
            if (value instanceof jQuery) {
                this.paramElements.push({
                    name     : name,
                    value    : value,
                    filename : filename
                });
            } else {
                this.config.params.push({
                    name     : name,
                    value    : value,
                    filename : filename
                });
            }

            return this;
        },


        /**
         * 清理请求参数
         * @return {BusyAdminRequest}
         */
        clear : function () {
            this.config.headers = {};
            this.config.params  = [];
            this.paramElements  = [];

            return this;
        },

        /**
         * 解析的数据格式
         * @param {string} parse 支持jQuery的各种解析格式，不指定或为空，默认使用 {@see BusyAdminResponse} 解析
         * @param {string?} exec 解析执行方法，如解析类型是jsonp，着传入jsonp的callback方法明
         * @return {BusyAdminRequest}
         */
        parse : function (parse, exec) {
            this.config.parse     = parse;
            this.config.parseExec = exec;

            return this;
        },

        /**
         * 设置请求前回调
         * @param {BusyAdminRequest~beforeCallback} callback
         * @return {BusyAdminRequest}
         */
        before : function (callback) {
            this.config.before = typeof callback === 'function' ? callback : this.config.before;

            return this;
        },

        /**
         * 设置请求完成回调
         * @param {BusyAdminRequest~completeCallback} callback
         * @return {BusyAdminRequest}
         */
        complete : function (callback) {
            this.config.complete = typeof callback === 'function' ? callback : this.config.complete;

            return this;
        },

        /**
         * 设置请求成功回调
         * @param {BusyAdminRequest~successCallback} callback
         * @return {BusyAdminRequest}
         */
        success : function (callback) {
            this.config.success = typeof callback === 'function' ? callback : this.config.success;

            return this;
        },

        /**
         * 设置请求失败回调
         * @param {BusyAdminRequest~errorCallback} callback
         * @return {BusyAdminRequest}
         */
        error : function (callback) {
            this.config.error = typeof callback === 'function' ? callback : this.config.error;

            return this;
        },

        /**
         * 上传进度回调
         * @param {BusyAdminRequest~progressCallback} callback
         * @return {BusyAdminRequest}
         */
        progress : function (callback) {
            this.config.progress = typeof callback === 'function' ? callback : this.config.progress;

            return this;
        },

        /**
         * 执行请求
         * @return {jQuery.ajax}
         */
        exec : function () {
            var me      = this;
            var pending = null;

            // 创建临时表单
            var $tempForm = $('<form />');
            this.paramElements.map(function (item) {
                var element = item.value;
                var name    = item.name || false;
                name        = name ? name : element.attr('name');

                if (element.length === 0) {
                    return true;
                }

                // 文件
                if (element[0].tagName === 'INPUT' && element.attr('type').toUpperCase() === 'FILE') {
                    var files = element[0].files;
                    if (files.length > 0) {
                        if (element.attr('multiple')) {
                            for (var i = 0; i < files.length; i++) {
                                me.config.params.push({
                                    name  : name,
                                    value : files[i]
                                });
                            }
                        } else {
                            me.config.params.push({
                                name     : name,
                                value    : files[0],
                                filename : item.filename
                            })
                        }
                    }
                }

                // 其它表单
                else {
                    element.attr('name', name);
                    $tempForm.append(element.clone());
                }
            });

            $tempForm.serializeArray().map(function (item) {
                me.config.params.push(item);
            });


            // 全局参数
            var globalParams = BusyAdminRequest.options.params;
            for (var key in globalParams) {
                me.config.params.push({
                    name  : key,
                    value : globalParams[key]
                });
            }

            // 是否包含文件
            var hasFile = false;
            me.config.params.map(function (item) {
                if (item.value instanceof File) {
                    hasFile = true;
                }
            });

            if (!me.config.cache) {
                me.config.headers['Cache-Control']     = 'no-cache';
                me.config.headers['If-Modified-Since'] = '0';
            }

            // ajax参数
            var options = $.extend({}, $.extend({}, {
                contentType   : BusyAdminRequest.options.contentType,
                url           : BusyAdminRequest.options.root + me.config.url,
                headers       : $.extend({}, me.config.headers, BusyAdminRequest.options.headers),
                type          : me.config.method,
                dataType      : me.config.parse ? me.config.parse : 'text',
                jsonpCallback : me.config.parseExec
            }, BusyAdminRequest.options.ajaxOptions), me.config.ajaxOptions || {});

            // 包含文件
            if (hasFile) {
                options.cache       = false;
                options.type        = 'post';
                options.contentType = false;
                options.processData = false;

                var params = new FormData();
                me.config.params.map(function (item) {
                    if (item.filename) {
                        params.append(item.name, item.value, item.filename);
                    } else {
                        params.append(item.name, item.value);
                    }
                });
                options.data = params;
            } else {
                options.data = me.config.params;
            }

            var complete = function () {
                pending !== null && pending.close();
            };

            var success = function (json, type, xhr) {
                if (false === me.config.success.call(me, json, type, xhr)) {
                    return false;
                }

                return BusyAdminRequest.options.successCallback.call(me, json, type, xhr);
            }

            var error = function (json, type, xhr) {
                if (false === me.config.error.call(me, json, type, xhr)) {
                    return false;
                }

                return BusyAdminRequest.options.errorCallback.call(me, json, type, xhr);
            }

            // 请求前
            options.beforeSend = function (xhr, settings) {
                // 请求回调
                if (false === me.config.before.call(me, xhr, settings)) {
                    return false;
                }

                // 请求等待模态框
                if (me.config.pendingStatus) {
                    pending = busyAdmin.dialog.pending(me.config.pendingMessage);
                }
            };

            // 请求完成
            options.success = function (result, status, xhr) {
                complete();

                if (!me.config.parse) {
                    this.xhr = xhr;
                    busyAdmin.response.parse(result, this, function (json, type) {
                        success(json, type, xhr);
                    }, function (json, type) {
                        error(json, type, xhr);
                    }, function (json, type) {
                        return me.config.complete.call(me, json, type, xhr);
                    });
                } else {
                    var res    = busyAdmin.response.result;
                    res.status = true;
                    res.result = result;
                    if (false !== me.config.complete.call(me, res, busyAdmin.response.type.success, xhr)) {
                        success(res, busyAdmin.response.type.success, xhr);
                    }
                }
            };

            // 请求失败
            options.error = function (xhr, status, errorMsg) {
                complete();

                var errorType = status === 'parsererror' ? busyAdmin.response.type.parse : busyAdmin.response.type.http;
                var res       = busyAdmin.response.result;
                res.status    = false;
                res.message   = xhr.status + ' ' + errorMsg;
                if (false !== me.config.complete.call(me, res, errorType, xhr)) {
                    error(res, errorType, xhr);
                }
            };

            options.xhr = function () {
                var xhr = $.ajaxSettings.xhr();
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', function (e) {
                        if (false === me.config.progress.call(me, e)) {
                            return;
                        }

                        BusyAdminRequest.options.progressCallback.call(me, e);
                    }, false);
                }
                return xhr;
            };


            // 执行请求
            me.ajax = $.ajax(options);

            return me.ajax;
        },

        /**
         * 请求前回调
         * @callback BusyAdminRequest~beforeCallback
         * @param {object} xhr jQueryXHR 对象
         * @param {object} settings jQuery.ajax 设置
         * @return {boolean} 返回false阻止继续请求
         */

        /**
         * 请求完成回调
         * @callback BusyAdminRequest~completeCallback
         * @param {BusyAdminResponse~result} json 请求返回的JSON数据
         * @param {number} type 状态类型，参考{@see BusyAdminResponse~type}
         * @param {object} xhr jQueryXHR 对象
         * @return {boolean} 返回false阻止继续执行 {@link BusyAdminRequest~success} 和 {@link BusyAdminRequest~error}
         */

        /**
         * 请求成功回调
         * @callback BusyAdminRequest~successCallback
         * @param {BusyAdminResponse~result} json 请求返回的JSON数据
         * @param {number} type 状态类型，参考{@see BusyAdminResponse~type}
         * @param {object} xhr jQueryXHR 对象
         */

        /**
         * 请求失败回调
         * @callback BusyAdminRequest~errorCallback
         * @param {BusyAdminResponse~result} json 请求返回的JSON数据
         * @param {number} type 状态类型，参考{@see BusyAdminResponse~type}
         * @param {object} xhr jQueryXHR 对象
         */

        /**
         * 请求失败回调
         * @callback BusyAdminRequest~progressCallback
         * @param {ProgressEvent} event 进度对象
         */
    };

    /**
     * 请求
     * @param {string | object?} url 请求的URL 或 ajax配置
     * @param {object?} ajaxOptions ajax配置
     * @return {BusyAdminRequest}
     */
    busyAdmin.request = function (url, ajaxOptions) {
        return new BusyAdminRequest(url, ajaxOptions)
    };

    /**
     * 设置全局参数
     * @param {object | string} options 配置合集或配置名称，集合参考 {@see BusyAdminRequest~options}
     * @param {array?} value 配置值
     */
    busyAdmin.request.setOptions = function (options, value) {
        if (typeof options === 'string') {
            BusyAdminRequest.options[options] = value;
        } else {
            BusyAdminRequest.options = $.extend(BusyAdminRequest.options, options);
        }
    };
})(jQuery, window.busyAdmin || {});

;(function ($, busyAdmin) {
    /**
     * 响应数据解析器
     * @constructor
     */
    var BusyAdminResponse = function BusyAdminResponse() {
        this.parseCallback = null;
        this.bindCodeList  = {};
    }

    /**
     * 响应返回结构
     * @property {boolean} status 业务状态，成功还是失败
     * @property {string} message 消息提示
     * @property {string} url 消息提示，操作的URL地址
     * @property {number} code 错误代码
     * @property {object} result 业务数据
     */
    BusyAdminResponse.result = {
        status  : false,
        message : '',
        url     : '',
        code    : 0,
        result  : {}
    };

    /**
     * 错误类型
     * @property {number} success 成功
     * @property {number} http HTTP请求错误
     * @property {number} parse 数据解析错误
     * @property {number} logic 业务逻辑错误
     */
    BusyAdminResponse.type = {
        success : 0,
        http    : 1,
        parse   : 2,
        logic   : 3
    };

    BusyAdminResponse.prototype = {
        /**
         * 执行解析数据
         * @param {string|object} result 响应内容
         * @param {object} ajaxSettings jQuery ajax settings
         * @param {BusyAdminResponse~success} success 成功回调
         * @param {BusyAdminResponse~error} error 失败回调
         * @param {BusyAdminResponse~complete} complete 完成回调，比成功失败优先执行，返回false阻止触发成功失败回调
         */
        parse : function (result, ajaxSettings, success, error, complete) {
            success  = typeof success === 'function' ? success : $.noop;
            error    = typeof error === 'function' ? error : $.noop;
            complete = typeof complete === 'function' ? complete : $.noop;


            // 自定义解析
            var json;
            var res    = BusyAdminResponse.result;
            res.status = false;

            if (typeof result === 'string' || !result) {
                if (typeof this.parseCallback === 'function') {
                    json = this.parseCallback.call(ajaxSettings, result) || {};
                } else {
                    // 校验JSON数据
                    result = $.trim(result);
                    if ('{' !== result.charAt(0) || '}' !== result.charAt(result.length - 1)) {
                        res.message = '返回数据解析异常';
                        if (false !== complete(res, BusyAdminResponse.type.parse)) {
                            error(res, BusyAdminResponse.type.parse);
                        }

                        return;
                    }

                    // 解析JSON数据
                    try {
                        json = JSON.parse(result);
                    } catch (e) {
                        res.message = '解析数据异常: ' + e;
                        if (false !== complete(res, BusyAdminResponse.type.parse)) {
                            error(res, BusyAdminResponse.type.parse);
                        }

                        return;
                    }
                }
            } else {
                json = result;
            }

            var errorKeys = [];
            ['status', 'code', 'message', 'url', 'result'].map(function (key) {
                if (!json.hasOwnProperty(key)) {
                    errorKeys.push(key);
                }
            });
            if (errorKeys.length > 0) {
                res.message = '返回的参数中必须包含键: ' + errorKeys.join(',');
                if (false !== complete(res, BusyAdminResponse.type.parse)) {
                    error(res, BusyAdminResponse.type.parse);
                }

                return;
            }

            // 消息代码回调
            var callbackList   = this.bindCodeList[json.code] || [];
            var callbackLength = callbackList.length;

            // 倒序遍历回调
            for (var i = callbackLength - 1; i >= 0; i--) {
                var callback = callbackList[i].callback || null;

                // 回调不为方法跳过
                if (typeof callback === 'function' && false === callback(json)) {
                    return;
                }
            }

            // 解析完成
            if (false === complete(json, json.status ? BusyAdminResponse.type.success : BusyAdminResponse.type.logic)) {
                return;
            }

            // 成功
            if (json.status) {
                success(json, BusyAdminResponse.type.success);
            } else {
                error(json, BusyAdminResponse.type.logic);
            }
        },

        /**
         * 设置JSON数据解析回调
         * @param {BusyAdminResponse~parseCallback} callback 回调方法，回调参数：响应的数据，解析后要返回
         * @return {BusyAdminResponse}
         */
        setParse : function (callback) {
            this.parseCallback = callback;

            return this;
        },

        /**
         * 绑定消息代码回调
         * @param {number} resultCode 消息代码
         * @param {BusyAdminResponse~bind} callback 回调方法，返回false阻止往下传递
         * @return {BusyAdminResponse}
         */
        bindCode : function (resultCode, callback) {
            this.bindCodeList[resultCode] = this.bindCodeList[resultCode] || [];
            this.bindCodeList[resultCode].push({
                callback : callback
            });

            return this;
        },

        /**
         * @callback BusyAdminResponse~parseCallback
         * @param {string} result 解析的数据
         * @return {BusyAdminResponse~result} 解析成功的JSON对象
         */

        /**
         * @callback BusyAdminResponse~bind
         * @param {BusyAdminResponse~result} json 解析成功的数据对象
         * @return {boolean} 返回false阻止往下传递
         */

        /**
         * @callback BusyAdminResponse~success
         * @param {BusyAdminResponse~result} json 解析成功的数据对象
         * @param {number} type 状态类型，参考{@see BusyAdminResponse~type}
         */

        /**
         * @callback BusyAdminResponse~error
         * @param {BusyAdminResponse~result} json 解析成功的数据对象
         * @param {number} type 状态类型，参考{@see BusyAdminResponse~type}
         */

        /**
         * @callback BusyAdminResponse~complete
         * @param {BusyAdminResponse~result} json 解析成功的数据对象
         * @param {number} type 状态类型，参考{@see BusyAdminResponse~type}
         * @return {boolean} 针对 complete 返回有效，返回false不继续执行 success 和 error
         */
    };


    /**
     * 响应
     * @return {BusyAdminResponse}
     */
    busyAdmin.response = new BusyAdminResponse();

    /**
     * 响应返回结构
     * @name {BusyAdminResponse~result}
     */
    busyAdmin.response.result = BusyAdminResponse.result;

    /**
     * 错误类型
     * @name {BusyAdminResponse~type}
     */
    busyAdmin.response.type = BusyAdminResponse.type;
})(jQuery, window.busyAdmin || {});
/**
 * 管理员详情
 */
;(function ($, busyAdmin) {
    $(document).on('click.busy-admin-detail', '[data-toggle="busy-admin-detail"],[busy-admin-detail]', function (e) {
        e.preventDefault();

        var $this  = $(this);
        var data   = $this.data();
        var config = busyAdmin.getConfig('adminDetail');
        $this.busyAdminModal({
            url          : config.url,
            params       : {
                id    : data.userId || '',
                title : data.title || ''
            },
            borderTop    : false,
            borderBottom : false,
            padding      : 0,
            ok           : false,
            cancel       : '关闭'
        });
        $this.busyAdminModal('show');
    });
})(jQuery, busyAdmin);
/**
 * 音频
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/audioViewer', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    var AudioViewer = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me.options  = $.extend(true, {}, AudioViewer.DEFAULTS, me.$element.data() || {}, options || {});
        me.init();
    }

    AudioViewer.prototype = {
        /**
         * 初始化
         */
        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }

            me.isInit = true;
            if (me.options.clickHandler) {
                me.$element.off('click').on('click', function () {
                    me.show();
                });
            }
        },

        /**
         * 显示预览
         */
        show : function () {
            var layerIndex = layer.open({
                title     : false,
                type      : 1,
                skin      : 'busy-audio-viewer-dialog',
                scrollbar : false,
                content   : '<div class="busy-audio-viewer-dialog-content"><audio src="' + this.options.src + '"></audio></div>',
                success   : function ($dialog, index) {
                    var layerApi = this;
                    var $content = $dialog.find('.busy-audio-viewer-dialog-content');
                    layer.area(index, $content.width(), $content.height());
                    this.offset();

                    $dialog.find('audio').busyAdminAudio();
                }
            });

            $(document).on(busyAdmin.e.appRenderBefore, function () {
                layer.close(layerIndex);
            });
        },

        /**
         * 销毁
         */
        destroy : function () {
            var me = this;
            if (!me.isInit) {
                return;
            }

            me.isInit = false;

            if (me.options.clickHandler) {
                me.$element.off('click');
            }
        }
    }

    AudioViewer.DEFAULTS = {
        src          : '',
        clickHandler : true,
    };

    function AudioPlugin(option) {
        var ret;
        var key  = 'busy.admin.audio-viewer.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new AudioViewer(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminAudioViewer             = AudioPlugin;
    $.fn.busyAdminAudioViewer.Constructor = AudioViewer;
    busyAdmin.plugins.AudioViewer         = AudioViewer;

    busyAdmin.autoInit('[data-toggle="busy-audio-viewer"],[busy-audio-viewer]', function () {
        AudioPlugin.call(this);
    });

    return AudioViewer;
}));
/**
 * 音频
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/audio', [core.sys.core, core.sys.jquery], factory)
}(function (busyAdmin, $) {
    var pluginIsReady = false;

    var Audio = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me.options  = $.extend(true, {}, Audio.DEFAULTS, options || {});
        me.$wrap    = null;
        me.ready(me.init);
    };

    Audio.prototype = {
        /**
         * 准备完成
         * @param callback
         */
        ready : function (callback) {
            var me = this;
            if (pluginIsReady && audiojs) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.audio], function () {
                    audiojs.events.ready(function () {
                        pluginIsReady = true;
                        typeof callback === 'function' && callback.call(me);
                    });
                });
            }
        },

        /**
         * 初始化
         */
        init : function () {
            var me   = this;
            var api  = audiojs.create(me.element, {
                css : false
            });
            me.$wrap = $(api.wrapper).addClass('busy-admin-audio');

            var $playPause = me.$wrap.find('.play-pause');
            $playPause.find('.play').addClass('fa fa-play');
            $playPause.find('.pause').addClass('fa fa-pause');
            $playPause.find('.loading').addClass('fa fa-spinner fa-spin');
            $playPause.find('.error').addClass('fa fa-info-circle text-danger');
            me.$wrap.find('.error-message').addClass('text-danger');

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'Audio', me);
        }
    }

    Audio.DEFAULTS = {};

    function Plugin(option) {
        var ret;
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var key   = 'busy.admin.audio.api';
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Audio(this, typeof option === 'object' && option)));
            }

            if (typeof option === "string") {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminAudio             = Plugin;
    $.fn.busyAdminAudio.Constructor = Audio;
    busyAdmin.plugins.Audio         = Audio;

    /*
     TODO 会死循环
     busyAdmin.autoInit('[data-toggle="busy-audio"]', function () {
     this.each(function () {
     var $this = $(this);

     if ($this.attr('data-init') === 1) {
     return;
     }

     $this.attr('data-init', 1);
     Plugin.call($this, $this.data());
     });
     });*/

    return Audio;
}));
/**
 * 自动完成
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/autocomplete', [core.sys.core, core.sys.jquery], factory)
}(function (busyAdmin, $) {

    var Autocomplete = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me.options  = $.extend(true, {}, Autocomplete.DEFAULTS, me.$element.data(), options || {});
        me.ready(me.init);
    };

    Autocomplete.prototype = {
        /**
         * 组件已准备完成
         * @param {Function} callback
         */
        ready : function (callback) {
            var me = this;
            if (window.autoComplete) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.autocomplete], function () {
                    typeof callback === 'function' && callback.call(me);
                });
            }
        },

        /**
         * 初始化
         */
        init : function () {
            var me   = this;
            var opts = me.options;
            if (me.isInit) {
                return;
            }

            me.isInit = true;

            // 卸载
            $(document).one(busyAdmin.e.appRenderBefore, function () {
                me.destroy();
            });

            me.api = new window.autoComplete({
                selector  : me.element,
                delay     : opts.delay,
                minChars  : opts.searchMin,
                menuClass : 'busy-admin-autocomplete',
                source    : function (term, callback) {
                    var isAjax = opts.url || opts.model;
                    if (isAjax) {
                        busyAdmin
                            .request(opts.model ? busyAdmin.getConfig('autocomplete').url : (typeof opts.url === 'function' ? opts.url() : opts.url))
                            .method(opts.method)
                            .addHeader('Busy-Admin-Plugin', 'Autocomplete')
                            .params({
                                model      : opts.model,
                                extend     : opts.modelExtend ? 1 : 0,
                                text_field : opts.modelTextField || '',
                                order      : opts.modelOrder || '',
                                limit      : opts.modelLimit,
                                word       : term,
                            })
                            .pending(false)
                            .success(function (response, type, xhr) {
                                var list = [];
                                $.each(response.result.results || [], function () {
                                    var item = (this.text || '').trim();
                                    if (item) {
                                        list.push(item);
                                    }
                                });
                                callback(list);
                                return false;
                            })
                            .error(function (response, type, xhr) {
                                return false;
                            })
                            .exec();
                    } else {
                        var list    = opts.list || [];
                        var matches = [];
                        for (i = 0; i < list.length; i++) {
                            if (-1 !== list[i].toLowerCase().indexOf(term)) {
                                matches.push(list[i]);
                            }
                        }

                        callback(matches);
                    }
                }
            });

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'Autocomplete', me);
        },

        /**
         * 销毁
         */
        destroy : function () {
            var me = this;
            me.api.destroy();
        }
    }


    Autocomplete.DEFAULTS = {
        list      : [],
        searchMin : 1,
        method    : 'get',
        url       : false, // 是否启用异步数据 或 异步数据地址
        delay     : 250, // 异步搜索延迟毫秒

        // 异步模型数据
        model          : '', // 自动查询模型数据
        modelExtend    : false, // 自动模型数据是否包涵扩展数据
        modelTextField : '', // 模型text键
        modelOrder     : '', // 模型数据排序方式，多个用英文逗号隔开
        modelLimit     : 20, // 模型数据每页展示条数，0为全部
    };

    /**
     * @param option
     * @return {jQuery|Autocomplete|*}
     * @constructor
     */
    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.autocomplete.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Autocomplete(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminAutocomplete             = Plugin;
    $.fn.busyAdminAutocomplete.Constructor = Autocomplete;
    busyAdmin.plugins.Autocomplete         = Autocomplete;
    $.extend(busyAdmin.e, {});

    busyAdmin.autoInit('[data-toggle="busy-autocomplete"],[busy-autocomplete]', function () {
        Plugin.call(this);
    });

    return Autocomplete;
}));
// https://fullcalendar.io/docs#toc
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/calendar', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    var FullCalendarReady = false;

    var Calendar = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me.options  = $.extend(true, {}, Calendar.DEFAULTS, me.$element.data() || {}, options || {});
        me.ready(me.init);
    };


    Calendar.prototype = {
        /**
         * 组件已准备完成
         * @param {Function} callback
         */
        ready : function (callback) {
            var me = this;
            if (FullCalendarReady) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.fullcalendar], function () {
                    FullCalendarReady = true;
                    typeof callback === 'function' && callback.call(me);
                });
            }
        },


        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }

            me.isInit = true;

            me.$element.addClass('ba-calendar');

            var options         = me.options
            options.themeSystem = 'bootstrap';
            options.locale      = 'zh-cn';

            // 工具栏
            if (typeof options.headerToolbar === 'string' || !options.headerToolbar) {
                if (!options.headerToolbar || !Calendar.TOOLBARS.hasOwnProperty(options.headerToolbar)) {
                    options.headerToolbar = 'default';
                }
                options.headerToolbar = Calendar.TOOLBARS[options.headerToolbar];
            }

            me.api = new FullCalendar.Calendar(me.element, options);
            me.api.render();

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'Calendar', me);
        },


        getApi : function () {
            return this.api;
        },

        /**
         * 销毁
         */
        destroy : function () {
            let me    = this;
            me.isInit = false;
            me.$element.removeAttr('data-toggle').removeAttr('busy-calendar');
            if (!me.api) {
                return;
            }

            me.api.destroy();
        },
    };

    Calendar.DEFAULTS = {
        headerToolbar : 'default',
        selectable    : true,
        initialView   : 'dayGridMonth',
        locale        : 'zh-cn',
    };

    Calendar.TOOLBARS = {
        'default' : {
            left   : 'prev,next today',
            center : 'title',
            right  : 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
        },
        'mini'    : {
            left   : 'prev,next',
            center : 'title',
            right  : 'today',
        },
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.calendar.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Calendar(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);

                if (option == 'destroy') {
                    $this.removeData(key);
                }
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminCalendar             = Plugin;
    $.fn.busyAdminCalendar.Constructor = Calendar;
    busyAdmin.plugins.Calendar         = Calendar;
    var eventName                      = 'calendar';
    $.extend(busyAdmin.e, {});

    busyAdmin.autoInit('[data-toggle="busy-calendar"],[busy-calendar]', function () {
        Plugin.call(this);
    });

    return Calendar;
}));
/**
 * 目录
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/catalog', [core.sys.core, core.sys.jquery, core.lib.bootstrap], factory);
}(function (busyAdmin, $, bootstrapTarget) {
    'use strict';

    var pluginIsReady = false;

    var Catalog = function (element, options) {
        this.$element       = $(element);
        this.options        = $.extend(true, {}, Catalog.DEFAULTS, this.$element.data() || {}, options || {});
        this.id             = busyAdmin.helper.uuid();
        this.scrollSelector = null;
        this.ready(this.render);
    };

    Catalog.prototype = {
        /**
         * 组件已准备完成
         * @param {Function} callback
         */
        ready : function (callback) {
            var me = this;
            if (pluginIsReady) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.sticky], function (stickyTarget) {
                    pluginIsReady = true;
                    typeof callback === 'function' && callback.call(me);
                });
            }
        },


        /**
         * 渲染目录
         */
        render : function () {
            var me         = this;
            var $container = me.$element;
            if (me.options.container) {
                $container = $(me.options.container);
            }

            $container.find(me.getId()).remove();
            $container.append(me.create());

            // 滚动定位
            if (me.options.scroll) {
                me.scrollSelector = me.options.scroll;
                if (me.options.scroll === true) {
                    me.scrollSelector = document.body;
                }

                $(me.scrollSelector).scrollspy({
                    target : this.getId(),
                    offset : this.options.top
                });
            }

            // 钉住
            if (me.options.sticky && $(me.scrollSelector).is('body')) {
                $(me.getId()).sticky({
                    topSpacing    : this.options.top || 0,
                    bottomSpacing : this.options.bottom || 0
                });
            }

            // 点击滚动到对应的位置
            $container.find('.nav a').on('click', function (e) {
                e.preventDefault();

                var $this  = $(this);
                var target = $this.attr('href');

                if (0 !== target.indexOf('#')) {
                    return true;
                }

                var $target = $(target);
                var $body   = $(me.scrollSelector);
                var top     = $target.position().top;
                if ($body.is('body')) {
                    $body = $('body,html');
                    top   = $target.offset().top;
                }

                me.isScrollPending = true;
                $body.animate({scrollTop : top - (me.options.top || 0)}, function () {
                    me.isScrollPending = false;
                });

                return false;
            });

            // 注册销毁
            $(document).one(busyAdmin.e.appRenderBefore, $.proxy(me.destroy, me));

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'Catalog', me);
        },


        /**
         * 生成目录
         */
        create : function () {
            var me           = this;
            var $catalogList = me.$element.find('h1,h2,h3,h4,h5,h6');
            var list         = [];

            $catalogList.each(function (index) {
                var $self = $(this);
                if (me.options.filterSelector && $self.closest(me.options.filterSelector).length > 0) {
                    return true;
                }

                var level = this.tagName.charAt(1);
                var id    = ($self.attr('id') || '').trim();
                var text  = $self.text().trim();
                if (!text) {
                    return true;
                }

                id = busyAdmin.helper.base64Encode(text + ':' + level + '_' + index);
                id = id.replace(/[=\/+]/g, '');
                $self.attr('id', id);

                list.push({
                    name  : text,
                    id    : id,
                    level : level
                });
            });

            var treeList   = this.toTree(list);
            var treeToHtml = function (list) {
                var html = '<ul class="nav">';
                $.each(list, function () {
                    html += '<li><a href="#' + this.id + '">' + this.name + '</a>' + (this.children ? treeToHtml(this.children) : '') + '</li>';
                });
                html += '</ul>';
                return html;
            };

            var catalogHtml = treeToHtml(treeList);
            var title       = '';
            if (this.options.title) {
                title = '<div class="panel-heading busy-admin-catalog-title">' + this.options.title + '</div>';
            }

            return '<div class="panel panel-default busy-admin-catalog" id="' + this.id + '">' + title + catalogHtml + '</div>';
        },

        /**
         * 将列表转换为树状结构
         * @param flatArr
         * @return {[]}
         */
        toTree : function (flatArr) {
            var tree = [];

            // 根据指定级别查找该级别的子孙级，并删除掉已经查找到的子孙级
            var getChildrenByLevel = function (currentLevelItem, arr, level) {
                if (!currentLevelItem) {
                    return;
                }
                // 将level值转成负数，再进行比较
                var minusCurrentLevel = -currentLevelItem.level;
                var children          = [];
                for (var i = 0, len = arr.length; i < len; i++) {
                    var levelItem = arr[i];
                    if (-levelItem.level < minusCurrentLevel) {
                        children.push(levelItem);
                    } else { // 只找最近那些子孙级
                        break;
                    }
                }
                // 从数组中删除已经找到的那些子孙级，以免影响到其他子孙级的查找
                if (children.length > 0) {
                    arr.splice(0, children.length);
                }
                return children;
            }

            var getTree = function (result, arr) {
                // 首先将数组第一位移除掉，并添加到结果集中
                var currentItem = arr.shift();
                result.push(currentItem);

                while (arr.length > 0) {
                    if (!currentItem) {
                        return;
                    }

                    // 根据当前级别获取它的子孙级
                    var children = getChildrenByLevel(currentItem, arr, currentItem.level);
                    // 如果当前级别没有子孙级则开始下一个
                    if (children.length == 0) {
                        currentItem = arr.shift();
                        if (currentItem) {
                            result.push(currentItem);
                        }
                        continue;
                    }
                    currentItem.children = [];
                    // 查找到的子孙级继续查找子孙级
                    getTree(currentItem.children, children);
                }
            }

            getTree(tree, flatArr);

            return tree;
        },

        /**
         * 获取ID
         * @return {string}
         */
        getId : function () {
            return '#' + this.id;
        },

        /**
         * 销毁
         */
        destroy : function () {
            if (this.options.scroll) {
                $(this.scrollSelector).removeData('bs.scrollspy');
            }

            if (this.options.sticky) {
                $(this.getId()).unstick();
            }
        }
    };

    Catalog.DEFAULTS = {
        title          : '目录',
        container      : null,   // 指定存放目录的容器
        scroll         : null,   // 指定滚动定位相对容器，true为 body
        sticky         : false,  // 是否将目录钉住
        top            : 0,      // 滚动顶部位置偏移
        bottom         : 0,      // 滚动底部位置偏移
        filterSelector : null, // 过滤父节点
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.catalog.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Catalog(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminCatalog             = Plugin;
    $.fn.busyAdminCatalog.Constructor = Catalog;
    busyAdmin.plugins.Catalog         = Catalog;

    busyAdmin.autoInit('[data-toggle="busy-catalog"],[busy-catalog]', function () {
        Plugin.call(this);
    });

    return Catalog;
}));
/**
 * 切换验证码
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/changeVerify', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    var ChangeVerify = function (element, options) {
        this.$element = $(element);
        this.options  = $.extend(true, {}, ChangeVerify.DEFAULTS, this.$element.data() || {}, options || {});
        this.source   = this.$element.attr('src');
        this.init();
    };

    ChangeVerify.prototype = {
        init : function () {
            var me  = this;
            var opt = me.options;

            if (me.isInit) {
                return;
            }

            me.isInit = true;
            if (opt.clickHandler) {
                me.$element.on('click.busyAdmin', function (e) {
                    e.preventDefault();

                    me.change();

                    return false;
                });
            }
        },

        /**
         * 切换地址
         */
        change : function () {
            var src = this.source;
            if (-1 === this.source.indexOf('?')) {
                src += '?'
            } else {
                src += '&'
            }

            this.$element.attr('src', src + '__rand__t=' + Math.random());
        }
    };

    ChangeVerify.DEFAULTS = {
        clickHandler : true,
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.changeVerify.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new ChangeVerify(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === 'string') {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminChangeVerify             = Plugin;
    $.fn.busyAdminChangeVerify.Constructor = ChangeVerify;
    busyAdmin.plugins.ChangeVerify         = ChangeVerify;


    $(document).on('click.busyAdmin', '[data-toggle="busy-change-verify"],[busy-change-verify]', function (e) {
        e.preventDefault();

        Plugin.call($(this), {clickHandler : false});
        Plugin.call($(this), 'change');

        return false;
    });

    return ChangeVerify;
}));
/**
 * Checkbox
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/checkboxRadio', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {

    var CheckboxRadio = function (element, options) {
        var me = this;

        me.element  = element;
        me.$element = $(element);
        me.options  = $.extend(true, {}, CheckboxRadio.DEFAULTS, me.$element.data() || {}, options || {});
        me.init();
    };


    CheckboxRadio.prototype = {
        init : function () {
            var me = this;

            if (me.isInit) {
                return;
            }
            me.isInit = true;

            if (me.element.tagName.toLowerCase() !== 'input') {
                return;
            }

            var elementType  = (me.$element.attr('type') || '').toLowerCase();
            this.elementType = elementType;
            if (elementType !== 'checkbox' && elementType !== 'radio') {
                return;
            }

            if (!me.options.title) {
                me.options.title = me.$element.attr('title') || '';
            }

            var id = me.$element.attr('id') || '__busy_admin_checkbox_radio_' + (CheckboxRadio.INDEX++);
            me.$element.attr('id', id);
            me.$icon  = $('<i class="bicon" />');
            me.$text  = $('<span />');
            me.$label = $('<label for="' + id + '" />');
            me.$label.append(me.$icon);
            me.$label.append(me.$text);

            var className  = [];
            var groupClass = '';
            $.each((me.$element.attr('class') || '').split(' '), function (i, name) {
                name = name.trim();
                if (name.length) {
                    className.push(name);
                }
            });
            if (-1 === className.indexOf('pill') && -1 === className.indexOf('switch')) {
                className.push('default');
                groupClass = 'default';
            } else if (-1 !== className.indexOf('pill')) {
                groupClass = 'pill';
            } else if (-1 !== className.indexOf('switch')) {
                groupClass = 'switch';
            }

            var $group = me.$element.closest('.' + elementType + '-group');
            if ($group.length > 0) {
                $group.addClass(groupClass);
            }

            me.$template = $('<div class="busy-admin-' + elementType + ' ' + className.join(' ') + '"/>');
            me.$template.append(me.$label);


            // 开关
            me.isSwitch  = me.$element.hasClass('switch');
            me.switchOn  = '';
            me.switchOff = '';
            if (me.isSwitch) {
                var title = me.options.title || '';
                if (!$.isArray(title) && -1 !== title.indexOf(',')) {
                    title = title.split(',');
                }
                if ($.isArray(title)) {
                    me.switchOn  = title[0] || me.options.locale.on;
                    me.switchOff = title[1] || me.options.locale.off;
                }

                me.$text.html(me.$element.prop('checked') ? me.switchOn : me.switchOff);
            } else {
                if (me.options.title) {
                    me.$text.html(me.options.title);
                    me.$template.removeClass('untitled');
                } else {
                    me.$text.addClass('hide');
                    me.$template.addClass('untitled');
                }
            }

            // 构建请求选项
            me.requestOptions = {};
            if (me.options.url) {
                $.extend(true, me.requestOptions, me.options);
                me.requestOptions.headers      = $.extend({}, me.requestOptions.headers || {}, {'Busy-Admin-Plugin' : elementType === 'checkbox' ? 'Checkbox' : 'Radio'});
                me.requestOptions.params       = me.requestOptions.params || {};
                me.requestOptions.clickHandler = false;
                me.$element.on(busyAdmin.e.requestError, function () {
                    me.$element.prop('checked', !$(this).prop('checked')).trigger($.Event('change', {__checkboxRadioNoRequest : true}));
                });
            }

            me.$element.after(me.$template);
            me.$template.prepend(me.$element);
            me.$element.on('change.busyAdmin', function (e) {
                me._decorate();

                var hasValue = this.hasAttribute('value');
                var $this    = $(this);
                if (me.options.url && !e.__checkboxRadioNoRequest) {
                    me.requestOptions.params.status = me.$element.prop('checked') ? 1 : 0;
                    me.requestOptions.params.value  = hasValue ? $this.val() : ''
                    me.$element.busyAdminRequest(me.requestOptions);
                }
            });
            me._decorate();

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'CheckboxRadio', me);
        },

        _decorate : function () {
            var me      = this;
            var checked = me.$element.prop('checked');
            if (me.isSwitch) {
                me.$text.html(checked ? me.switchOn : me.switchOff);
            }
        }
    };

    CheckboxRadio.INDEX = 0;

    CheckboxRadio.DEFAULTS = {
        title : '', // 标题

        url : undefined, // 请求URL

        locale : $.extend({}, {
            on  : '开启',
            off : '关闭',
        }, ((busyAdmin.locale || {}).plugin || {}).checkboxRadio || {}),
    };

    function Plugin(option) {
        var key  = 'busy.admin.checkbox.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        return this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new CheckboxRadio(this, typeof option === 'object' && option)));
            }
        });
    }

    $.fn.busyAdminCheckboxRadio             = Plugin;
    $.fn.busyAdminCheckboxRadio.Constructor = CheckboxRadio;
    busyAdmin.plugins.CheckboxRadio         = CheckboxRadio;

    busyAdmin.autoInit('[data-toggle="busy-checkbox"],[data-toggle="busy-radio"],[busy-checkbox],[busy-radio]', function () {
        Plugin.call(this);
    });

    return CheckboxRadio;
}));
/**
 * 全选反选
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/checkedAll', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    $(document).on('change', '[data-toggle="busy-checked-all"],[busy-checked-all]', function (e) {
        var $this     = $(this);
        var isChecked = $this.prop('checked');
        var data      = $this.data() || {};

        // 子Checkbox选中
        if (data.child && e.__CheckedAllChildNoChange !== true) {
            $(data.child).not(':disabled').prop('checked', isChecked).trigger('change');
        }

        // 父Checkbox选中
        if (data.parent) {
            var allChecked         = true;
            var checkedCount       = 0;
            var indeterminateCount = 0;
            var $parentTarget      = $(data.parent);
            var parentData         = $parentTarget.data() || {};
            if (!parentData.child) {
                return;
            }

            $(parentData.child).each(function () {
                var $me = $(this);
                if ($me.prop('disabled')) {
                    return true;
                }

                var childChecked = $me.prop('checked');
                if (!childChecked && !this.indeterminate) {
                    allChecked = false;
                }

                if (childChecked) {
                    checkedCount++;
                }

                if (this.indeterminate) {
                    indeterminateCount++;
                }
            });

            if (checkedCount === 0 && indeterminateCount === 0) {
                $parentTarget.each(function () {
                    this.indeterminate = false;
                    $(this).removeClass('indeterminate');
                });
                $parentTarget.prop('checked', false);
            } else {
                if (!allChecked || indeterminateCount !== 0) {
                    $parentTarget.each(function () {
                        this.indeterminate = true;
                        $(this).addClass('indeterminate');
                    });
                    $parentTarget.prop('checked', false);
                } else {
                    $parentTarget.each(function () {
                        this.indeterminate = false;
                        $(this).removeClass('indeterminate');
                    });
                    $parentTarget.prop('checked', true);
                }
            }
            $parentTarget.trigger($.Event('change', {__CheckedAllChildNoChange : true}));
        }
    });

    // 默认选中
    busyAdmin.autoInit('[data-toggle="busy-checked-all"],[busy-checked-all]', function () {
        var key        = 'busy.admin.checked.all.api';
        var parentList = [];
        var childList  = [];
        $(this).each(function () {
            var $this = $(this);
            if ($this.data(key)) {
                return true;
            }

            $this.data(key, true);
            var data = $this.data() || {};
            if (data.parent && $this.prop('checked') && -1 === parentList.indexOf(data.parent)) {
                $this.trigger($.Event('change', {__CheckedAllChildNoChange : true}));
                parentList.push(data.parent);
            }

            if (data.child && $this.prop('checked') && -1 === childList.indexOf(data.child)) {
                $this.trigger('change');
                childList.push(data.child);
            }
        });
    });
}));
/**
 * 颜色选择器
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/colorPicker', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    var eventGroup    = 'color-picker';
    var pluginIsReady = false;
    var ColorPicker   = function (element, options) {
        var me                         = this;
        me.$element                    = $(element);
        me.options                     = $.extend(true, {}, ColorPicker.DEFAULTS, me.$element.data() || {}, options || {});
        me.options.hexNumberSignPrefix = me.options.hexPrefix;
        me.options.colorSelectors      = me.options.selectors;
        me.options.customClass         = 'busy-admin-color-picker' + (me.options.className || '');
        if (me.options.inline) {
            me.options.container = true;
        }

        me.options.sliders = {
            saturation : {
                maxLeft : 150,
                maxTop  : 150
            },
            hue        : {
                maxTop : 150
            },
            alpha      : {
                maxTop : 150
            }
        };

        me.api = null;
        me.ready(me.init);
    };


    ColorPicker.prototype = {
        /**
         * 准备完成
         * @param callback
         */
        ready : function (callback) {
            var me = this;
            if (pluginIsReady) {
                typeof callback === "function" && callback.call(me);
            } else {
                require([busyAdmin.lib.colorPicker], function () {
                    if (!pluginIsReady) {
                        Object.keys($.colorpicker.prototype).map(function (item) {
                            if (-1 !== ['constructor', 'destroy'].indexOf(item)) {
                                return;
                            }

                            ColorPicker.prototype[item] = function () {
                                if (this.api) {
                                    return this.api[method].apply(this.api, Array.prototype.slice.call(arguments));
                                }
                            }
                        });
                    }

                    pluginIsReady = true;
                    typeof callback === "function" && callback.call(me);
                });
            }
        },

        /**
         * 初始化
         */
        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }

            me.options.template = '<div class="colorpicker dropdown-menu">' +
                '<div class="colorpicker-saturation"><i><b></b></i></div>' +
                '<div class="colorpicker-hue"><i></i></div>' +
                '<div class="colorpicker-alpha"><i></i></div>' +
                '<div class="colorpicker-color"><div /></div>' +
                '<div class="colorpicker-selectors clearfix"></div>' +
                '<div class="colorpicker-operate"><button class="btn btn-default btn-xs" type="button">清空</button></div>' +
                '</div>';
            me.isInit           = true;
            me.$element.colorpicker(me.options);
            me.api = me.$element.data('colorpicker');
            me.$element.on('create showPicker hidePicker changeColor disable enable destroy', function (e) {
                var args = [me];
                if (e.type === 'changeColor') {
                    args = [me, me.api.color];
                    if (me.api.hasInput()) {
                        me.api.input.busyAdminEventInput();
                    }
                } else if (e.type === 'create') {
                    var $operate = me.api.picker.find('.colorpicker-operate');
                    if (me.api.hasInput()) {
                        $operate.removeClass('hide');
                        $operate.find('button')
                            .on('mousedown', function (e) {
                                e.preventDefault();
                            })
                            .on('click', function (e) {
                                me.api.input.val('').busyAdminEventInput(true).blur();
                                me.$element.triggerHandler(busyAdmin.ee('clear', eventGroup));
                                me.api.hide();
                            });
                    } else {
                        $operate.addClass('hide');
                    }
                }
                me.$element.triggerHandler(busyAdmin.ee(e.type, eventGroup), args);
            });

            $(document).one(busyAdmin.e.appRenderBefore, function () {
                me.destroy();
            });

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'ColorPicker', me);
        },

        /**
         * 销毁
         */
        destroy : function () {
            if (this.api) {
                this.api.destroy();
            }
        }
    };


    ColorPicker.DEFAULTS = {
        format    : 'hex',
        color     : false,
        component : '.add-on, .input-group-addon',
        input     : 'input',
        hexPrefix : true,
        inline    : false,
        container : false,
        align     : 'left',
        selectors : null,
        className : '',
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.color-picker';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new ColorPicker(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === 'string') {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminColorPicker             = Plugin;
    $.fn.busyAdminColorPicker.Constructor = ColorPicker;
    busyAdmin.plugins.ColorPicker         = ColorPicker;
    $.extend(busyAdmin.e, {
        /**
         * 颜色选择创建成功触发
         */
        colorPickerCreate : busyAdmin.ee('create', eventGroup),
        /**
         * 颜色选择显示出来触发
         */
        colorPickerShow : busyAdmin.ee('show-picker', eventGroup),
        /**
         * 颜色选择隐藏后触发
         */
        colorPickerHide : busyAdmin.ee('hide-picker', eventGroup),
        /**
         * 颜色选择器颜色发生改变后触发
         */
        colorPickerChange : busyAdmin.ee('change-color', eventGroup),
        /**
         * 颜色选择器禁用后触发
         */
        colorPickerDisable : busyAdmin.ee('disable', eventGroup),
        /**
         * 颜色选择器启用后触发
         */
        colorPickerEnable : busyAdmin.ee('enable', eventGroup),
        /**
         * 颜色选择器销毁后触发
         */
        colorPickerDestroy : busyAdmin.ee('destroy', eventGroup),
        /**
         * 颜色选择器销毁后触发
         */
        colorPickerClear : busyAdmin.ee('clear', eventGroup),
    });

    busyAdmin.autoInit('[data-toggle="busy-color-picker"],[busy-color-picker]', function () {
        Plugin.call(this);
    });

    return ColorPicker;
}));
/**
 * 复制/剪切
 * TODO 剪切功能需要完善
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/copy', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    var Clipboard = null;

    var Copy = function (element, options) {
        var me = this;

        me.element  = element;
        me.$element = $(element);
        me.options  = $.extend(true, {}, Copy.DEFAULTS, me.$element.data() || {}, options || {});
        me.ready(me.init);
    };


    Copy.prototype = {
        /**
         * 组件已准备完成
         * @param {Function} callback
         */
        ready : function (callback) {
            var me = this;
            if (Clipboard) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.clipboard], function (clipboardTarget) {
                    Clipboard = clipboardTarget;

                    typeof callback === 'function' && callback.call(me);
                });
            }
        },


        init : function () {
            var me          = this;
            var clipOptions = {
                action : function () {
                    return me.options.action || 'copy';
                },
                text   : function (target) {
                    var text = '', $target = $(target);

                    // 自定义target
                    if (!me.options.content) {
                        if (me.options.target) {
                            if (me.options.target === true) {
                                text = me.getText($target);
                            } else {
                                text = me.getText($(me.options.target));
                            }
                        }
                    } else {
                        text = me.options.content;
                    }

                    // 触发事件转义
                    if (me.options.onDecode === 'html') {
                        text = busyAdmin.helper.htmlDecode(text);
                    } else {
                        var result = busyAdmin.helper.execCallback(me.options.onDecode, me.element, [text], me.$element, busyAdmin.e.copyDecode, true, 'string', true);
                        if (typeof result === 'string') {
                            text = result;
                        }
                    }

                    return text;
                }
            };

            if (me.options.target && me.options.target !== true) {
                clipOptions.target = function (trigger) {
                    return $(me.options.target)[0];
                }
            }

            var clip = new Clipboard(me.element, clipOptions);
            clip.on('success', function (e) {
                e.clearSelection();
                if (me.options.action === 'cut') {
                    if (me.options.target) {
                        if (me.options.target === true) {
                            me.$element.val('');
                        } else {
                            $(me.options.target).val('');
                        }
                    }
                }

                if (false === busyAdmin.helper.execCallback(me.options.onSuccess, me.element, [], me.$element, busyAdmin.e.copySuccess, true, false)) {
                    return;
                }

                busyAdmin.dialog.toast(me.options.action === 'cut' ? me.options.locale.cutSuccess : me.options.locale.copySuccess);
            });
            clip.on('error', function () {
                if (false === busyAdmin.helper.execCallback(me.options.onError, me.element, [], me.$element, busyAdmin.e.copyError, true, false)) {
                    return;
                }

                busyAdmin.dialog.toast(me.options.action === 'cut' ? me.options.locale.cutError : me.options.locale.copyError);
            });

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'Copy', me);
        },

        getText : function ($target) {
            var text;
            if ($target.is(':text')) {
                text = $target.val();
            } else {
                text = $target.html();
            }

            return text;
        }
    };

    Copy.DEFAULTS = {
        target    : null,
        onDecode  : null,
        onSuccess : null,
        onError   : null,

        locale : $.extend({
            copySuccess : '复制成功',
            copyError   : '复制失败',
            cutSuccess  : '剪切成功',
            cutError    : '剪切失败',
        }, ((busyAdmin.locale || {}).plugin || {}).copy || {})
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.copy.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Copy(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminCopy             = Plugin;
    $.fn.busyAdminCopy.Constructor = Copy;
    busyAdmin.plugins.Copy         = Copy;
    $.extend(busyAdmin.e, {
        /**
         * 复制成功触发
         */
        copySuccess : busyAdmin.ee('success', 'copy'),
        /**
         * 复制失败触发
         */
        copyError   : busyAdmin.ee('error', 'copy'),
        /**
         * 解析触发
         */
        copyDecode  : busyAdmin.ee('decode', 'copy'),
    });

    busyAdmin.autoInit('[data-toggle="busy-copy"],[busy-copy]', function () {
        Plugin.call(this);
    });

    return Copy;
}));
/**
 * 日期选择控件
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/datePicker', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    var moment;

    var DatePicker = function (element, options, cb) {
        //default settings for options
        this.parentEl             = 'body';
        this.element              = $(element);
        this.minDate              = false;
        this.maxDate              = false;
        this.maxSpan              = false;
        this.singleDatePicker     = false;
        this.showDropdowns        = true;
        this.showWeekNumbers      = false;
        this.showISOWeekNumbers   = false;
        this.showCustomRangeLabel = true;
        this.timePicker           = false;
        this.timePicker24Hour     = true;
        this.timePickerIncrement  = 1;
        this.timePickerSeconds    = true;
        this.timePickerMinute     = true;
        this.linkedCalendars      = false;
        this.autoUpdateInput      = false;
        this.alwaysShowCalendars  = false;
        this.pickerType           = 'date';
        this.ranges               = {};
        this.moveTimer            = null;
        this.valueTarget          = null;
        this.hideClearBtn         = false;
        this.force                = false;
        this.sourceContent        = '';
        this.startTarget          = null;
        this.endTarget            = null;
        this.callback             = typeof cb === "function" ? cb : $.noop;
        this.isShowing            = false;
        this.leftCalendar         = {};
        this.rightCalendar        = {};

        this.opens = 'right';
        if (this.element.hasClass('pull-right')) {
            this.opens = 'left';
        }

        this.drops = 'down';
        if (this.element.hasClass('dropup')) {
            this.drops = 'up';
        }

        this.buttonClasses      = 'btn btn-sm';
        this.applyButtonClasses = 'btn-primary';
        this.nowButtonClasses   = 'btn-default';
        this.clearButtonClasses = 'btn-default';
        this.options            = $.extend(true, {}, DatePicker.DEFAULTS, this.element.data() || {}, options || {});
        this.locale             = this.options.locale;
        this.ready(this.init);
    };

    DatePicker.prototype = {

        constructor : DatePicker,

        /**
         * 初始化
         */
        init : function () {
            var options = this.options;

            this.startDate       = this.getInitStartDate();
            this.endDate         = this.getInitEndDate();
            this.minYear         = moment().subtract(100, 'year').format('YYYY');
            this.maxYear         = moment().add(100, 'year').format('YYYY');
            this.locale.firstDay = moment.localeData().firstDayOfWeek();

            // 格式化
            if (options.format) {
                this.locale.format = options.format;

                var type       = 'date';
                var format     = options.format;
                var isYear     = format.indexOf('Y') !== -1;
                var isMonth    = format.indexOf('M') !== -1;
                var isDay      = format.indexOf('D') !== -1;
                var isHours    = format.indexOf('H') !== -1;
                var isMinute   = format.indexOf('m') !== -1;
                var isSecond   = format.indexOf('s') !== -1;
                var showMinute = true;
                var showSecond = true;

                // 年月日 时分秒
                if (isYear && isMonth && isDay) {
                    // 年月日 时分秒
                    if (isHours || isMinute || isSecond) {
                        type = 'datetime';
                    }
                }

                // 年月
                else if (isYear && isMonth) {
                    type = 'month';
                }

                // 年
                else if (isYear) {
                    type = 'year';
                }

                // 时分秒
                else if (isHours || isMinute || isSecond) {
                    type = 'time';
                }

                if (!isMinute) {
                    showMinute = false;
                    showSecond = false;
                } else if (!isSecond) {
                    showSecond = false;
                }

                options.pickerType        = type;
                options.timePickerSeconds = showSecond;
                options.timePickerMinute  = showMinute;
            }

            // 双日历模式
            if (options.range) {
                options.singleDatePicker = false;
                if (options.range !== true) {
                    this.locale.separator = options.range;
                }

                // 预设快速范围
                if (typeof options.ranges !== 'string' && options.ranges !== false) {
                    if (options.pickerType === 'year') {
                        var y1         = moment().startOf('year');
                        var y2         = y1.clone().subtract(1, 'year');
                        options.ranges = {};

                        options.ranges[this.locale.thisYear]                                 = [y1, y1];
                        options.ranges[this.locale.lastYear]                                 = [y2, y2];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNYear, '2')] = [y2, y1];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNYear, '3')] = [y2.clone().subtract(2, 'year'), y1];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNYear, '6')] = [y2.clone().subtract(5, 'year'), y1];
                    } else if (options.pickerType === 'month') {
                        var m1         = moment().startOf('month');
                        var m2         = m1.clone().subtract(1, 'month');
                        options.ranges = {};

                        options.ranges[this.locale.thisMonth]                                 = [m1, m1];
                        options.ranges[this.locale.lastMonth]                                 = [m2, m2];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNMonth, '2')] = [m2.clone(), m1];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNMonth, '3')] = [m2.clone().subtract(2, 'month'), m1];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNMonth, '6')] = [m2.clone().subtract(5, 'month'), m1];
                    } else if (options.pickerType === 'time') {
                        options.ranges = {};

                        options.ranges[this.locale.todayToNow]                                 = [moment().startOf('days'), moment()];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNHours, '1')]  = [moment().subtract(1, 'hours'), moment()];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNHours, '2')]  = [moment().subtract(2, 'hours'), moment()];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNHours, '3')]  = [moment().subtract(3, 'hours'), moment()];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNHours, '6')]  = [moment().subtract(6, 'hours'), moment()];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNHours, '12')] = [moment().subtract(12, 'hours'), moment()];
                        options.ranges[this.locale.forenoon]                                   = [moment().startOf('days'), moment().startOf('days').add(12, 'hours')];
                        options.ranges[this.locale.afternoon]                                  = [moment().startOf('days').add(12, 'hours'), moment().endOf('days')];
                        options.ranges[this.locale.allDay]                                     = [moment().startOf('days'), moment().endOf('days')];
                    } else {
                        options.ranges = {};

                        options.ranges[this.locale.today]                                    = [moment().startOf('days'), moment().endOf('days')];
                        options.ranges[this.locale.yesterday]                                = [moment().startOf('days').subtract(1, 'days'), moment().endOf('days').subtract(1, 'days')];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNDay, '7')]  = [moment().startOf('days').subtract(6, 'days'), moment().endOf('days')];
                        options.ranges[busyAdmin.helper.sprintf(this.locale.lastNDay, '30')] = [moment().startOf('days').subtract(29, 'days'), moment().endOf('days')];
                        options.ranges[this.locale.thisMonth]                                = [moment().startOf('month'), moment().endOf('month')];
                        options.ranges[this.locale.lastMonth]                                = [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    }
                } else {
                    if (options.ranges !== false) {
                        options.ranges = window[options.ranges] || false;
                    }
                }

                // 设置最多允许选择的时间跨度
                if (typeof options.span === 'string' && options.span) {
                    var spans = (options.span || '').split(',');
                    for (var i = 0; i < spans.length; i++) {
                        spans[i] = spans[i].trim();
                    }

                    var y = busyAdmin.helper.int((spans[0] || '0').trim());
                    var m = busyAdmin.helper.int((spans[1] || '0').trim());
                    var d = busyAdmin.helper.int((spans[2] || '0').trim());
                    var h = busyAdmin.helper.int((spans[3] || '0').trim());
                    var i = busyAdmin.helper.int((spans[4] || '0').trim());
                    var s = busyAdmin.helper.int((spans[5] || '0').trim());

                    options.span = {};
                    if (y > 0) {
                        options.span.year = y - 1;
                    }
                    if (m > 0) {
                        options.span.month = m - 1;
                    }
                    if (d > 0) {
                        options.span.days = d - 1;
                    }
                    if (h > 0) {
                        options.span.hours = h - 1;
                    }
                    if (i > 0) {
                        options.span.minute = i - 1;
                    }
                    if (s > 0) {
                        options.span.secoud = s - 1;
                    }
                }
            }

            // 单日历模式
            else {
                options.singleDatePicker = true;
            }

            //html template for the picker UI
            if (typeof options.template !== 'string' && !(options.template instanceof $)) {
                options.template = '<div class="busy-admin-date-picker">\
    <div class="ranges"></div>\
    <div class="drp-calendar left">\
        <div class="calendar-table"></div>\
        <div class="calendar-time"></div>\
    </div>\
    <div class="drp-calendar right">\
        <div class="calendar-table"></div>\
        <div class="calendar-time"></div>\
    </div>\
    <div class="drp-buttons">\
        <span class="drp-selected"></span>\
        <div class="btn-group">\
            <button class="clearBtn" type="button"></button>\
            <button class="nowBtn" type="button"></button>\
            <button class="applyBtn" disabled="disabled" type="button"></button>\
        </div>\
    </div>\
    <div class="arrow"></div>\
</div>';
            }

            // 支持语法糖
            if (options.container) {
                if (options.container === '@modal') {
                    this.parentEl = this.element.closest('.modal');
                } else {
                    this.parentEl = $(options.container);
                }
            } else {
                var $model = this.element.closest('.modal');
                if ($model.length) {
                    this.parentEl = $model;
                } else {
                    this.parentEl = (options.parentEl && $(options.parentEl).length) ? $(options.parentEl) : $(this.parentEl);
                }
            }

            this.container = $(options.template).appendTo(this.parentEl);
            this.$arrow    = this.container.find('.arrow');

            this.container.addClass(this.locale.direction);

            if (typeof options.valueTarget === 'string') {
                this.valueTarget = options.valueTarget;
            }

            if (typeof options.startDate === 'string') {
                this.startDate = moment(options.startDate, this.locale.format);
            }

            if (typeof options.endDate === 'string') {
                this.endDate = moment(options.endDate, this.locale.format);
            }

            if (typeof options.minDate === 'string') {
                this.minDate = moment(options.minDate, this.locale.format);
            }

            if (typeof options.maxDate === 'string') {
                this.maxDate = moment(options.maxDate, this.locale.format);
            }

            if (typeof options.startDate === 'object') {
                this.startDate = moment(options.startDate);
            }

            if (typeof options.endDate === 'object') {
                this.endDate = moment(options.endDate);
            }

            if (typeof options.minDate === 'object') {
                this.minDate = moment(options.minDate);
            }

            if (typeof options.maxDate === 'object') {
                this.maxDate = moment(options.maxDate);
            }

            // sanity check for bad options
            if (this.minDate && this.startDate.isBefore(this.minDate)) {
                this.startDate = this.minDate.clone();
            }

            // sanity check for bad options
            if (this.maxDate && this.endDate.isAfter(this.maxDate)) {
                this.endDate = this.maxDate.clone();
            }

            if (typeof options.applyButtonClasses === 'string') {
                this.applyButtonClasses = options.applyButtonClasses;
            }

            // backwards compat
            if (typeof options.applyClass === 'string') {
                this.applyButtonClasses = options.applyClass;
            }

            if (typeof options.nowButtonClasses === 'string') {
                this.nowButtonClasses = options.nowButtonClasses;
            }

            // backwards compat
            if (typeof options.nowClass === 'string') {
                this.nowButtonClasses = options.nowClass;
            }

            if (typeof options.clearButtonClasses === 'string') {
                this.clearButtonClasses = options.clearButtonClasses;
            }

            // backwards compat
            if (typeof options.clearClass === 'string') {
                this.nowButtonClasses = options.clearClass;
            }

            if (typeof options.span === 'object') {
                this.maxSpan = options.span;
            }

            if (typeof options.opens === 'string') {
                this.opens = options.opens;
            }

            if (typeof options.drops === 'string') {
                this.drops = options.drops;
            }

            if (typeof options.showWeekNumbers === 'boolean') {
                this.showWeekNumbers = options.showWeekNumbers;
            }

            if (typeof options.showISOWeekNumbers === 'boolean') {
                this.showISOWeekNumbers = options.showISOWeekNumbers;
            }

            if (typeof options.buttonClasses === 'string') {
                this.buttonClasses = options.buttonClasses;
            }

            if (typeof options.buttonClasses === 'object') {
                this.buttonClasses = options.buttonClasses.join(' ');
            }

            if (typeof options.showDropdowns === 'boolean') {
                this.showDropdowns = options.showDropdowns;
            }

            if (typeof options.minYear === 'number') {
                this.minYear = options.minYear;
            }

            if (typeof options.maxYear === 'number') {
                this.maxYear = options.maxYear;
            }

            if (typeof options.custom === 'boolean') {
                this.showCustomRangeLabel = options.custom;
            }

            if (typeof options.singleDatePicker === 'boolean') {
                this.singleDatePicker = options.singleDatePicker;
                if (this.singleDatePicker) {
                    this.endDate = this.startDate.clone();
                }
            }

            if (typeof options.timePicker === 'boolean') {
                this.timePicker = options.timePicker;
            }

            if (typeof options.timePickerMinute === 'boolean') {
                this.timePickerMinute = options.timePickerMinute;
            }

            if (typeof options.timePickerSeconds === 'boolean') {
                this.timePickerSeconds = options.timePickerSeconds;
            }

            if (typeof options.timePickerIncrement === 'number') {
                this.timePickerIncrement = options.timePickerIncrement;
            }

            if (typeof options.timePicker24Hour === 'boolean') {
                this.timePicker24Hour = options.timePicker24Hour;
            }

            if (typeof options.input === 'boolean') {
                this.autoUpdateInput = options.input;
            }

            if (typeof options.link === 'boolean') {
                this.linkedCalendars = options.link;
            }

            if (typeof options.isInvalidDate === 'function') {
                this.isInvalidDate = options.isInvalidDate;
            }

            if (typeof options.isCustomDate === 'function') {
                this.isCustomDate = options.isCustomDate;
            }

            if (typeof options.alwaysShowCalendars === 'boolean') {
                this.alwaysShowCalendars = options.alwaysShowCalendars;
            }

            if (typeof options.clear === 'boolean') {
                this.hideClearBtn = !options.clear;
            }

            if (typeof options.force === 'boolean') {
                this.force         = options.force;
                this.sourceContent = this.element.html();
            }

            // update day names order to firstDay
            if (this.locale.firstDay != 0) {
                var iterator = this.locale.firstDay;
                while (iterator > 0) {
                    this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift());
                    iterator--;
                }
            }

            var start, end, range;

            //if no start/end dates set, check if an input element contains initial values
            if (typeof options.startDate === 'undefined' && typeof options.endDate === 'undefined') {
                if ($(this.element).is(':text')) {
                    var val   = $(this.element).val();
                    var split = val.split(this.locale.separator);
                    start     = end = null;

                    if (split.length == 2) {
                        start = moment(split[0], this.locale.format);
                        end   = moment(split[1], this.locale.format);
                    } else if (this.singleDatePicker && val !== "") {
                        start = moment(val, this.locale.format);
                        end   = moment(val, this.locale.format);
                    }

                    if (start !== null && end !== null) {
                        this.setStartDate(start);
                        this.setEndDate(end);
                    }
                }
            }


            // 关联元素
            if (typeof options.startTarget === 'string') {
                this.startTarget = options.startTarget;
                options.ranges   = false;
            }
            if (typeof options.endTarget === 'string') {
                this.endTarget = options.endTarget;
            }

            if (typeof options.ranges === 'object') {
                var unit = 'day';
                if (this.timePicker && this.timePickerMinute && this.timePickerSeconds) {
                    unit = 'second';
                } else if (this.timePicker && this.timePickerMinute) {
                    unit = 'minute';
                } else if (this.timePicker) {
                    unit = 'hours';
                } else {
                    if (this.pickerType === 'month' || this.pickerType === 'year') {
                        unit = this.pickerType;
                    }
                }

                for (range in options.ranges) {

                    if (typeof options.ranges[range][0] === 'string') {
                        start = moment(options.ranges[range][0], this.locale.format);
                    } else {
                        start = moment(options.ranges[range][0]);
                    }

                    if (typeof options.ranges[range][1] === 'string') {
                        end = moment(options.ranges[range][1], this.locale.format);
                    } else {
                        end = moment(options.ranges[range][1]);
                    }

                    // If the start or end date exceed those allowed by the minDate or maxSpan
                    // options, shorten the range to the allowable period.
                    if (this.minDate && start.isBefore(this.minDate)) {
                        start = this.minDate.clone();
                    }


                    var maxDate = this.maxDate;
                    if (this.maxSpan && maxDate) {
                        if (start.clone().add(this.maxSpan).isAfter(maxDate)) {
                            maxDate = start.clone().add(this.maxSpan);
                        }
                    } else if (this.maxSpan) {
                        maxDate = start.clone().add(this.maxSpan);
                    }

                    // 超过最大时间的则忽略掉
                    if (maxDate && end.isAfter(maxDate, unit)) {
                        continue;
                    }

                    // If the end of the range is before the minimum or the start of the range is
                    // after the maximum, don't display this range option at all.
                    if ((this.minDate && end.isBefore(this.minDate, unit)) || (maxDate && start.isAfter(maxDate, unit))) {
                        continue;
                    }

                    //Support unicode chars in the range names.
                    var elem       = document.createElement('textarea');
                    elem.innerHTML = range;
                    var rangeHtml  = elem.value;

                    this.ranges[rangeHtml] = [start, end];
                }

                var list = '<ul>';
                for (range in this.ranges) {
                    list += '<li data-range-key="' + range + '">' + range + '</li>';
                }
                if (this.showCustomRangeLabel) {
                    list += '<li data-range-key="' + this.locale.customRangeLabel + '">' + this.locale.customRangeLabel + '</li>';
                }

                if (!this.hideClearBtn) {
                    list += '<li data-range-key="' + this.locale.clearLabel + '">' + this.locale.clearLabel + '</li>';
                }

                list += '</ul>';
                this.container.find('.ranges').prepend(list);
            }

            // 自定义选择器
            if (typeof options.pickerType === 'string' && options.pickerType.length) {
                this.pickerType = options.pickerType;
                if (options.pickerType === 'datetime' || options.pickerType === 'time') {
                    this.timePicker = true;
                }
            }

            if (!this.timePicker) {
                this.startDate = this.startDate.startOf('day');
                this.endDate   = this.endDate.endOf('day');
                this.container.find('.calendar-time').hide();
            }

            if (typeof options.ranges === 'object') {
                this.container.addClass('show-ranges');
            }

            if (this.singleDatePicker) {
                this.container.addClass('single');
                this.container.find('.drp-calendar.left').addClass('single');
                this.container.find('.drp-calendar.left').show();
                this.container.find('.drp-calendar.right').hide();
            }

            if ((typeof options.ranges === 'undefined' && !this.singleDatePicker) || this.alwaysShowCalendars) {
                this.container.addClass('show-calendar');
            }


            this.container.addClass('opens' + this.opens);

            //apply CSS classes and labels to buttons
            this.container.find('.applyBtn, .nowBtn, .clearBtn').addClass(this.buttonClasses);
            if (this.applyButtonClasses.length) {
                this.container.find('.applyBtn').addClass(this.applyButtonClasses);
            }
            if (this.nowButtonClasses.length) {
                this.container.find('.nowBtn').addClass(this.nowButtonClasses);
            }
            if (this.clearButtonClasses.length) {
                this.container.find('.clearBtn').addClass(this.clearButtonClasses);
            }
            this.container.find('.applyBtn').html(this.locale.applyLabel);
            this.container.find('.nowBtn').html(this.locale.nowLabel);
            this.container.find('.clearBtn').html(this.locale.clearLabel);

            if (this.autoUpdateInput || this.hideClearBtn) {
                this.container.find('.clearBtn').remove();
            }


            this.container.find('.drp-calendar')
                .on('click.busy-admin-date-picker', '.prev', $.proxy(this.clickPrev, this))
                .on('click.busy-admin-date-picker', '.next', $.proxy(this.clickNext, this))
                .on('click.busy-admin-date-picker', 'td.available,span.col-xs-4.available', $.proxy(this.clickDate, this))
                .on('mouseenter.busy-admin-date-picker', 'td.available,span.col-xs-4.available', $.proxy(this.hoverDate, this))
                .on('click.busy-admin-date-picker', 'span.year-select', $.proxy(this.showYearView, this))
                .on('click.busy-admin-date-picker', 'span.month-select', $.proxy(this.showMonthView, this))
                .on('change.busy-admin-date-picker', 'select.hourselect,select.minuteselect,select.secondselect,select.ampmselect', $.proxy(this.timeChanged, this))
                .on('click.busy-admin-date-picker', 'span.available.time-picker-item', $.proxy(this.timeChanged, this));

            this.container.find('.ranges')
                .on('click.busy-admin-date-picker', 'li', $.proxy(this.clickRange, this));

            this.container.find('.drp-buttons')
                .on('click.busy-admin-date-picker', 'button.applyBtn', $.proxy(this.clickApply, this))
                .on('click.busy-admin-date-picker', 'button.clearBtn', $.proxy(this.clickClear, this))
                .on('click.busy-admin-date-picker', 'button.nowBtn', $.proxy(this.clickNow, this));

            if (this.element.is(':text') || this.element.is('button')) {
                this.element.on({
                    'click.busy-admin-date-picker'   : $.proxy(this.show, this),
                    'focus.busy-admin-date-picker'   : $.proxy(this.show, this),
                    'keyup.busy-admin-date-picker'   : $.proxy(this.elementChanged, this),
                    'keydown.busy-admin-date-picker' : $.proxy(this.keydown, this) //IE 11 compatibility
                });
            } else {
                this.element.on('click.busy-admin-date-picker', $.proxy(this.toggle, this));
                this.element.on('keydown.busy-admin-date-picker', $.proxy(this.toggle, this));
            }

            this.element.data('busy.admin.date.picker', this);
            this.updateElement();
        },

        /**
         * 准备完成
         * @param callback
         */
        ready : function (callback) {
            var me = this;
            if (moment) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.moment], function (m) {
                    moment = m;
                    typeof callback === 'function' && callback.call(me);
                });
            }
        },

        /**
         * 获取日历父容器
         * @param {jQuery} element
         * @return {jQuery}
         */
        getTopWrap : function (element) {
            return element.parents('.drp-calendar');
        },

        /**
         * 检测是否左侧日历
         * @param {jQuery} element
         * @return {boolean}
         */
        isLeft : function (element) {
            return element.hasClass('left');
        },

        /**
         * 是否年份选择器
         * @param {jQuery} element
         * @return {boolean}
         */
        isYearPicker : function (element) {
            return element.closest('.table-year-view').length > 0;
        },

        /**
         * 是否月份选择器
         * @param {jQuery} element
         * @return {boolean}
         */
        isMonthPicker : function (element) {
            return element.closest('.table-month-view').length > 0;
        },

        /**
         * 检测是否允许点击
         * @param {jQuery} element
         * @return {Boolean}
         */
        isAvailable : function (element) {
            return element.hasClass('available');
        },

        /**
         * 设置开始时间
         * @param {Date|String|moment} startDate
         */
        setStartDate : function (startDate) {
            if (typeof startDate === 'string') {
                this.startDate = moment(startDate, this.locale.format);
            }

            if (typeof startDate === 'object') {
                this.startDate = moment(startDate);
            }

            if (!this.timePicker) {
                this.startDate = this.startDate.startOf('day');
            }

            if (this.timePicker && this.timePickerIncrement) {
                this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
            }

            if (this.minDate && this.startDate.isBefore(this.minDate)) {
                this.startDate = this.minDate.clone();
                if (this.timePicker && this.timePickerIncrement) {
                    this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
                }
            }

            if (this.maxDate && this.startDate.isAfter(this.maxDate)) {
                this.startDate = this.maxDate.clone();
                if (this.timePicker && this.timePickerIncrement) {
                    this.startDate.minute(Math.floor(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
                }
            }

            if (!this.isShowing) {
                this.updateElement();
            }

            this.updateMonthsInView();
        },

        /**
         * 设置结束时间
         * @param {Date|String|moment} endDate
         */
        setEndDate : function (endDate) {
            if (typeof endDate === 'string') {
                this.endDate = moment(endDate, this.locale.format);
            }

            if (typeof endDate === 'object') {
                this.endDate = moment(endDate);
            }

            if (!this.timePicker) {
                this.endDate = this.endDate.endOf('day');
            }

            if (this.timePicker && this.timePickerIncrement) {
                this.endDate.minute(Math.round(this.endDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
            }

            if (this.endDate.isBefore(this.startDate)) {
                this.endDate = this.startDate.clone();
            }

            if (this.maxDate && this.endDate.isAfter(this.maxDate)) {
                this.endDate = this.maxDate.clone();
            }

            if (this.maxSpan && this.startDate.clone().add(this.maxSpan).isBefore(this.endDate)) {
                this.endDate = this.startDate.clone().add(this.maxSpan);
            }

            this.previousRightTime = this.endDate.clone();

            this.container.find('.drp-selected')
                .html(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));

            if (!this.isShowing) {
                this.updateElement();
            }

            this.updateMonthsInView();
        },

        /**
         * @return {boolean}
         */
        isInvalidDate : function () {
            return false;
        },

        /**
         * @return {boolean}
         */
        isCustomDate : function () {
            return false;
        },

        /**
         * 更新所有UI
         */
        updateView : function () {
            if (this.timePicker) {
                if (!this.endDate) {
                    this.container.find('.right .calendar-time select').prop('disabled', true).addClass('disabled');
                } else {
                    this.container.find('.right .calendar-time select').prop('disabled', false).removeClass('disabled');
                }
            }
            if (this.endDate) {
                this.container.find('.drp-selected').html(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
            }
            this.updateMonthsInView();
            this.updateCalendars();
            this.updateFormInputs();

            if (this.timePicker) {
                this.renderTimePicker('left');
                this.renderTimePicker('right');
            }
        },

        /**
         * 更新日历月份对象
         */
        updateMonthsInView : function () {
            if (this.pickerType === 'year' || this.pickerType === 'month') {
                if (this.endDate) {
                    if (!this.singleDatePicker && this.leftCalendar.month && this.rightCalendar.month && (this.startDate.year() == this.leftCalendar.month.year() || this.startDate.year() == this.rightCalendar.month.year()) && (this.endDate.year() == this.leftCalendar.month.year() || this.endDate.year() == this.rightCalendar.month.year())) {
                        return;
                    }

                    this.leftCalendar.month = this.startDate.clone().startOf('year');
                    if (!this.linkedCalendars && this.endDate.year() != this.startDate.year()) {
                        this.rightCalendar.month = this.endDate.clone().startOf('year');
                    } else {
                        this.rightCalendar.month = this.startDate.clone().startOf('year').add(1, 'year');
                    }
                } else {
                    if (this.leftCalendar.month.year() != this.startDate.year() && this.rightCalendar.month.year() != this.startDate.year()) {
                        this.leftCalendar.month  = this.startDate.clone().startOf('year');
                        this.rightCalendar.month = this.startDate.clone().startOf('year').add(1, 'year');
                    }
                }

                if (this.maxDate && this.linkedCalendars && !this.singleDatePicker && this.rightCalendar.year() > this.maxDate.year()) {
                    this.rightCalendar.month = this.maxDate.clone().startOf('year');
                    this.leftCalendar.month  = this.maxDate.clone().startOf('year').subtract(1, 'year');
                }

                return;
            }

            // 如果结束时间存在
            if (this.endDate) {
                // 如果单日历
                // 且 左月存在
                // 且 右月存在
                // 且 开始时间月 == 左月 或者 开始时间月 == 右月
                // 且 结束时间月 == 左月 或者 结束时间月 == 右月
                if (!this.singleDatePicker && this.leftCalendar.month && this.rightCalendar.month && (this.startDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.startDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM')) && (this.endDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.endDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM'))) {
                    return;
                }

                // 设置左月为当前时间
                this.leftCalendar.month = this.startDate.clone().date(2);

                // 如果不连接左右日历 且 结束月份不等于开始月份 或者 结束年份 不能与 开始年份
                if (!this.linkedCalendars && (this.endDate.month() != this.startDate.month() || this.endDate.year() != this.startDate.year())) {
                    this.rightCalendar.month = this.endDate.clone().date(2);
                } else {
                    this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
                }

            } else {
                // 左月 不等于 开始时间
                // 右月 不等于 开始时间
                if (this.leftCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM') && this.rightCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM')) {
                    this.leftCalendar.month  = this.startDate.clone().date(2);
                    this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
                }
            }

            // 存在最大时间 且 连接左右日历 且 不是单日历 且 右月大于最大时间
            if (this.maxDate && this.linkedCalendars && !this.singleDatePicker && this.rightCalendar.month > this.maxDate) {
                this.rightCalendar.month = this.maxDate.clone().date(2);
                this.leftCalendar.month  = this.maxDate.clone().date(2).subtract(1, 'month');
            }
        },

        /**
         * 更新日期UI、自定义范围UI
         */
        updateCalendars : function () {
            if (this.timePicker) {
                var hour, minute, second;
                if (this.endDate) {
                    hour   = parseInt(this.container.find('.left .hourselect').val(), 10);
                    minute = parseInt(this.container.find('.left .minuteselect').val(), 10);
                    if (isNaN(minute)) {
                        minute = parseInt(this.container.find('.left .minuteselect option:last').val(), 10);
                    }
                    second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;
                    if (!this.timePicker24Hour) {
                        var ampm = this.container.find('.left .ampmselect').val();
                        if (ampm === 'PM' && hour < 12) {
                            hour += 12;
                        }
                        if (ampm === 'AM' && hour === 12) {
                            hour = 0;
                        }
                    }
                } else {
                    hour   = parseInt(this.container.find('.right .hourselect').val(), 10);
                    minute = parseInt(this.container.find('.right .minuteselect').val(), 10);
                    if (isNaN(minute)) {
                        minute = parseInt(this.container.find('.right .minuteselect option:last').val(), 10);
                    }
                    second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect')
                        .val(), 10) : 0;
                    if (!this.timePicker24Hour) {
                        var ampm = this.container.find('.right .ampmselect').val();
                        if (ampm === 'PM' && hour < 12) {
                            hour += 12;
                        }
                        if (ampm === 'AM' && hour === 12) {
                            hour = 0;
                        }
                    }
                }
                this.leftCalendar.month.hour(hour).minute(minute).second(second);
                this.rightCalendar.month.hour(hour).minute(minute).second(second);
            }

            this.renderCalendar('left');
            this.renderCalendar('right');

            // 年份选择器
            if (this.pickerType === 'year') {
                this.renderYearOrMonth(true, true);
                this.renderYearOrMonth(false, true);
            }

            // 月份选择器
            else if (this.pickerType === 'month') {
                this.renderYearOrMonth(true, false);
                this.renderYearOrMonth(false, false);
            }

            //highlight any predefined range matching the current start and end dates
            this.container.find('.ranges li').removeClass('active');
            if (this.endDate == null) {
                return;
            }

            this.calculateChosenLabel();
        },

        /**
         * 渲染日期，左边的还是右边的
         * @param {String} side 方向 left 左边，right 右边
         */
        renderCalendar : function (side) {
            var date            = side == 'left' ? this.leftCalendar : this.rightCalendar;
            var month           = date.month.month();
            var year            = date.month.year();
            var hour            = date.month.hour();
            var minute          = date.month.minute();
            var second          = date.month.second();
            var daysInMonth     = moment([year, month]).daysInMonth();
            var firstDay        = moment([year, month, 1]);
            var lastDay         = moment([year, month, daysInMonth]);
            var lastMonth       = moment(firstDay).subtract(1, 'month').month();
            var lastYear        = moment(firstDay).subtract(1, 'month').year();
            var daysInLastMonth = moment([lastYear, lastMonth]).daysInMonth();
            var dayOfWeek       = firstDay.day();

            //initialize a 6 rows x 7 columns array for the calendar
            var calendar      = [];
            calendar.firstDay = firstDay;
            calendar.lastDay  = lastDay;

            for (var i = 0; i < 6; i++) {
                calendar[i] = [];
            }

            //populate the calendar with date objects
            var startDay = daysInLastMonth - dayOfWeek + this.locale.firstDay + 1;
            if (startDay > daysInLastMonth) {
                startDay -= 7;
            }

            if (dayOfWeek == this.locale.firstDay) {
                startDay = daysInLastMonth - 6;
            }

            var curDate = moment([lastYear, lastMonth, startDay, 12, minute, second]);

            var col, row;
            for (var i = 0, col = 0, row = 0; i < 42; i++, col++, curDate = moment(curDate).add(24, 'hour')) {
                if (i > 0 && col % 7 === 0) {
                    col = 0;
                    row++;
                }
                calendar[row][col] = curDate.clone().hour(hour).minute(minute).second(second);
                curDate.hour(12);

                if (this.minDate && calendar[row][col].format('YYYY-MM-DD') == this.minDate.format('YYYY-MM-DD') && calendar[row][col].isBefore(this.minDate) && side == 'left') {
                    calendar[row][col] = this.minDate.clone();
                }

                if (this.maxDate && calendar[row][col].format('YYYY-MM-DD') == this.maxDate.format('YYYY-MM-DD') && calendar[row][col].isAfter(this.maxDate) && side == 'right') {
                    calendar[row][col] = this.maxDate.clone();
                }

            }

            //make the calendar object available to hoverDate/clickDate
            if (side == 'left') {
                this.leftCalendar.calendar = calendar;
            } else {
                this.rightCalendar.calendar = calendar;
            }

            //
            // Display the calendar
            //

            var minDate = side == 'left' ? this.minDate : this.startDate;
            var maxDate = this.maxDate;

            var html = '<table class="table-condensed">';
            html += '<thead>';
            html += '<tr>';

            // add empty cell for week number
            if (this.showWeekNumbers || this.showISOWeekNumbers) {
                html += '<th></th>';
            }

            if ((!minDate || minDate.isBefore(calendar.firstDay)) && (!this.linkedCalendars || side == 'left')) {
                html += '<th class="prev available"><span></span></th>';
            } else {
                html += '<th></th>';
            }

            var dateHtml = calendar[1][1].format("YYYY" + this.locale.yearName) + ' ' + this.locale.monthNames[calendar[1][1].month()];
            if (this.showDropdowns) {
                dateHtml = '<span class="year-select">' + calendar[1][1].format("YYYY" + this.locale.yearName) + '</span><span class="month-select">' + this.locale.monthNames[calendar[1][1].month()] + '</span>';
            }

            html += '<th colspan="5" class="month">' + dateHtml + '</th>';
            if ((!maxDate || maxDate.isAfter(calendar.lastDay)) && (!this.linkedCalendars || side == 'right' || this.singleDatePicker)) {
                html += '<th class="next available"><span></span></th>';
            } else {
                html += '<th></th>';
            }

            html += '</tr>';
            html += '<tr class="week-bar">';

            // add week number label
            if (this.showWeekNumbers || this.showISOWeekNumbers) {
                html += '<th class="week">' + this.locale.weekLabel + '</th>';
            }

            $.each(this.locale.daysOfWeek, function (index, dayOfWeek) {
                html += '<th>' + dayOfWeek + '</th>';
            });

            html += '</tr>';
            html += '</thead>';
            html += '<tbody>';

            //adjust maxDate to reflect the maxSpan setting in order to
            //grey out end dates beyond the maxSpan
            if (this.endDate == null && this.maxSpan) {
                var maxLimit = this.startDate.clone().add(this.maxSpan).endOf('day');
                if (!maxDate || maxLimit.isBefore(maxDate)) {
                    maxDate = maxLimit;
                }
            }

            for (var row = 0; row < 6; row++) {
                html += '<tr>';

                // add week number
                if (this.showWeekNumbers) {
                    html += '<td class="week">' + calendar[row][0].week() + '</td>';
                } else if (this.showISOWeekNumbers) {
                    html += '<td class="week">' + calendar[row][0].isoWeek() + '</td>';
                }

                for (var col = 0; col < 7; col++) {

                    var classes = [];

                    //highlight today's date
                    if (calendar[row][col].isSame(new Date(), "day")) {
                        classes.push('today');
                    }

                    //highlight weekends
                    if (calendar[row][col].isoWeekday() > 5) {
                        classes.push('weekend');
                    }

                    //grey out the dates in other months displayed at beginning and end of this calendar
                    if (calendar[row][col].month() != calendar[1][1].month()) {
                        classes.push('off', 'ends');
                    }

                    //don't allow selection of dates before the minimum date
                    if (this.minDate && calendar[row][col].isBefore(this.minDate, 'day')) {
                        classes.push('off', 'disabled');
                    }

                    //don't allow selection of dates after the maximum date
                    if (maxDate && calendar[row][col].isAfter(maxDate, 'day')) {
                        classes.push('off', 'disabled');
                    }

                    //don't allow selection of date if a custom function decides it's invalid
                    if (this.isInvalidDate(calendar[row][col])) {
                        classes.push('off', 'disabled');
                    }

                    //highlight the currently selected start date
                    if (calendar[row][col].format('YYYY-MM-DD') == this.startDate.format('YYYY-MM-DD')) {
                        classes.push('active', 'start-date');
                    }

                    //highlight the currently selected end date
                    if (this.endDate != null && calendar[row][col].format('YYYY-MM-DD') == this.endDate.format('YYYY-MM-DD')) {
                        classes.push('active', 'end-date');
                    }

                    //highlight dates in-between the selected dates
                    if (this.endDate != null && calendar[row][col] > this.startDate && calendar[row][col] < this.endDate) {
                        classes.push('in-range');
                    }

                    //apply custom classes for this date
                    var isCustom = this.isCustomDate(calendar[row][col]);
                    if (isCustom !== false) {
                        if (typeof isCustom === 'string') {
                            classes.push(isCustom);
                        } else {
                            Array.prototype.push.apply(classes, isCustom);
                        }
                    }

                    var cname = '', disabled = false;
                    for (var i = 0; i < classes.length; i++) {
                        cname += classes[i] + ' ';
                        if (classes[i] == 'disabled') {
                            disabled = true;
                        }
                    }
                    if (!disabled) {
                        cname += 'available';
                    }

                    html += '<td class="' + cname.replace(/^\s+|\s+$/g, '') + '" data-date="' + calendar[row][col].date() + '" data-title="' + 'r' + row + 'c' + col + '">' + calendar[row][col].date() + '</td>';

                }
                html += '</tr>';
            }

            html += '</tbody>';
            html += '</table>';

            this.container.find('.drp-calendar.' + side + ' .calendar-table').html(html);

        },

        /**
         * 渲染时间选择器，左边的还是右边的
         * @param {String} side 方向 left 左边，right 右边
         */
        renderTimePicker : function (side) {
            if (side == 'right' && !this.endDate) return;

            var selected, minDate, maxDate = this.maxDate;

            if (this.maxSpan && (!this.maxDate || this.startDate.clone().add(this.maxSpan).isBefore(this.maxDate))) {
                maxDate = this.startDate.clone().add(this.maxSpan);
            }

            if (side == 'left') {
                selected = this.startDate.clone();
                minDate  = this.minDate;
            } else if (side == 'right') {
                selected = this.endDate.clone();
                minDate  = this.startDate;

                var timeSelector = this.container.find('.drp-calendar.right .calendar-time');
                if (timeSelector.html() != '') {

                    selected.hour(!isNaN(selected.hour()) ? selected.hour() : timeSelector.find('.hourselect option:selected')
                        .val());
                    selected.minute(!isNaN(selected.minute()) ? selected.minute() : timeSelector.find('.minuteselect option:selected')
                        .val());
                    selected.second(!isNaN(selected.second()) ? selected.second() : timeSelector.find('.secondselect option:selected')
                        .val());

                    if (!this.timePicker24Hour) {
                        var ampm = timeSelector.find('.ampmselect option:selected').val();
                        if (ampm === 'PM' && selected.hour() < 12) {
                            selected.hour(selected.hour() + 12);
                        }
                        if (ampm === 'AM' && selected.hour() === 12) {
                            selected.hour(0);
                        }
                    }

                }

                if (selected.isBefore(this.startDate)) {
                    selected = this.startDate.clone();
                }

                if (maxDate && selected.isAfter(maxDate)) {
                    selected = maxDate.clone();
                }

            }

            // 时
            var timeClass  = ['show-hour'];
            var timeSelect = '<div class="time-picker time-picker-hour"><div class="time-picker-title">' + this.locale.hourName + '</div><div class="time-picker-list">';
            var html       = '<select class="hourselect">';
            var start      = this.timePicker24Hour ? 0 : 1;
            var end        = this.timePicker24Hour ? 23 : 12;
            for (var i = start; i <= end; i++) {
                var i_in_24 = i;
                if (!this.timePicker24Hour) {
                    i_in_24 = selected.hour() >= 12 ? (i == 12 ? 12 : i + 12) : (i == 12 ? 0 : i);
                }

                var time     = selected.clone().hour(i_in_24);
                var disabled = false;
                if (minDate && time.minute(59).isBefore(minDate)) {
                    disabled = true;
                }
                if (maxDate && time.minute(0).isAfter(maxDate)) {
                    disabled = true;
                }

                var h = i < 10 ? '0' + i : i;
                if (i_in_24 == selected.hour() && !disabled) {
                    html += '<option value="' + i + '" selected="selected">' + h + '</option>';
                    timeSelect += '<span data-value="' + i + '" class="time-picker-item available active">' + h + '</span>';
                } else if (disabled) {
                    html += '<option value="' + i + '" disabled="disabled" class="disabled">' + h + '</option>';
                    timeSelect += '<span data-value="' + i + '" disabled="disabled" class="time-picker-item disabled">' + h + '</span>';
                } else {
                    html += '<option value="' + i + '">' + h + '</option>';
                    timeSelect += '<span data-value="' + i + '" class="time-picker-item available">' + h + '</span>';
                }
            }
            html += '</select> ';
            timeSelect += '</div></div>';

            // 分
            html += ': <select class="minuteselect" ' + (this.timePickerMinute ? '' : ' disabled') + '>';
            var timeMinuteSelect = '<div class="time-picker time-picker-minute"><div class="time-picker-title">' + this.locale.minuteName + '</div><div class="time-picker-list">';
            for (var i = 0; i < 60; i += this.timePickerIncrement) {
                var padded = i < 10 ? '0' + i : i;
                var time   = selected.clone().minute(i);

                var disabled = false;
                if (minDate && time.second(59).isBefore(minDate)) {
                    disabled = true;
                }
                if (maxDate && time.second(0).isAfter(maxDate)) {
                    disabled = true;
                }

                if (selected.minute() == i && !disabled) {
                    html += '<option value="' + i + '" selected="selected">' + padded + '</option>';
                    timeMinuteSelect += '<span data-value="' + i + '" class="time-picker-item available active">' + padded + '</span>';
                } else if (disabled) {
                    html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + '</option>';
                    timeMinuteSelect += '<span data-value="' + i + '" disabled="disabled" class="time-picker-item disabled">' + padded + '</span>';
                } else {
                    html += '<option value="' + i + '">' + padded + '</option>';
                    timeMinuteSelect += '<span data-value="' + i + '" class="time-picker-item available">' + padded + '</span>';
                }
            }

            html += '</select> ';
            timeMinuteSelect += '</div></div>';
            timeSelect += this.timePickerMinute ? timeMinuteSelect : '';
            if (this.timePickerMinute) {
                timeClass.push('show-minute');
            }

            // 秒
            if (this.timePickerSeconds) {
                timeClass.push('show-second');
                html += ': <select class="secondselect">';
                timeSelect += '<div class="time-picker time-picker-second"><div class="time-picker-title">' + this.locale.secondName + '</div><div class="time-picker-list">';

                for (var i = 0; i < 60; i++) {
                    var padded = i < 10 ? '0' + i : i;
                    var time   = selected.clone().second(i);

                    var disabled = false;
                    if (minDate && time.isBefore(minDate)) {
                        disabled = true;
                    }
                    if (maxDate && time.isAfter(maxDate)) {
                        disabled = true;
                    }

                    if (selected.second() == i && !disabled) {
                        html += '<option value="' + i + '" selected="selected">' + padded + '</option>';
                        timeSelect += '<span data-value="' + i + '" class="time-picker-item available active">' + padded + '</span>';
                    } else if (disabled) {
                        html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + '</option>';
                        timeSelect += '<span data-value="' + i + '" disabled="disabled" class="time-picker-item disabled">' + padded + '</span>';
                    } else {
                        html += '<option value="' + i + '">' + padded + '</option>';
                        timeSelect += '<span data-value="' + i + '" class="time-picker-item available">' + padded + '</span>';
                    }
                }

                html += '</select> ';
                timeSelect += '</div></div>';
            }

            // 上午/下午
            if (!this.timePicker24Hour) {
                timeClass.push('show-amp');
                timeSelect += '<div class="time-picker time-picker-amp"><div class="time-picker-title">A/PM</div><div class="time-picker-list">';
                html += '<select class="ampmselect">';

                var am_html         = '';
                var pm_html         = '';
                var amDisabledClass = ' available';
                var pmDisabledClass = ' available';
                if (minDate && selected.clone().hour(12).minute(0).second(0).isBefore(minDate)) {
                    am_html         = ' disabled="disabled" class="disabled"';
                    amDisabledClass = ' disabled';
                }

                if (maxDate && selected.clone().hour(0).minute(0).second(0).isAfter(maxDate)) {
                    pm_html         = ' disabled="disabled" class="disabled"';
                    pmDisabledClass = ' disabled';
                }

                if (selected.hour() >= 12) {
                    timeSelect += '<span data-value="AM" class="time-picker-item' + amDisabledClass + '"' + amDisabledClass + '>' + this.locale.am + '</span>';
                    timeSelect += '<span data-value="PM" class="time-picker-item active' + pmDisabledClass + '"' + pmDisabledClass + '>' + this.locale.pm + '</span>';
                    html += '<option value="AM"' + am_html + '>' + this.locale.am + '</option><option value="PM" selected="selected"' + pm_html + '>' + this.locale.pm + '</option>';
                } else {
                    timeSelect += '<span data-value="AM" class="time-picker-item active' + amDisabledClass + '"' + amDisabledClass + '>' + this.locale.am + '</span>';
                    timeSelect += '<span data-value="PM" class="time-picker-item' + pmDisabledClass + '"' + pmDisabledClass + '>' + this.locale.pm + '</span>';
                    html += '<option value="AM" selected="selected"' + am_html + '>' + this.locale.am + '</option><option value="PM"' + pm_html + '>' + this.locale.pm + '</option>';
                }

                html += '</select>';
                timeSelect += '</div></div>';
            }


            var $calendarTime = this.container.find('.drp-calendar.' + side + ' .calendar-time');
            $calendarTime.html(html);

            if (this.pickerType === 'time') {
                $calendarTime.hide();

                var name  = this.singleDatePicker ? this.locale.timeChoose : (side == 'left' ? this.locale.timeStartChoose : this.locale.timeEndChoose);
                var $wrap = this.container.find('.drp-calendar.' + side + ' .calendar-table');
                $wrap.find('.select-box').remove();
                $wrap.append('<div class="select-box"><table class="table-time-view ' + timeClass.join(' ') + '"><thead><tr><th>' + name + '</th></tr></thead><tbody><tr><td>' + timeSelect + '</td></tr></tbody></table></div>');

                // 滚动到指定位置
                this.container.find('.time-picker-item.active').each(function () {
                    var $this  = $(this);
                    var $list  = $this.closest('.time-picker-list');
                    var top    = $this.offset().top - $list.offset().top + $list.scrollTop();
                    var height = ($list.height() - $this.height()) / 2;
                    if (top > height) {
                        $list.animate({scrollTop : top - height}, 0);
                    }
                });
            }
        },

        /**
         * 更新确定按钮状态
         */
        updateFormInputs : function () {
            if (this.singleDatePicker || (this.endDate && (this.startDate.isBefore(this.endDate) || this.startDate.isSame(this.endDate)))) {
                this.container.find('button.applyBtn').prop('disabled', false);
            } else {
                this.container.find('button.applyBtn').prop('disabled', true);
            }
        },

        /**
         * 移动
         */
        move : function () {
            var containerTop;
            var containerHeight;
            var parentOffset = {
                top  : 0,
                left : 0
            };
            var drops        = this.drops;

            var parentRightEdge = $(window).width();
            if (!this.parentEl.is('body')) {
                parentOffset    = {
                    top  : this.parentEl.offset().top - this.parentEl.scrollTop(),
                    left : this.parentEl.offset().left - this.parentEl.scrollLeft()
                };
                parentRightEdge = this.parentEl[0].clientWidth + this.parentEl.offset().left;
            }

            containerHeight = this.container.outerHeight();
            switch (drops) {
                case 'auto':
                    containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top;
                    if (containerTop + containerHeight >= this.parentEl[0].scrollHeight && this.element.offset().top > containerHeight) {
                        containerTop = this.element.offset().top - containerHeight - parentOffset.top;
                        drops        = 'up';
                    }

                    break;
                case 'up':
                    containerTop = this.element.offset().top - containerHeight - parentOffset.top;
                    break;
                default:
                    containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top;
                    break;
            }

            // Force the container to it's actual width
            this.container.css({
                top   : 0,
                left  : 0,
                right : 'auto'
            });
            var containerWidth = this.container.outerWidth();

            this.container.toggleClass('drop-up', drops == 'up');

            if (this.opens == 'left') {
                var containerRight = parentRightEdge - this.element.offset().left - this.element.outerWidth();
                if (containerWidth + containerRight > $(window).width()) {
                    this.container.css({
                        top   : containerTop,
                        right : 'auto',
                        left  : 9
                    });
                } else {
                    this.container.css({
                        top   : containerTop,
                        right : containerRight,
                        left  : 'auto'
                    });
                }

                this.$arrow.css({
                    marginLeft : this.element.offset().left
                })
            } else if (this.opens == 'center') {
                var containerLeft = this.element.offset().left - parentOffset.left + this.element.outerWidth() / 2 - containerWidth / 2;
                if (containerLeft < 0) {
                    this.container.css({
                        top   : containerTop,
                        right : 'auto',
                        left  : 9
                    });
                } else if (containerLeft + containerWidth > $(window).width()) {
                    this.container.css({
                        top   : containerTop,
                        left  : 'auto',
                        right : 0
                    });
                } else {
                    this.container.css({
                        top   : containerTop,
                        left  : containerLeft,
                        right : 'auto'
                    });
                }
            } else {
                var containerLeft = this.element.offset().left - parentOffset.left;
                if (containerLeft + containerWidth > $(window).width()) {
                    this.container.css({
                        top   : containerTop,
                        left  : 'auto',
                        right : 0
                    });
                } else {
                    this.container.css({
                        top   : containerTop,
                        left  : containerLeft,
                        right : 'auto'
                    });
                }

                this.$arrow.css({
                    left : this.element.offset().left - this.container.offset().left
                })
            }

            // 修复靠右的情况下，移位的问题
            var me = this;
            clearTimeout(me.moveTimer);
            me.moveTimer = setTimeout(function () {
                if (containerHeight != me.container.outerHeight()) {
                    me.move();
                }
            });
        },

        /**
         * 显示
         * @param {Event} e
         */
        show : function (e) {
            if (this.isShowing) {
                return;
            }

            // Create a click proxy that is private to this instance of datepicker, for unbinding
            this._outsideClickProxy = $.proxy(function (e) {
                this.outsideClick(e);
            }, this);

            // Bind global datepicker mousedown for hiding and
            $(document)
                .on('mousedown.busy-admin-date-picker', this._outsideClickProxy)
                .on('touchend.busy-admin-date-picker', this._outsideClickProxy)
                .on('click.busy-admin-date-picker', '[data-toggle=dropdown]', this._outsideClickProxy)
                .on('focusin.busy-admin-date-picker', this._outsideClickProxy);

            // Reposition the picker if the window is resized while it's open
            $(window).on('resize.busy-admin-date-picker', $.proxy(function (e) {
                this.move(e);
            }, this));

            // 销毁
            $(document).one(busyAdmin.e.appRenderBefore, $.proxy(this.remove, this));

            this.oldStartDate      = this.startDate.clone();
            this.oldEndDate        = this.endDate.clone();
            this.previousRightTime = this.endDate.clone();

            this.elementChanged();
            this.container.show();
            this.move();

            // 如果是时间选择器则触发一次change事件以便能滚动到指定位置
            if (this.pickerType === 'time') {
                this.container.find('.drp-calendar.left .hourselect').trigger('change');
            }

            busyAdmin.helper.execCallback(this.options.onShow, this.element[0], [this], this.element, busyAdmin.e.datePickerShow);
            this.isShowing = true;
        },

        /**
         * 隐藏
         * @param {Event?} e
         */
        hide : function (e) {
            if (!this.isShowing) {
                return;
            }

            //incomplete date selection, revert to last values
            if (!this.endDate) {
                this.startDate = this.oldStartDate.clone();
                this.endDate   = this.oldEndDate.clone();
            }

            //if a new date range was selected, invoke the user callback function
            if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate)) {
                this.callback(this.startDate.clone(), this.endDate.clone(), this.chosenLabel);
            }

            //if picker is attached to a text input, update it
            this.updateElement();

            $(document).off('.busy-admin-date-picker');
            $(window).off('.busy-admin-date-picker');
            this.container.hide();
            busyAdmin.helper.execCallback(this.options.onHide, this.element[0], [this], this.element, busyAdmin.e.datePickerHide);
            this.isShowing = false;

            // 清理年月view的值
            this.leftCalendar.viewYear  = false;
            this.rightCalendar.viewYear = false;
        },

        /**
         * 切换show hide
         * @param {Event?} e
         */
        toggle : function (e) {
            if (this.isShowing) {
                this.hide();
            } else {
                this.show();
            }
        },

        /**
         * 外部点击关闭
         * @param {Event} e
         */
        outsideClick : function (e) {
            var target = $(e.target);
            // if the page is clicked anywhere except within the daterangerpicker/button
            // itself then call this.hide()
            if (// ie modal dialog fix
                e.type == "focusin" || target.closest(this.element).length || target.closest(this.container).length || target.closest('.calendar-table').length) {
                return;
            }

            busyAdmin.helper.execCallback(this.options.onOutsideClick, this.element[0], [this], this.element, busyAdmin.e.datePickerOutsideClick);
            this.hide();
        },

        showCalendars : function () {
            this.container.addClass('show-calendar');
            this.move();
            busyAdmin.helper.execCallback(this.options.onShowCalendar, this.element[0], [this], this.element, busyAdmin.e.datePickerShowCalendar);
        },

        hideCalendars : function () {
            this.container.removeClass('show-calendar');
            busyAdmin.helper.execCallback(this.options.onHideCalendar, this.element[0], [this], this.element, busyAdmin.e.datePickerHideCalendar);
        },

        /**
         * 范围点击
         * @param {Event} e
         */
        clickRange : function (e) {
            var label        = e.target.getAttribute('data-range-key');
            this.chosenLabel = label;
            if (label == this.locale.customRangeLabel) {
                this.showCalendars();
            } else if (label == this.locale.clearLabel) {
                this.clickClear(e);
            } else {
                var dates      = this.ranges[label];
                this.startDate = dates[0];
                this.endDate   = dates[1];

                if (!this.timePicker) {
                    this.startDate.startOf('day');
                    this.endDate.endOf('day');
                }

                if (!this.alwaysShowCalendars) {
                    this.hideCalendars();
                }
                this.clickApply();
            }
        },

        /**
         * 点击切换上一个
         * @param {Event} e
         */
        clickPrev : function (e) {
            var $target = $(e.target);
            var cal     = this.getTopWrap($target);
            var isLeft  = this.isLeft(cal);
            var isYear  = this.pickerType === 'year';
            var isMonth = this.pickerType === 'month';

            // 切换年份
            if (this.isYearPicker($target)) {
                if (isLeft) {
                    this.leftCalendar.viewYear.subtract(15, 'year');
                } else {
                    this.rightCalendar.viewYear.subtract(15, 'year');
                    if (this.linkedCalendars && isYear) {
                        this.leftCalendar.viewYear.subtract(15, 'year');
                    }
                }

                if (!isYear) {
                    this.renderYearOrMonth(isLeft, true);
                    return;
                }
            }

            // 切换月份
            else if (this.isMonthPicker($target)) {
                if (isLeft) {
                    this.leftCalendar.viewYear.subtract(1, 'year');
                } else {
                    this.rightCalendar.viewYear.subtract(1, 'year');
                    if (this.linkedCalendars && isMonth) {
                        this.leftCalendar.viewYear.subtract(1, 'year');
                    }
                }

                if (!isMonth) {
                    this.renderYearOrMonth(isLeft, false);
                    return;
                }
            }

            // 切换日期
            else {
                if (isLeft) {
                    this.leftCalendar.month.subtract(1, 'month');
                    if (this.linkedCalendars) {
                        this.rightCalendar.month.subtract(1, 'month');
                    }
                } else {
                    this.rightCalendar.month.subtract(1, 'month');
                }
            }

            this.updateCalendars();
        },

        /**
         * 点击切换下一个
         * @param {Event} e
         */
        clickNext : function (e) {
            var $target = $(e.target);
            var cal     = this.getTopWrap($target);
            var isLeft  = this.isLeft(cal);
            var isYear  = this.pickerType === 'year';
            var isMonth = this.pickerType === 'month';

            // 切换年份
            if (this.isYearPicker($target)) {
                if (isLeft) {
                    this.leftCalendar.viewYear.add(15, 'year');
                } else {
                    this.rightCalendar.viewYear.add(15, 'year');
                    if (this.linkedCalendars && isYear) {
                        this.leftCalendar.viewYear.add(15, 'year');
                    }
                }

                if (!isYear) {
                    this.renderYearOrMonth(isLeft, true);
                    return;
                }
            }

            // 切换月份
            else if (this.isMonthPicker($target)) {
                if (isLeft) {
                    this.leftCalendar.viewYear.add(1, 'year');
                } else {
                    this.rightCalendar.viewYear.add(1, 'year');
                    if (this.linkedCalendars && isMonth) {
                        this.leftCalendar.viewYear.add(1, 'year');
                    }
                }

                if (!isMonth) {
                    this.renderYearOrMonth(isLeft, false);
                    return;
                }
            }

            // 切换日期
            else {
                if (isLeft) {
                    this.leftCalendar.month.add(1, 'month');
                } else {
                    this.rightCalendar.month.add(1, 'month');
                    if (this.linkedCalendars) {
                        this.leftCalendar.month.add(1, 'month');
                    }
                }
            }

            this.updateCalendars();
        },

        /**
         * 鼠标经过日期
         * @param {Event} e
         */
        hoverDate : function (e) {
            var $target = $(e.target);
            var me      = this;

            // 禁止访问
            if (!me.isAvailable($target)) {
                return;
            }

            var cal    = me.getTopWrap($target);
            var isLeft = me.isLeft(cal);

            // 年/月份选择器
            if (me.isYearPicker($target) || me.isMonthPicker($target)) {
                if (me.pickerType === 'year') {
                    var startYear   = me.startDate.year();
                    var currentYear = $target.data('year');
                    if (!me.endDate) {
                        me.container.find('.table-year-view .col-xs-4').each(function (index, el) {
                            var $el  = $(el);
                            var year = $el.data('year');
                            if (year >= startYear && year <= currentYear) {
                                $el.addClass('in-range');
                            } else {
                                $el.removeClass('in-range');
                            }
                        });
                    }
                } else if (me.pickerType === 'month') {
                    var currentMonth = moment([$target.data('year'), $target.data('month')]);

                    if (!me.endDate) {
                        me.container.find('.table-month-view .col-xs-4').each(function (index, el) {
                            var $el   = $(el);
                            var month = moment([$el.data('year'), $el.data('month')]);
                            if (month.isSameOrAfter(me.startDate, 'month') && month.isSameOrBefore(currentMonth)) {
                                $el.addClass('in-range');
                            } else {
                                $el.removeClass('in-range');
                            }
                        });
                    }
                }

                return;
            }


            var title = $target.attr('data-title');
            var row   = title.substr(1, 1);
            var col   = title.substr(3, 1);
            var date  = isLeft ? me.leftCalendar.calendar[row][col] : me.rightCalendar.calendar[row][col];

            var leftCalendar  = me.leftCalendar;
            var rightCalendar = me.rightCalendar;
            var startDate     = me.startDate;
            if (!me.endDate) {
                me.container.find('.drp-calendar tbody td').each(function (index, el) {
                    var $el = $(el);

                    // 过滤周
                    if ($el.hasClass('week')) {
                        return;
                    }

                    var title = $el.attr('data-title');
                    var row   = title.substr(1, 1);
                    var col   = title.substr(3, 1);
                    var cal   = me.getTopWrap($el);
                    var dt    = me.isLeft(cal) ? leftCalendar.calendar[row][col] : rightCalendar.calendar[row][col];

                    if ((dt.isAfter(startDate) && dt.isBefore(date)) || dt.isSame(date, 'day')) {
                        $el.addClass('in-range');
                    } else {
                        $el.removeClass('in-range');
                    }
                });
            }
        },

        /**
         * 点击日期
         * @param {Event} e
         */
        clickDate : function (e) {
            var $target = $(e.target);

            // 不允许点击
            if (!this.isAvailable($target)) {
                return;
            }

            // 年/月份选择
            if (this.isYearPicker($target) || this.isMonthPicker($target)) {
                if (this.pickerType === 'year' || this.pickerType === 'month') {
                    this.setSelectedDate(moment([$target.data('year'), $target.data('month')]));
                } else {
                    this.monthOrYearChanged(e);
                }
            }

            // 解析日期
            else {
                var cal   = this.getTopWrap($target);
                var title = $target.attr('data-title');
                var row   = title.substr(1, 1);
                var col   = title.substr(3, 1);

                // 重复点击则关闭
                if ($target.hasClass('active') && this.singleDatePicker) {
                    this.clickApply();
                } else {
                    this.setSelectedDate(this.isLeft(cal) ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col]);
                }
            }

            e.stopPropagation();
        },

        /**
         * 选中日期
         * @param {moment} date
         */
        setSelectedDate : function (date) {
            // 如果结束时间不为空 或者 选中的时间小于开始时间
            // 则重新赋值开始时间 并 清空结束时间
            if (this.endDate || date.isBefore(this.startDate, 'day')) {
                if (this.timePicker) {
                    var hour = parseInt(this.container.find('.left .hourselect').val(), 10);
                    if (!this.timePicker24Hour) {
                        var ampm = this.container.find('.left .ampmselect').val();
                        if (ampm === 'PM' && hour < 12) {
                            hour += 12;
                        }
                        if (ampm === 'AM' && hour === 12) {
                            hour = 0;
                        }
                    }
                    var minute = parseInt(this.container.find('.left .minuteselect').val(), 10);
                    if (isNaN(minute)) {
                        minute = parseInt(this.container.find('.left .minuteselect option:last').val(), 10);
                    }
                    var second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect')
                        .val(), 10) : 0;
                    date       = date.clone().hour(hour).minute(minute).second(second);
                }
                this.endDate = null;
                this.setStartDate(date.clone());
            }

            // 如果结束时间为空 且 选中的时间小于开始时间 则 设置开始时间为结束时间
            else if (!this.endDate && date.isBefore(this.startDate)) {
                this.setEndDate(this.startDate.clone());
            }

            // 结束选择
            else {
                if (this.timePicker) {
                    var hour = parseInt(this.container.find('.right .hourselect').val(), 10);
                    if (!this.timePicker24Hour) {
                        var ampm = this.container.find('.right .ampmselect').val();
                        if (ampm === 'PM' && hour < 12) {
                            hour += 12;
                        }
                        if (ampm === 'AM' && hour === 12) {
                            hour = 0;
                        }
                    }
                    var minute = parseInt(this.container.find('.right .minuteselect').val(), 10);
                    if (isNaN(minute)) {
                        minute = parseInt(this.container.find('.right .minuteselect option:last').val(), 10);
                    }
                    var second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect')
                        .val(), 10) : 0;
                    date       = date.clone().hour(hour).minute(minute).second(second);
                }

                this.setEndDate(date.clone());
                if (!this.timePicker) {
                    this.calculateChosenLabel();
                    this.clickApply();
                }
            }

            if (this.singleDatePicker) {
                this.setEndDate(this.startDate);
                if (!this.timePicker) {
                    this.clickApply();
                }
            }

            this.updateView();
        },

        /**
         * 为自定义范围增加选中
         */
        calculateChosenLabel : function () {
            var customRange = true;
            var i           = 0;
            for (var range in this.ranges) {
                if (this.timePicker) {
                    var format = this.timePickerSeconds ? "YYYY-MM-DD HH:mm:ss" : "YYYY-MM-DD HH:mm";
                    //ignore times when comparing dates if time picker seconds is not enabled
                    if (this.startDate.format(format) == this.ranges[range][0].format(format) && this.endDate.format(format) == this.ranges[range][1].format(format)) {
                        customRange      = false;
                        this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').attr('data-range-key');
                        break;
                    }
                } else {
                    //ignore times when comparing dates if time picker is not enabled
                    if (this.startDate.format('YYYY-MM-DD') == this.ranges[range][0].format('YYYY-MM-DD') && this.endDate.format('YYYY-MM-DD') == this.ranges[range][1].format('YYYY-MM-DD')) {
                        customRange      = false;
                        this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').attr('data-range-key');
                        break;
                    }
                }
                i++;
            }
            if (customRange) {
                if (this.showCustomRangeLabel) {
                    this.chosenLabel = this.container.find('.ranges li[data-range-key="' + this.locale.customRangeLabel + '"]').addClass('active').attr('data-range-key');
                } else {
                    this.chosenLabel = null;
                }
                this.showCalendars();
            }
        },

        /**
         * 点击确认
         * @param {Event?} e
         */
        clickApply : function (e) {
            this.updateElement(true);
            busyAdmin.helper.execCallback(this.options.onApply, this.element[0], [this], this.element, busyAdmin.e.datePickerApply);
            this.hide();

            if (this.endTarget) {
                var $endTarget = $(this.endTarget);
                if ($endTarget.is(':text')) {
                    $endTarget.val('').trigger('focus.busy-admin-date-picker');
                } else {
                    $endTarget.html('').trigger('click.busy-admin-date-picker');
                }
            }
        },

        /**
         * 点击取消
         * @param {Event} e
         * @deprecated 目前已无意义
         */
        clickCancel : function (e) {
            this.startDate = this.oldStartDate;
            this.endDate   = this.oldEndDate;
            busyAdmin.helper.execCallback(this.options.onCancel, this.element[0], [this], this.element, busyAdmin.e.datePickerCancel);
            this.hide();
        },

        /**
         * 点击现在
         * @param e
         */
        clickNow : function (e) {
            this.startDate = this.getInitStartDate();
            this.endDate   = this.getInitEndDate();
            this.clickApply();
        },

        /**
         * 点击清空
         * @param e
         */
        clickClear : function (e) {
            this.triggerElementChange(this.force ? this.sourceContent : '');
            busyAdmin.helper.execCallback(this.options.onClear, this.element[0], [this], this.element, busyAdmin.e.datePickerClear);
            this.hide();
        },

        /**
         * 年月切换
         * @param {Event} e
         */
        monthOrYearChanged : function (e) {
            var $target = $(e.target);
            var isLeft  = this.isLeft(this.getTopWrap($target));
            var month   = parseInt($target.data('month'), 10);
            var year    = parseInt($target.data('year'));

            if (!isLeft) {
                if (year < this.startDate.year() || (year == this.startDate.year() && month < this.startDate.month())) {
                    month = this.startDate.month();
                    year  = this.startDate.year();
                }
            }

            if (this.minDate) {
                if (year < this.minDate.year() || (year == this.minDate.year() && month < this.minDate.month())) {
                    month = this.minDate.month();
                    year  = this.minDate.year();
                }
            }

            if (this.maxDate) {
                if (year > this.maxDate.year() || (year == this.maxDate.year() && month > this.maxDate.month())) {
                    month = this.maxDate.month();
                    year  = this.maxDate.year();
                }
            }

            if (isLeft) {
                this.leftCalendar.month.month(month).year(year);
                if (this.linkedCalendars) {
                    this.rightCalendar.month = this.leftCalendar.month.clone().add(1, 'month');
                }
            } else {
                this.rightCalendar.month.month(month).year(year);
                if (this.linkedCalendars) {
                    this.leftCalendar.month = this.rightCalendar.month.clone().subtract(1, 'month');
                }
            }

            this.updateCalendars();
        },

        /**
         * 更新右侧年份
         */
        updateRightViewYear : function (number) {
            this.rightCalendar.viewYear = this.leftCalendar.viewYear.clone().add(number, 'year');
        },

        /**
         * 切换年份选择
         * @param {Event} e
         */
        showYearView : function (e) {
            this.renderYearOrMonth(this.isLeft(this.getTopWrap($(e.target))), true);
        },

        /**
         * 渲染年份或月份
         * @param {Boolean} isLeft 是否选择左侧，否则渲染右侧
         * @param {Boolean} isYear 是否选择年份，否则渲染月份
         */
        renderYearOrMonth : function (isLeft, isYear) {
            var $wrap        = this.container.find((isLeft ? '.left ' : '.right ') + '.calendar-table');
            var calendar     = isLeft ? this.leftCalendar : this.rightCalendar;
            var isShowPicker = this.pickerType === 'year' || this.pickerType === 'month';
            var minDate      = isShowPicker ? this.minDate : (isLeft ? this.minDate : this.startDate);
            var maxDate      = this.maxDate;

            if (isShowPicker) {
                if (this.endDate == null && this.maxSpan) {
                    var maxLimit = this.startDate.clone().add(this.maxSpan).endOf(this.pickerType);
                    if (!maxDate || maxLimit.isBefore(maxDate)) {
                        maxDate = maxLimit;
                    }
                }
            }

            var maxYear      = (maxDate && maxDate.year()) || (this.maxYear);
            var minYear      = (minDate && minDate.year()) || (this.minYear);
            var currentYear  = calendar.month.year();
            var currentMonth = calendar.month.month();
            var inMinYear    = currentYear == minYear;
            var inMaxYear    = currentYear == maxYear;
            var hidePrev     = !isLeft && this.linkedCalendars && isShowPicker && !this.singleDatePicker;
            var hideNext     = isLeft && this.linkedCalendars && isShowPicker && !this.singleDatePicker;
            var temp         = '<div class="select-box">\
    <table class="table-condensed table-' + (isYear ? 'year' : 'month') + '-view">\
        <thead>\
            <tr>\
                ' + (hidePrev ? '<th></th>' : '<th class="prev"><span></span></th>') + '\
                <th class="month">_name_</th>\
                ' + (hideNext ? '<th></th>' : '<th class="next"><span></span></th>') + '\
            </tr>\
         </thead>\
        <tbody><tr><td colspan="3">_list_</td></tr></tbody>\
    </table>\
</div>';

            var year = null;
            if (calendar.viewYear) {
                year = calendar.viewYear.clone();
            }
            if (!year) {
                year = calendar.month.clone();
            }


            var yearNumber = year.year();
            var html       = '';
            var name       = '';
            if (isYear) {
                var startYear = yearNumber - 7;
                var endYear   = yearNumber + 7;
                for (var y = startYear; y <= endYear; y++) {
                    var classNames = [];

                    if (y >= minYear && y <= maxYear) {
                        classNames.push('available');
                    } else {
                        classNames.push('disabled');
                    }

                    // 年份选择器模式
                    if (this.pickerType === 'year') {
                        if (y == this.startDate.year()) {
                            classNames.push('start-date', 'active');
                        }

                        if (this.endDate != null && y == this.endDate.year()) {
                            classNames.push('end-date', 'active');
                        }

                        if (this.endDate != null && y >= this.startDate.year() && y <= this.endDate.year()) {
                            classNames.push('in-range');
                        }
                    } else {
                        if (y == currentYear) {
                            classNames.push('active');
                        }
                    }

                    html += '<span data-year="' + y + '" data-month="' + currentMonth + '" class="col-xs-4 ' + classNames.join(' ') + '">' + y + this.locale.yearName + '</span>';
                }
                name = startYear + this.locale.yearName + ' - ' + endYear + this.locale.yearName;
            } else {
                var date = year.clone().startOf('year');
                for (var m = 0; m < 12; m++) {
                    var classNames = [];

                    if ((!inMinYear || (minDate && date.isSameOrAfter(minDate, 'month'))) && (!inMaxYear || (maxDate && date.isSameOrBefore(maxDate, 'month')))) {
                        classNames.push('available');
                    } else {
                        classNames.push('disabled');
                    }


                    if (this.pickerType === 'month') {
                        if (date.isSame(this.startDate, 'month')) {
                            classNames.push('start-date', 'active');
                        }

                        if (this.endDate != null && date.isSame(this.endDate, 'month')) {
                            classNames.push('end-date', 'active');
                        }

                        if (this.endDate != null && date.isSameOrAfter(this.startDate, 'month') && date.isSameOrBefore(this.endDate, 'month')) {
                            classNames.push('in-range');
                        }
                    } else {
                        if (date.isSame(calendar.month, 'month')) {
                            classNames.push('active');
                        }
                    }

                    html += '<span data-year="' + yearNumber + '" data-month="' + m + '" class="col-xs-4 ' + classNames.join(' ') + '">' + this.locale.monthNames[m] + '</span>';
                    date.add(1, 'month');
                }
                name = yearNumber + this.locale.yearName;
            }

            temp = temp.replace('_list_', html);
            temp = temp.replace('_name_', name);
            $wrap.find('.select-box').remove();
            $wrap.append(temp);

            if (isLeft) {
                this.leftCalendar.viewYear = year;
            } else {
                this.rightCalendar.viewYear = year;
            }
        },

        /**
         * 切换月份选择
         * @param {Event} e
         */
        showMonthView : function (e) {
            this.renderYearOrMonth($(e.target).closest('.drp-calendar').hasClass('left'), false);
        },

        /**
         * 时间发生变化刷新UI
         * @param {Event} e
         */
        timeChanged : function (e) {
            var $target       = $(e.target);
            var cal           = this.getTopWrap($target);
            var isLeft        = this.isLeft(cal);
            var $hoursSelect  = cal.find('.hourselect');
            var $minuteSelect = cal.find('.minuteselect');
            var $secondSelect = cal.find('.secondselect');
            var $ampSelect    = cal.find('.ampmselect');

            // 时间picker
            if ($target.parents('.time-picker-hour').length > 0) {
                $hoursSelect.val($target.data('value')).trigger('change');
                return;
            } else if ($target.parents('.time-picker-minute').length > 0) {
                $minuteSelect.val($target.data('value')).trigger('change');
                return;
            } else if ($target.parents('.time-picker-second').length > 0) {
                $secondSelect.val($target.data('value')).trigger('change');
                return;
            } else if ($target.parents('.time-picker-amp').length > 0) {
                $ampSelect.val($target.data('value')).trigger('change');
                return;
            }

            var hour   = parseInt($hoursSelect.val(), 10);
            var minute = parseInt($minuteSelect.val(), 10);
            if (isNaN(minute)) {
                minute = parseInt($minuteSelect.find('option:last').val(), 10);
            }
            var second = this.timePickerSeconds ? parseInt($secondSelect.val(), 10) : 0;

            if (!this.timePicker24Hour) {
                var ampm = $ampSelect.val();
                if (ampm === 'PM' && hour < 12) {
                    hour += 12;
                }
                if (ampm === 'AM' && hour === 12) {
                    hour = 0;
                }
            }

            if (isLeft) {
                var start = this.startDate.clone();
                start.hour(hour);
                start.minute(minute);
                start.second(second);
                this.setStartDate(start);
                if (this.singleDatePicker) {
                    this.endDate = this.startDate.clone();
                } else if (this.endDate && this.endDate.format('YYYY-MM-DD') == start.format('YYYY-MM-DD') && this.endDate.isBefore(start)) {
                    this.setEndDate(start.clone());
                }
            } else if (this.endDate) {
                var end = this.endDate.clone();
                end.hour(hour);
                end.minute(minute);
                end.second(second);
                this.setEndDate(end);
            }

            //update the calendars so all clickable dates reflect the new time component
            this.updateCalendars();

            //update the form inputs above the calendars with the new time
            this.updateFormInputs();

            //re-render the time pickers because changing one selection can affect what's enabled in another
            this.renderTimePicker('left');
            this.renderTimePicker('right');

        },

        parseValue : function (value) {
            if (value.length <= 0) {
                return false;
            }

            var dateString = value.split(this.locale.separator);
            var start      = null;
            var end        = null;

            if (dateString.length === 2) {
                start = moment(dateString[0], this.locale.format);
                end   = moment(dateString[1], this.locale.format);
            }

            if (this.singleDatePicker || start === null || end === null) {
                start = moment(value, this.locale.format);
                end   = start;
            }

            if (start.isValid() && end.isValid()) {
                return [start, end];
            }

            return false;
        },

        /**
         * 输入框发生变化刷新UI
         */
        elementChanged : function () {
            if (this.startTarget) {
                var $startTarget = $(this.startTarget);
                var startValue;
                if ($startTarget.is(':text')) {
                    startValue = $startTarget.val().trim();
                } else {
                    startValue = $startTarget.html().trim();
                }

                var api        = $startTarget.data('busy.admin.date.picker');
                var parseStart = this.parseValue(startValue);
                if (false !== parseStart) {
                    if (this.singleDatePicker) {
                        this.minDate = parseStart[0];
                    } else {
                        this.minDate = parseStart[1];
                    }
                }

                if (api) {
                    this.maxDate = api.maxDate;
                }
            }

            var parse = this.parseValue(this.getValue());
            if (false !== parse) {
                this.setStartDate(parse[0]);
                this.setEndDate(parse[1]);
                this.updateView();
                return;
            }

            this.setStartDate(this.getInitStartDate());
            this.setEndDate(this.getInitEndDate());
            this.updateView();
        },

        /**
         * 获取初始开始时间
         * @return {moment}
         */
        getInitStartDate : function () {
            return moment();
        },

        /**
         * 获取初始结束时间
         * @return {moment}
         */
        getInitEndDate : function () {
            return moment().endOf('days');
        },

        /**
         * 键盘监听
         * @param {Event} e
         */
        keydown : function (e) {
            //hide on tab or enter
            if ((e.keyCode === 9) || (e.keyCode === 13)) {
                this.hide();
            }

            //hide on esc and prevent propagation
            if (e.keyCode === 27) {
                e.preventDefault();
                e.stopPropagation();

                this.hide();
            }
        },

        /**
         * 自动填充
         * @param {boolean?} must
         */
        updateElement : function (must) {
            if (this.autoUpdateInput || must === true) {
                var newValue = this.startDate.format(this.locale.format);
                if (!this.singleDatePicker) {
                    newValue += this.locale.separator + this.endDate.format(this.locale.format);
                }

                var value = this.getValue();
                if (newValue !== value) {
                    this.triggerElementChange(newValue);
                }
            }
        },

        /**
         * 获取元素值
         * @return {string}
         */
        getValue : function () {
            var value = '';
            if (this.element.is(':text')) {
                value = this.element.val().trim();
            } else {
                if (this.force) {
                    value = this.element.html().trim();
                } else {
                    value = (this.element.data('value') || '').trim();
                }
            }

            return value;
        },

        /**
         * 触发元素change
         */
        triggerElementChange : function (value) {
            var me = this;
            value  = value === undefined ? false : value;
            if (me.element.is(':text')) {
                if (value !== false) {
                    me.element.val(value);
                }

                me.element.busyAdminEventInput(true);
            } else {
                if (value !== false) {
                    if (this.force) {
                        me.element.html(value);
                    } else {
                        me.element.data('value', value);
                    }
                }

                busyAdmin.helper.execCallback(this.options.onChange, this.element[0], [this], this.element, busyAdmin.e.datePickerChange);
            }

            if (this.valueTarget) {
                $(this.valueTarget).each(function () {
                    var $this = $(this);

                    if ($this.is(':text')) {
                        if (value !== false) {
                            $this.val(value);
                        }

                        $this.busyAdminEventInput(true);
                    } else {
                        if (value !== false) {
                            $this.html(value);
                        }

                        busyAdmin.helper.execCallback(me.options.onChange, this, [me], $this, busyAdmin.e.datePickerChange);
                    }
                });
            }
        },

        /**
         * 卸载组件
         */
        remove : function () {
            this.container.remove();
            this.element.off('.busy-admin-date-picker');
        }
    };

    DatePicker.DEFAULTS = {
        format      : '', // 初始化组件属性，值为格式化日期的规则，支持如下规则：YYYY-MM-DD HH:mm:ss
        range       : null, // 设置是否启用范围选择，设置true则默认为-分隔符，设置字符串可自定义分隔符
        startDate   : undefined, // 设置单日历的默认时间，双日历的开始时间，支持日期规则组成的字符串
        endDate     : undefined, // 设置双日历的结束时间，支持日期规则组成的字符串
        minDate     : false, // 设置允许选择的最小时间，支持日期规则组成的字符串
        maxDate     : false, // 设置允许选择的最大时间，支持日期规则组成的字符串
        force       : null, // 针对非input触发的元素，是否强制设置值
        valueTarget : null, // 设置赋值选中值的附加元素jQuery选择器，非input会触发busy.admin.date.picker.change事件，input会触发change事件
        clear       : true, // 是否显示清空按钮，默认显示
        applyClass  : null, // 设置确认按钮的 css class 名称
        nowClass    : null, // 设置现在按钮的 css class 名称
        clearClass  : null, // 设置清空按钮的 css class 名称
        span        : null, // 设置最多允许选择的时间跨度，格式：年,月,日,时,分,秒，某一项不需要可以填0代替，支持向后省略，如：10 代表最多允许选择 10年的跨度 如：0,0,0,10 代表最多允许选择 10个小时的跨度
        drops       : 'auto', // 设置默认打开方向，支持：up: 上, down: 下, auto: 自动识别
        opens       : 'right', // 设置显示方向，支持：left: 左侧自动右侧靠边, right: 右侧自动左侧靠边, center: 中间
        input       : false, // 是否自动为元素赋值
        link        : false, // 双日历模式，是否连接左右日历
        custom      : null, // 是否显示快速range范围的自定义选项
        ranges      : undefined, // 自定义快速选择范围的window全局方法
        endTarget   : null, // 设置关联结束元素的jQuery选择器
        startTarget : null, // 设置关联开始元素的jQuery选择器

        locale : $.extend({
            direction        : 'ltr',
            format           : 'YYYY-MM-DD',
            separator        : ' - ',
            applyLabel       : '确定',
            nowLabel         : '现在',
            clearLabel       : '清空',
            weekLabel        : 'W',
            customRangeLabel : '自定义',
            daysOfWeek       : ["日", "一", "二", "三", "四", "五", "六"],
            monthNames       : ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
            yearName         : '年',
            yearChoose       : '请选择年份',
            monthChoose      : '请选择月份',
            timeChoose       : '请选择时间',
            timeStartChoose  : '选择开始时间',
            timeEndChoose    : '选择结束时间',
            secondName       : '秒',
            hourName         : '时',
            minuteName       : '分',
            am               : '上午',
            pm               : '下午',
            thisYear         : '今年',
            lastYear         : '去年',
            lastNYear        : '最近%s年',
            thisMonth        : '本月',
            lastMonth        : '上个月',
            lastNMonth       : '最近%s个月',
            todayToNow       : '今天到现在',
            lastNHours       : '最近%s小时',
            forenoon         : '上午',
            afternoon        : '上午',
            allDay           : '整天',
            lastNDay         : '最近%s天',
            today            : '今天',
            yesterday        : '昨天',
        }, ((busyAdmin.locale || {}).plugin || {}).datePicker || {})
    };

    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var api   = $this.data('busy.admin.date.picker');
            if (!api) {
                api = new DatePicker(this, typeof option === 'object' && option);
            }

            api.ready(api.show);
        });
    }


    $.fn.busyAdminDatePicker             = Plugin;
    $.fn.busyAdminDatePicker.Constructor = DatePicker;
    busyAdmin.plugins.DatePicker         = DatePicker;
    $.extend(busyAdmin.e, {
        /**
         * 日期控件显示完成触发
         */
        datePickerShow : busyAdmin.ee('show', 'date-picker'),
        /**
         * 日期控件隐藏完成触发
         */
        datePickerHide : busyAdmin.ee('hide', 'date-picker'),
        /**
         * 点击非日期控件区域的时候触发
         */
        datePickerOutsideClick : busyAdmin.ee('outside-click', 'date-picker'),
        /**
         * 日历显示完成时触发
         */
        datePickerShowCalendar : busyAdmin.ee('show-calendar', 'date-picker'),
        /**
         * 日历隐藏完成时触发
         */
        datePickerHideCalendar : busyAdmin.ee('hide-calendar', 'date-picker'),
        /**
         * 点击确定时触发
         */
        datePickerApply : busyAdmin.ee('apply', 'date-picker'),
        /**
         * 点击取消时触发
         */
        datePickerCancel : busyAdmin.ee('cancel', 'date-picker'),
        /**
         * 点击清空时触发
         */
        datePickerClear : busyAdmin.ee('clear', 'date-picker'),
        /**
         * 触发显示日历的非input元素内容发生改变时触发
         */
        datePickerChange : busyAdmin.ee('change', 'date-picker'),
    });


    // 元素绑定
    $(document).on('focus.busy-date-picker', '[data-toggle="busy-date-picker"],[busy-date-picker]', function () {
        if ($(this).is(':text') || $(this).is('button')) {
            Plugin.call($(this));
        }
    });

    // 元素绑定
    $(document).on('click.busy-date-picker', '[data-toggle="busy-date-picker"],[busy-date-picker]', function () {
        if (!$(this).is(':text') && !$(this).is('button')) {
            Plugin.call($(this));
        }
    });

    return DatePicker;
}));
(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/dialog', [core.sys.core, core.sys.jquery, core.lib.layer], factory)
}(function (busyAdmin, $) {

    var Toastr;

    // 覆盖方法
    var layerMethods = busyAdmin.helper.extends(layer.Constructor.pt, {
        vessel : function (conType, callback) {
            var me     = this;
            var config = me.config;

            // 覆盖回调，暴露api
            var success = config.success;
            var yes     = config.yes;
            var cancel  = config.cancel;
            var end     = config.end;
            var min     = config.min;
            var full    = config.full;
            var restore = config.restore;
            var moveEnd = config.moveEnd;

            config.success = function () {
                typeof success === 'function' && success.apply(me, arguments);
            };
            config.yes     = function () {
                typeof yes === 'function' && yes.apply(me, arguments);
            }
            config.cancel  = function () {
                typeof cancel === 'function' && cancel.apply(me, arguments);
            }
            config.end     = function () {
                typeof end === 'function' && end.apply(me, arguments);
            }
            config.min     = function () {
                typeof min === 'function' && min.apply(me, arguments);
            }
            config.full    = function () {
                typeof full === 'function' && full.apply(me, arguments);
            }
            config.restore = function () {
                typeof restore === 'function' && restore.apply(me, arguments);
            }
            config.moveEnd = function () {
                typeof moveEnd === 'function' && moveEnd.apply(me, arguments);
            }

            config.zIndex = busyAdmin.defaultZIndex;

            // 实现bootstrap风格的按钮
            var overCallback = function (html, titleHTML, moveElem) {
                busyAdmin.defaultZIndex = config.zIndex;

                var $element = $(html[1]);
                var $btnWrap = $element.find('.layui-layer-btn');
                var $btns    = $btnWrap.find('a[class*=layui-layer-btn]');
                $btns.each(function () {
                    var $this = $(this);
                    if ($this.hasClass('layui-layer-btn0')) {
                        $this.addClass('btn btn-primary');
                    } else {
                        $this.addClass('btn btn-default');
                    }
                });
                html[1] = $element[0].outerHTML;

                callback(html, titleHTML, moveElem);
            };

            busyAdmin.helper.override(layerMethods, 'vessel', me, [conType, overCallback]);

            return me;
        }
    });

    layer.ready = function (callback) {
        callback();
    };

    /**
     * 初始化layer
     */
    layer.config({
        anim      : 0,
        isOutAnim : false,
    });

    /**
     * 设置layer宽高
     * @param index
     * @param width
     * @param height
     */
    layer.area = function (index, width, height) {
        layer.style(index, {
            width  : width,
            height : height,
        })
    };

    /**
     * 设置layer宽
     * @param index
     * @param width
     */
    layer.width = function (index, width) {
        layer.style(index, {width : width})
    };

    /**
     * 设置layer高度
     * @param index
     * @param height
     */
    layer.height = function (index, height) {
        layer.style(index, {height : height})
    }

    /**
     * 加载等待窗
     * @param {string} message
     * @constructor
     */
    var BusyAdminPending = function (message) {
        message = (message || '').trim();

        var me              = this;
        this.message        = message;
        this.messageElement = null;
        this.layer          = null;
        this.index          = layer.open({
            type     : 1,
            resize   : false,
            title    : false,
            closeBtn : false,
            btn      : false,
            area     : 'auto',
            skin     : 'busy-admin-pending' + (this.message.length ? '' : ' busy-admin-pending-empty'),
            content  : '<div class="busy-admin-pending-icon"></div><div class="busy-admin-pending-message">' + this.message + '</div>',
            success  : function (el, index) {
                me.messageElement = el.find('.busy-admin-pending-message');
                me.layer          = this;
            }
        });
    };

    BusyAdminPending.prototype = {
        /**
         * 更新消息
         * @param {string} message 消息
         * @return {BusyAdminPending}
         */
        update : function (message) {
            message = (message || '').trim();

            if (this.layer === null) {
                return this;
            }

            if (message.length > 0) {
                this.layer.layero.removeClass('busy-admin-pending-empty');
                this.messageElement.html(message);
            } else {
                this.layer.layero.addClass('busy-admin-pending-empty');
            }

            if (this.message !== message) {
                this.message = message;
                this.layer.offset();
            }

            return this;
        },

        /**
         * 关闭消息
         */
        close : function () {
            if (this.index !== null) {
                layer.close(this.index);
                this.index = null;
            }
        }
    };

    /**
     * 打开iframe
     * @param {string | [String]} url 网址 或 数组[标题,网址]
     * @param {BusyAdminDialogIframe~closeCallback | [Number] | object?} size 宽高数组或关闭回调或配置
     * @param {BusyAdminDialogIframe~closeCallback?} close 关闭回调
     * @return {number}
     */
    var BusyAdminDialogIframe = function (url, size, close) {
        var options = {};
        if (typeof size === "function") {
            close = size;
        } else if ($.isArray(size)) {
            var width    = size[0] || 500;
            var height   = size[1] || 500;
            width        = typeof width === 'number' ? width + 'px' : width;
            height       = typeof height === 'number' ? height + 'px' : height;
            options.area = [width, height];
        } else {
            options = size || {};
        }

        if ($.isArray(url)) {
            options.title   = url[0];
            options.content = url[1];
        } else {
            options.content = url;
        }

        this.data     = null;
        this.layerApi = null;

        var me          = this;
        var success     = options.success || null;
        options.success = function (el, index) {
            var iframe = el.find('iframe');
            var win    = iframe[0].contentWindow;

            me.layerApi = this;

            // 覆盖iframe内部变量
            win.layer            = window.layer;
            win.busyAdmin.dialog = window.busyAdmin.dialog;

            // 自动获取标题
            options.title = options.title || '';
            if (options.title.length === 0) {
                layer.title(iframe[0].contentWindow.document.title, index);
                this.offset();
            }

            // 触发准备完成事件
            if (typeof win.busyAdmin.dialogIframeReady === 'function') {
                win.busyAdmin.dialogIframeReady.call(me, index);
                me.update();
            }

            typeof success === 'function' && success.call(me, el, index, iframe);
        };

        options.end = function () {
            typeof close === 'function' && close(me.data);
        };

        options.type = 2;
        options.skin = 'busy-admin-dialog';
        this.index   = layer.open(options);
    };

    BusyAdminDialogIframe.prototype = {

        /**
         * 设置关闭传值
         * @param data
         * @return {BusyAdminDialogIframe}
         */
        setData : function (data) {
            this.data = data;

            return this;
        },

        /**
         * 设置标题
         * @param title
         * @return {BusyAdminDialogIframe}
         */
        setTitle : function (title) {
            layer.title(title, this.index);

            return this;
        },

        /**
         * 设置宽高
         * @param width
         * @param height
         * @return {BusyAdminDialogIframe}
         */
        setSize : function (width, height) {
            layer.style(this.index, {
                width  : width,
                height : height
            });

            return this;
        },

        /**
         * 设置宽度
         * @param width
         * @return {BusyAdminDialogIframe}
         */
        setWidth : function (width) {
            layer.style(this.index, {
                width : width,
            });

            return this;
        },

        /**
         * 设置高度
         * @param height
         * @return {BusyAdminDialogIframe}
         */
        setHeight : function (height) {
            layer.style(this.index, {
                height : height,
            });

            return this;
        },

        /**
         * 更新Dialog
         * @return {BusyAdminDialogIframe}
         */
        update : function () {
            if (this.layerApi !== null) {
                this.layerApi.offset();
            }

            return this;
        },


        /**
         * 获取LayerApi
         * @return {layer}
         */
        getLayerApi : function () {
            return this.layerApi;
        },

        /**
         * 关闭dialog
         */
        close : function () {
            layer.close(this.index);
        }

        /**
         * 关闭回调
         * @callback BusyAdminDialogIframe~closeCallback
         * @param {any} data
         */
    };


    /**
     * 打开自定义页面对话
     * @param {string} content 页面内容
     * @param {string | object } className 对话框类名或配置
     * @param {BusyAdminDialog~callback?} success 对话框显示回调
     * @param {Function?} close 对话框关闭回调
     * @constructor
     */
    var BusyAdminDialogPage = function (content, className, success, close) {
        var options = {
            title      : false,
            scrollbar  : false,
            skin       : typeof className === 'string' ? className : '',
            closeBtn   : 0,
            move       : false,
            anim       : -1,
            shadeClose : true,
            isOutAnim  : true,
        };

        if (typeof className === 'object') {
            options = $.extend({}, options, className);
        }

        options.success = function (element, index) {
            typeof success === 'function' && success.call(this, index, this, element);
        };
        options.end     = function () {
            typeof close === 'function' && close.call(this);
        }

        options.type    = 1;
        options.content = content;
        this.index      = layer.open(options);
    };

    BusyAdminDialogPage.prototype = {
        /**
         * 关闭对话框
         */
        close : function () {
            layer.close(this.index);
        }
    };

    /**
     * 通知
     */
    var BusyAdminDialogNotify = function (options) {
        var me                = this;
        me.options            = $.extend({}, {
            closeButton : true,
            timeOut     : 2500,
        }, options || {});
        me.options.toastClass = 'toast busy-admin-notify'
        me.ready();
    }

    BusyAdminDialogNotify.prototype = {
        /**
         * 准备完成
         * @param callback
         */
        ready : function (callback) {
            var me = this;
            if (Toastr) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.toastr], function (toastTarget) {
                    Toastr = toastTarget;
                    typeof callback === 'function' && callback.call(me);
                });
            }

            return this;
        }
    };

    /**
     * Dialog
     * @constructor
     */
    var BusyAdminDialog = function () {

    }

    BusyAdminDialog.prototype = {
        /**
         * Alert弹窗
         * @param {string} message 消息内容
         * @param {BusyAdminDialog~callback | string | null | object?} type 消息图标或layer配置或确定回调
         * @param {BusyAdminDialog~callback?} ok 确认回调
         * @return {number}
         */
        alert : function (message, type, ok) {
            var options = {};
            var me      = this;
            if (typeof type === 'function') {
                ok           = type;
                options.icon = 0;
            } else if (typeof type !== 'object') {
                options.icon = this.parseIcon(type, 0);
            } else {
                options      = type;
                options.icon = this.parseIcon(options.hasOwnProperty('icon') ? options.icon : 'w', 0);
            }

            options.closeBtn = false;
            options.resize   = false;
            options.skin     = 'busy-admin-dialog';

            return layer.alert(message, $.extend({}, {
                btn : ['确定']
            }, options), function (index, el) {
                if (typeof ok === 'function' && false === ok.call(me, index, this, el)) {
                    return;
                }

                layer.close(index);
            });
        },

        /**
         * 成功Alert
         * @param {string} message 消息
         * @param {BusyAdminDialog~callback?} ok 回调
         * @return {number}
         */
        alertSuccess : function (message, ok) {
            return this.alert(message, 'success', ok);
        },

        /**
         * 失败Alert
         * @param {string} message 消息
         * @param {BusyAdminDialog~callback?} ok 回调
         * @return {number}
         */
        alertError : function (message, ok) {
            return this.alert(message, 'error', ok);
        },

        /**
         * Confirm弹窗
         * @param {string} message
         * @param {BusyAdminDialog~callback | string | null | object?} type 消息类型或确定回调
         * @param {BusyAdminDialog~callback?} ok 确定回调或取消回调
         * @param {BusyAdminDialog~callback?} cancel 取消回调
         */
        confirm : function (message, type, ok, cancel) {
            var options = {};
            var me      = this;
            if (typeof type === 'function') {
                cancel       = ok;
                ok           = type;
                options.icon = this.parseIcon(3);
            } else if (typeof type !== 'object') {
                options.icon = this.parseIcon(type, 3)
            } else {
                options      = type;
                options.icon = this.parseIcon(options.hasOwnProperty('icon') ? options.icon : 3, 3);
            }

            options.closeBtn = false;
            options.resize   = false;
            options.skin     = 'busy-admin-dialog';
            return layer.confirm(message, $.extend({}, {
                btn   : ['确认', '取消'],
                title : '确认提示'
            }, options), function (index, el) {
                if (typeof ok === 'function' && false === ok.call(me, index, this, el)) {
                    return;
                }

                layer.close(index);
            }, function (index, el) {
                if (typeof cancel === 'function' && false === cancel.call(me, index, this, el)) {
                    return false;
                }

                layer.close(index);
            });
        },

        /**
         * Prompt输入对话框
         * @param {string} title 输入提示
         * @param {string | Array} value 默认内容
         * @param {BusyAdminDialog~promptCallback | string | object} type 输入框类型或确定回调
         * @param {BusyAdminDialog~promptCallback | BusyAdminDialog~callback?} ok 确定回调
         * @param {BusyAdminDialog~callback?} cancel 取消回调
         */
        prompt : function (title, value, type, ok, cancel) {
            var options = {};
            var me      = this;
            if (typeof type === 'function') {
                cancel           = ok;
                ok               = type;
                options.formType = 0;
            } else if (typeof type !== 'object') {
                options.formType = type;
            } else {
                options = type;
            }

            options.placeholder = options.placeholder || title;
            options.value       = value;

            // 成功
            var success     = options.success || null;
            var $input;
            options.success = function (el, index) {
                $input = el.find('.form-control');
                $input.val(options.value || '').focus();
                typeof success === 'function' && success.call(this, el, index);
            };

            // 取消
            options.cancel = function (index, el) {
                if (typeof cancel === 'function' && false === cancel.call(me, index, this, el)) {
                    return false;
                }

                layer.close(index);
            };

            // 清空
            options.btn2 = options.formType === 'select' && options.rows > 0 ? function () {
                $input.find(':selected').prop('selected', false);

                me.toast('已清空');

                return false;
            } : options.cancel;

            // 确定
            options.yes = function (index, el) {
                var value = $input.val();

                // 长度验证
                if (options.formType == 'number') {
                    var val = busyAdmin.helper.float(value);
                    if (options.maxlength > 0 && val > options.maxlength) {
                        me.toast('最大不能超过' + options.maxlength);
                        $input.focus();
                        return false;
                    }

                    if (options.minlength > 0 && val < options.minlength) {
                        me.toast('不能小于' + options.minlength);
                        $input.focus();
                        return false;
                    }
                } else if (options.formType == 'select') {
                    if (options.rows) {
                        value = $.isArray(value) ? value : [];
                        if (options.maxlength > 0 && value.length > options.maxlength) {
                            me.toast('最多允许选择' + options.maxlength + '项');
                            $input.focus();
                            return false;
                        }

                        if (options.minlength > 0 && value.length < options.minlength) {
                            me.toast('至少需要选择' + options.minlength + '项');
                            $input.focus();
                            return false;
                        }
                    } else {
                        if (options.minlength > 0 && !busyAdmin.helper.float(value)) {
                            me.toast('请选择');
                            $input.focus();
                            return false;
                        }
                    }
                } else {
                    value = value.trim();
                    if (options.maxlength > 0 && value.length > options.maxlength) {
                        me.toast('最多允许输入' + options.maxlength + '个字符');
                        $input.focus();
                        return false;
                    }

                    if (options.minlength > 0 && value.length < options.minlength) {
                        me.toast('至少需要输入' + options.minlength + '个字符');
                        $input.focus();
                        return false;
                    }
                }

                if (typeof ok === 'function' && false === ok.call(me, $input.val(), index, this, $input, el)) {
                    return false;
                }

                layer.close(index);
            };

            // 控件大小
            var style = '';
            if (options.area) {
                var area = options.area;
                style    = 'style="width: ' + area[0] + '; height: ' + area[1] + ';"';
                delete options.area;
            }

            var content = '';
            switch (options.formType) {
                case 'textarea':
                    content = '<textarea class="form-control"' + style + ' placeholder="' + (options.placeholder || title) + '" rows="' + (options.rows || 2) + '"></textarea>';
                    break;
                case 'select':
                    var optionsHtml = options.selectOptions;
                    if ($.isArray(options.selectOptions)) {
                        optionsHtml = '';
                        options.selectOptions.map(function (item) {
                            if (typeof item !== 'object') {
                                optionsHtml += '<option value="' + item + '">' + item + '</option>';
                            } else {
                                optionsHtml += '<option value="' + item.value + '">' + item.name + '</option>';
                            }
                        });
                    }

                    content = '<select class="form-control" ' + (options.rows ? 'multiple size="' + options.rows : '') + '">' + optionsHtml + '</select>';
                    if (options.rows) {
                        content += '<div class="space-10"></div><div class="text-gray text-center size-12">请按<code>CTRL+鼠标左键</code> 或 <code>拖拽鼠标</code>多选</div>';
                    }
                    break;
                default:
                    content = '<input type="' + (options.formType || 'text') + '" placeholder="' + (options.placeholder || title) + '" ' + (options.numberStep ? ' step="' + options.numberStep + '"' : '') + ' class="form-control">';

            }

            return layer.open($.extend({
                type     : 1,
                title    : title,
                skin     : 'layui-layer-prompt busy-admin-dialog',
                btn      : ['确认', options.rows > 0 ? '清空' : '取消'],
                content  : content,
                maxWidth : $(window).width(),
                resize   : false
            }, options));
        },

        /**
         * Toast提示
         * @param {string} message 消息
         * @param {BusyAdminDialog~toastCallback | boolean | object?} long 是否长提示 或 配置 或 关闭回调
         * @param {BusyAdminDialog~toastCallback?} close 关闭回调
         * @return {number}
         */
        toast : function (message, long, close) {
            var options = {};
            if (typeof long === 'function') {
                close = long;
            } else if (typeof long !== 'object') {
                options.time = long ? 2500 : 1500;
            } else {
                options = long;
            }
            if (options.icon === -1 || !options.icon) {
                options.skin = 'layui-layer-hui layui-layer-msg busy-admin-dialog';
            } else {
                options.skin = 'layui-layer-msg busy-admin-dialog';
            }

            return layer.msg(message, $.extend({}, {time : 1500}, options), close);
        },

        /**
         * 成功Toast提示
         * @param {string} message 消息
         * @param {BusyAdminDialog~toastCallback?} close 关闭回调
         * @return {number}
         */
        toastSuccess : function (message, close) {
            return this.toast(message, {
                shade      : 0.1,
                shadeClose : true,
                icon       : 1,
            }, close);
        },

        /**
         * 失败Toast提示
         * @param {string} message 消息
         * @param {BusyAdminDialog~toastCallback?} close 关闭回调
         * @return {number}
         */
        toastError : function (message, close) {
            return this.toast(message, {
                shade      : 0.1,
                shadeClose : true,
                icon       : 2,
            }, close);
        },

        /**
         * 成功TIP
         * @param message
         */
        tipSuccess : function (message) {
            if (busyAdmin.getConfig('app').operateTipStyle == 'notify') {
                busyAdmin.dialog.notifySuccess(message);
            } else {
                busyAdmin.dialog.toastSuccess(message);
            }
        },

        /**
         * 失败TIP
         * @param message
         */
        tipError : function (message) {
            if (busyAdmin.getConfig('app').operateTipStyle == 'notify') {
                busyAdmin.dialog.notifyError(message);
            } else {
                busyAdmin.dialog.toastError(message);
            }
        },

        /**
         * 等待提示
         * @param message
         * @return {BusyAdminPending}
         */
        pending : function (message) {
            return new BusyAdminPending(message);
        },

        /**
         * 打开iframe
         * @param {string | Array} url 网址 或 数组[标题,网址]
         * @param {BusyAdminDialogIframe~closeCallback | Array | object} size 宽高数组或关闭回调或配置
         * @param {BusyAdminDialogIframe~closeCallback?} close 关闭回调
         * @return {BusyAdminDialogIframe}
         */
        iframe : function (url, size, close) {
            return new BusyAdminDialogIframe(url, size, close);
        },

        /**
         * 打开一个右侧边栏对话框
         * @param {string} content 页面内容
         * @param {string} className 对话框类名或配置
         * @param {BusyAdminDialog~callback?} success 对话框显示回调
         * @param {Function?} close 对话框关闭回调
         * @return {BusyAdminDialogPage}
         */
        fullRight : function (content, className, success, close) {
            className = typeof className ? ' ' + className : '';
            return new BusyAdminDialogPage(content, {
                skin   : 'busy-admin-layer-full-right busy-admin-anim busy-admin-anim-rl' + className,
                offset : 'r'
            }, success, close);
        },

        /**
         * 解析图标
         * @param type
         * @param def
         * @return {number}
         */
        parseIcon : function (type, def) {
            if (typeof type !== 'string') {
                return type === null ? -1 : type || def;
            }

            switch (type.trim().toLowerCase()) {
                case 'success':
                case 's':
                case 'y':
                case 'yes':
                    return 1;
                case 'e':
                case 'error':
                case 'n':
                case 'no':
                    return 2;
                case 'a':
                case 'ask':
                case 'q':
                case 'question':
                    return 3;
                case 'l':
                case 'lock':
                    return 4;
                case 'f':
                case 'frown':
                    return 5;
                case 'sm':
                case 'smile':
                    return 6;
                case 'w':
                case 'warn':
                case 'warning':
                default:
                    return 0;
            }
        },


        /**
         * 通用回调方法
         * @callback BusyAdminDialog~callback
         * @param {number} index dialog index，可以通过 {@see layer~close} 关闭对话框
         * @param {object} settings layer配置，参考 {@see layer~config}
         * @param {jQuery} element layer节点jQuery对象
         */


        /**
         * Toast关闭回调
         * @callback BusyAdminDialog~toastCallback
         */


        /**
         * Prompt输入对话框确定回调
         * @callback BusyAdminDialog~promptCallback
         * @param {string | Array} value 输入的内容
         * @param {number} index dialog index，可以通过 {@see layer~close} 关闭对话框
         * @param {object} settings layer配置，参考 {@see layer~config}
         * @param {jQuery} input 输入框节点jQuery对象
         * @param {jQuery} element layer节点jQuery对象
         */


        /**
         * iframe内dialog准备完成方法回调
         * @callback busyAdmin~dialogIframeReadyCallback
         * @param {number} index
         */
    };

    $.map(["Success", "Warning", "Info", "Error"], function (item) {
        var name                              = item.toLowerCase();
        BusyAdminDialogNotify.prototype[name] = function (title, message) {
            Toastr.options = this.options;
            Toastr[name](title, message);

            return this;
        }

        BusyAdminDialog.prototype["notify" + item] = function (title, message, options) {
            options = options || {};
            if (typeof message == "object") {
                options = message;
                message = title;
                title   = undefined;
            } else if (typeof message === 'function') {
                options.onHidden = message;
                message          = undefined;
            } else if (typeof options === 'function') {
                options = {onHidden : options};
            }

            return (new BusyAdminDialogNotify(options || {})).ready(function () {
                this[name](message, title);
            });
        }
    })

    /**
     * 对话框
     * @type {BusyAdminDialog}
     */
    busyAdmin.dialog = new BusyAdminDialog();

    /**
     * iframe内dialog准备完成方法
     * @type {busyAdmin~dialogIframeReadyCallback}
     */
    busyAdmin.dialogIframeReady = null;

    return BusyAdminDialog;
}));
/**
 * 富文本编辑器
 * TODO CKEditor5
 * todo 1. word转存图片
 * todo 2. 截图功能
 * todo 3. 单页切换过快会出现JS错误，不影响使用
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/editor', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    var ClassicEditor;
    var UploadConfig;
    var EditorType = {
        ck5 : 'ck5'
    }

    var Ck5ImageUploader       = function (loader, options) {
        this.loader  = loader;
        this.options = options;
    };
    Ck5ImageUploader.prototype = {
        upload : function () {
            var me = this;
            return me.loader.file.then(function (file) {
                return new Promise(function (resolve, reject) {
                    me.request = busyAdmin
                        .request(UploadConfig.url)
                        .params({
                            class_type  : me.options.classImage,
                            class_value : me.options.classValue
                        })
                        .addParam('upload', file)
                        .pending(false)
                        .progress(function (event) {
                            if (event.lengthComputable) {
                                me.loader.uploadTotal = event.total;
                                me.loader.uploaded    = event.loaded;
                            }
                        })
                        .success(function (response, type, xhr) {
                            resolve({
                                default : response.result.file_url
                            });
                            return false;
                        })
                        .error(function (response, type, xhr) {
                            reject(response.message);
                        })
                        .exec();
                });
            });
        },
        abort  : function () {
            if (this.request) {
                this.request.abort();
            }
        },
    };

    var Ck5LocalKey = 'busy.admin.editor.ck5';
    var Ck5LocalSet = function (key, data) {
        var obj  = Ck5LocalGet();
        obj[key] = data;
        localStorage.setItem(Ck5LocalKey, JSON.stringify(obj));
    }
    var Ck5LocalGet = function (key) {
        var obj = JSON.parse(localStorage.getItem(Ck5LocalKey) || '{}');
        if (!key) {
            return obj;
        }
        return obj[key];
    }

    var Editor = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        var opts    = me.options = $.extend(true, {}, Editor.DEFAULTS, me.$element.data(), options || {});

        if (me.$element.is(':input')) {
            var placeholder = me.$element.attr('placeholder');
            if (placeholder) {
                opts.placeholder = placeholder;
            }
            var name = me.$element.attr('name');
            if (name) {
                opts.name = name;
            }
        }

        if (opts.toolbar && typeof opts.toolbar === 'string') {
            opts.toolbar = $.map(opts.toolbar.split(','), function (item) {
                item = item.trim();
                if (item) {
                    return item;
                }

                return null;
            });
        }

        me.ready(me.init);
    };

    Editor.prototype = {
        /**
         * 组件已准备完成
         * @param {Function} callback
         */
        ready : function (callback) {
            var me           = this;
            var uEditorReady = window.UEDITOR_CONFIG && me.options.type != EditorType.ck5;
            var ckReady      = ClassicEditor && me.options.type == EditorType.ck5;
            if (uEditorReady || ckReady) {
                typeof callback === 'function' && callback.call(me);
            } else {
                switch (me.options.type) {
                    case EditorType.ck5:
                        // 加载语言
                        var path = busyAdmin.requirePaths[busyAdmin.lib.ckEditor5Classic].split('/');
                        path     = path[0] + '/' + path[1] + '/translations/' + me.options.locale;

                        require([busyAdmin.lib.ckEditor5Classic, path, busyAdmin.lib.uploadConfig], function (ckEditor, local, uploadConfig) {
                            ClassicEditor          = ckEditor;
                            window.CKClassicEditor = ckEditor;
                            UploadConfig           = uploadConfig;
                            typeof callback === 'function' && callback.call(me);
                        });
                        break;
                    default:
                        require([busyAdmin.lib.ueditor, busyAdmin.lib.zeroClipboard], function (ueditor, ZeroClipboard) {
                            window.ZeroClipboard                   = ZeroClipboard;
                            window.UEDITOR_CONFIG.UEDITOR_HOME_URL = busyAdmin.moduleRoot() + 'ueditor/';
                            UE.Editor.prototype.placeholder        = function (placeholder) {
                                $(this.document.body).attr('data-placeholder', placeholder);
                            };

                            typeof callback === 'function' && callback.call(me);
                        });
                }
            }
        },

        /**
         * 初始化
         */
        init : function () {
            var me   = this;
            var opts = me.options;
            if (me.isInit) {
                return;
            }

            me.isInit = true;

            // 卸载
            $(document).one(busyAdmin.e.appRenderBefore, function () {
                me.destroy();
            });

            switch (opts.type) {
                case EditorType.ck5:
                    me._initCkEditor();
                    break;
                default:
                    me._initUEditor();
            }
        },

        /**
         * 初始化cKEditor
         * @private
         */
        _initCkEditor : function () {
            var me      = this;
            var opts    = me.options;
            var configs = $.extend(true, {}, Editor.CKEDITOR_TYPES[opts.mode || 'small'] || {});
            if (opts.mode === false) {
                configs = {};
            }

            if (opts.toolbar) {
                configs.toolbar = opts.toolbar;
            }

            if (configs.toolbar && $.isArray(configs.toolbar)) {
                configs.toolbar = {
                    items                  : configs.toolbar,
                    shouldNotGroupWhenFull : true
                }
            }

            var headingOptions = [{
                "model" : "paragraph",
                "title" : "Paragraph",
                "class" : "ck-heading_paragraph"
            }];
            for (var i = 1; i < 7; i++) {
                headingOptions.push({
                    "model" : "heading" + i,
                    "view"  : "h" + i,
                    "title" : "Heading " + i,
                    "class" : "ck-heading_heading" + i
                });
            }

            var defaultOptions = {
                language      : opts.locale,
                removePlugins : ['Title', 'Markdown'],
                heading       : {
                    options : headingOptions
                },
                image         : {
                    toolbar : ["imageTextAlternative", "toggleImageCaption", "|", "imageStyle:inline", "imageStyle:wrapText", "imageStyle:breakText", "imageStyle:side", "|", "resizeImage"]
                },
                table         : {
                    contentToolbar : ["tableColumn", "tableRow", "mergeTableCells", "tableProperties", "tableCellProperties", "toggleTableCaption"]
                }
            };

            var getElement = function () {
                if (!me.$ckEl) {
                    me.$ckEl = $(me.ckEditor.ui.view.element);
                }
                return me.$ckEl;
            }

            // 自动保存
            var needAutoSave = true;
            if (opts.autoSave) {
                var autoSaveKey      = typeof opts.autoSave === 'string' ? opts.autoSave : null;
                var $autoSaveTip     = null;
                var autoSaveTipTimer = null;
                if (!autoSaveKey) {
                    autoSaveKey = (location.protocol + location.host + location.pathname).replace(/[.:\/]/g, '_')
                }
                autoSaveKey += '_drafts';

                // https://ckeditor.com/docs/ckeditor5/latest/api/module_autosave_autosave-AutosaveConfig.html
                defaultOptions.autosave = {
                    save : function (editor) {
                        if (!$autoSaveTip) {
                            $autoSaveTip = $('<div class="alert alert-info alert-sm ck-alert-auto-save-tip">本地保存成功</div>').hide();
                            getElement().find('.ck-editor__main').append($autoSaveTip);
                        }
                        return new Promise(function (resolve, reject) {
                            if (!needAutoSave) {
                                needAutoSave = true;
                                resolve();
                                return;
                            }

                            Ck5LocalSet(autoSaveKey, editor.getData());
                            $autoSaveTip.fadeIn();
                            clearTimeout(autoSaveTipTimer);
                            autoSaveTipTimer = setTimeout(function () {
                                $autoSaveTip.fadeOut();
                            }, 1500);
                            resolve();
                        });
                    },
                };
            }

            // 解决form拦截问题
            busyAdmin.formSubmitIgnore.push(function (e) {
                return $(this).hasClass('ck');
            });

            // 解决编辑器内连接被点击的问题
            busyAdmin.linkClickIgnore.push(function (e) {
                return $(this).hasClass('ck-link_selected');
            });

            // 验证提示
            me.$element.on(busyAdmin.e.verifyErrorPlacement, function (e, error) {
                getElement().after(error);
                return false;
            });

            ClassicEditor
                .create(me.element, $.extend({}, $.extend({}, defaultOptions, opts.options || {}), configs))
                .then(function (editor) {
                    me.ckEditor = editor;
                    editor.model.document.on('change:data', function () {
                        me.$element.val(me.ckEditor.getData()).busyAdminEventInput(true);
                    });

                    // 图片上传
                    editor.plugins.get('FileRepository').createUploadAdapter = function (loader) {
                        return new Ck5ImageUploader(loader, opts);
                    };

                    // 顶部吸附
                    if (busyAdmin.app.isInContent(me.$element)) {
                        var frame                = busyAdmin.app.getContentFrame();
                        editor.ui.viewportOffset = {
                            top    : frame.top,
                            right  : 0,
                            bottom : 0,
                            left   : 0
                        };
                    }

                    // 启用/禁用
                    editor.isReadOnly = me.$element.prop('disabled');

                    // 草稿箱读取
                    if (opts.autoSave && autoSaveKey) {
                        needAutoSave = false;
                        editor.setData(Ck5LocalGet(autoSaveKey) || '');
                    }

                    //editor.config._config.plugins.map((item) => {console.log(item.pluginName)});

                    busyAdmin.helper.triggerPluginReady(me.$element, 'Editor', me);
                })
                .catch(function (error) {
                    console.error(error);
                });
        },

        /**
         * 初始化UEditor
         * @private
         */
        _initUEditor : function () {
            var me       = this;
            me.elementId = me.$element.attr('id') || '';
            me.editorId  = me.elementId + '__busyAdminEditor_' + (Editor.INDEX++);
            me.$element.removeAttr('class', '');
            me.$element.attr('id', me.editorId);

            var opts    = me.options;
            var configs = $.extend(true, {}, Editor.UEDITOR_TYPES[opts.mode || 'small'] || {});
            if (opts.mode === false) {
                configs = {};
            }

            // 自定义工具栏
            if (opts.toolbar) {
                configs.toolbars = [opts.toolbar];
            }

            var options = {};
            $.extend(true, options, {
                charset                    : 'utf-8',
                wordCount                  : opts.showCount,
                enableAutoSave             : opts.autoSave,
                autoSaveKey                : opts.autoSave ? (typeof opts.autoSave === 'string' ? opts.autoSave : null) : null,
                zIndex                     : $.isNumeric(opts.zindex) ? opts.zindex : busyAdmin.zIndex(),
                catchRemoteImageEnable     : opts.catchRemoteImage,
                autoHeightEnabled          : opts.autoHeight,
                elementPathEnabled         : opts.elementPath,
                whitList                   : opts.whitList,
                lang                       : opts.locale,
                xssFilterRules             : true,
                inputXssFilter             : true,
                outputXssFilter            : true,
                insertorderedlist          : {
                    'decimal'              : '',
                    'decimal-leading-zero' : '01,02,03...',
                    'lower-alpha'          : '',
                    'upper-alpha'          : '',
                    'lower-roman'          : '',
                    'upper-roman'          : '',
                    'cjk-ideographic'      : '一,二,三...',
                },
                insertunorderedlist        : {
                    'circle' : '',
                    'disc'   : '',
                    'square' : ''
                },
                showImageOnlineManager     : opts.imageManager,
                showAttachmentOnlineManage : opts.fileManager,
                showVideoOnlineManage      : opts.videoManager,
                allowVideoUpload           : opts.videoUpload,
                autoFloatEnabled           : opts.stickyToolbar,
                topOffset                  : opts.stickyTopOffset === 'auto' ? 0 : opts.stickyTopOffset,
                toolbarTopOffset           : opts.stickyTopOffset === 'auto' ? 0 : opts.stickyTopOffset,
                textarea                   : opts.name,
                initialFrameHeight         : 100
            }, opts.options || {}, configs);

            if (opts.stickyTopOffset === 'auto') {
                if (busyAdmin.app.isInContent(me.$element)) {
                    var frame                = busyAdmin.app.getContentFrame();
                    options.topOffset        = frame.top;
                    options.toolbarTopOffset = frame.top;
                }
            }

            // 图片配置
            var imageConfig = window.UEDITOR_CONFIG.busyFileConfig[opts.classImage] || null;
            if (imageConfig) {
                options.iimageMaxSize   = imageConfig.size;
                options.imageAllowFiles = $.map(imageConfig.suffix, function (item) {
                    return '.' + item
                });
            }

            // 在模态框中移除全屏
            if (me.$element.closest('.modal').length > 0) {
                var toolbar         = options.toolbars[0] || [];
                var fullscreenIndex = toolbar.indexOf('fullscreen');
                if (fullscreenIndex != -1) {
                    toolbar = toolbar.del(fullscreenIndex);
                }
                options.toolbars = [toolbar];
            }

            me.$element.css('width', '100%');

            // 验证提示
            me.$element.on(busyAdmin.e.verifyErrorPlacement, function (e, error) {
                $('#' + me.ueditor.key).after(error);
                return false;
            });

            var toggleContents = function () {
                $(me.ueditor.document.body).toggleClass('no-has-contents', !me.ueditor.hasContents());
            };

            me.ueditor = UE.getEditor(me.editorId, options);
            me.ueditor.on('beforefullscreenchange', function (eventName, isFull) {
                if (isFull) {
                    this.options.topOffset = 0;
                } else {
                    this.options.topOffset = options.topOffset;
                }
            });
            me.ueditor.on('fullscreenchanged', function (eventName, isFull) {
                $(this.container).toggleClass('edui-fullscreen', isFull);
            });
            me.ueditor.addListener('contentchange', function () {
                me.$element.val(this.getContent('html'));
                me.$element.busyAdminEventInput(true);
                toggleContents();
            });
            me.ueditor.addListener('blur', function () {
                me.$element.trigger('blur');
            });
            me.ueditor.addListener('focus', function () {
                me.$element.trigger('focus');
            });
            me.ueditor.ready(function () {
                me.$element.attr('id', me.elementId);

                me.ueditor.execCommand('serverparam', {
                    class_file_type  : opts.classFile || 'file',
                    class_image_type : opts.classImage || 'image',
                    class_video_type : opts.classVideo || 'video',
                    class_audio_type : opts.classAudio || 'audio',
                    class_value      : opts.classValue
                });

                if (me.ueditor.getOpt('enableAutoSave')) {
                    var content = me.ueditor.getContent();
                    if (!content) {
                        me.ueditor.execCommand('drafts');
                    }
                }

                if (me.$element.prop('disabled')) {
                    me.ueditor.setDisabled();
                }

                $(me.ueditor.document.head).append('<style>body.no-has-contents::before { content: attr(data-placeholder); position: absolute; pointer-events: none; cursor: text; color: #707070; } </style>');
                me.ueditor.placeholder(me.options.placeholder);
                toggleContents();

                busyAdmin.helper.triggerPluginReady(me.$element, 'Editor', me);
            });
        },

        _api : function (ue, ck) {
            switch (this.options.type) {
                case EditorType.ck5:
                    if (!this.ckEditor) {
                        return null;
                    }
                    return typeof ck === 'function' && ck.call(this);
                default:
                    if (!this.ueditor) {
                        return null;
                    }
                    return typeof ue === 'function' && ue.call(this);
            }
        },

        getApi : function () {
            switch (this.options.type) {
                case EditorType.ck5:
                    return this.ckEditor;
                default:
                    return this.ueditor;
            }
        },

        /**
         * 获取编辑器内容
         * @param {string} type 类型
         * @return {string}
         */
        getContent : function (type) {
            return this._api(function () {
                switch (type) {
                    case 'html':
                        return this.ueditor.getContent();
                    case 'text':
                        return this.ueditor.getContentTxt();
                    default:
                        return this.ueditor.getPlainTxt();
                }
            }, function () {
                return this.ckEditor.getData();
            });
        },

        /**
         * 设置编辑器内容
         * @param {string} content 内容
         */
        setContent : function (content) {
            this._api(function () {
                this.ueditor.setContent(content + '');
            }, function () {
                this.ckEditor.setData(content + '');
            });
        },

        /**
         * 追加内容
         * @param {string} content
         */
        append : function (content) {
            this._api(function () {
                this.ueditor.setContent(content + '', true);
            }, function () {
                this.ckEditor.setData(this.ckEditor.getData() + content + '');
            });
        },

        /**
         * 验证是否包涵内容
         * @return {Boolean}
         */
        hasContent : function () {
            return this._api(function () {
                return this.ueditor.hasContents();
            }, function () {
                return this.ckEditor.getData().length > 0;
            });
        },

        /**
         * 让编辑器获得/失去焦点
         */
        setFocus : function (focus) {
            this._api(function () {
                if (focus) {
                    this.ueditor.focus();
                } else {
                    this.ueditor.blur();
                }
            }, function () {
                if (focus) {
                    this.ckEditor.focus();
                }
            });
        },

        /**
         * 设为启用/禁用
         */
        setDisabled : function (disabled) {
            this._api(function () {
                if (disabled) {
                    this.ueditor.setDisabled();
                } else {
                    this.ueditor.setEnabled();
                }
            }, function () {
                this.ckEditor.isReadOnly = disabled;
            });
        },

        setPlaceholder : function (placeholder) {
            this.options.placeholder = placeholder;
            this._api(function () {
                this.ueditor.placeholder(placeholder);
            }, function () {
                this.ckEditor.config.set('placeholder', placeholder);
                this.ckEditor.ui._initPlaceholder();
            });
        },

        /**
         * 执行命令
         * @param {...string} command 命令内容
         */
        exec : function (command) {
            var args = Array.prototype.slice.call(arguments);
            return this._api(function () {
                return this.ueditor.execCommand.apply(this.ueditor, args);
            }, function () {
                return this.ckEditor.execute.apply(this.ckEditor, args);
            });
        },

        /**
         * 销毁
         */
        destroy : function () {
            this._api(function () {
                UE.delEditor(this.editorId);
                $('#edui_fixedlayer').remove();
            }, function () {
                this.ckEditor.destroy().catch();
            });
        }
    }


    Editor.DEFAULTS = {
        type        : 'ue',
        name        : 'content',
        placeholder : '',
        classImage  : 'image', // 图片标识类型
        classVideo  : 'video', // 视频标识类型
        classAudio  : 'audio', // 音频标识类型
        classFile   : 'file', // 附件标识类型
        classValue  : '', // 附件标识值

        imageManager : false, // 是否显示在线图片管理
        videoManager : false, // 是否显示在线视频管理
        fileManager  : false, // 是否显示在线文件管理

        showCount        : false, // 是否显示字数统计
        autoSave         : false, // 是否自动保存
        zindex           : null, // 默认编辑器层级
        catchRemoteImage : true, // 是否允许抓取远程图片到本地
        videoUpload      : false, // 是否允许上传视频
        autoHeight       : false, // 是否允许自动长高
        elementPath      : false, // 是否显示元素路径
        stickyToolbar    : false, // 是否固定工具栏
        stickyTopOffset  : 'auto', // 固定工具栏上偏移

        toolbar : null,
        mode    : '',

        // XXS白名单规则
        whitList : {
            a          : ['target', 'href', 'title', 'class', 'style'],
            abbr       : ['title', 'class', 'style'],
            address    : ['class', 'style'],
            area       : ['shape', 'coords', 'href', 'alt'],
            article    : [],
            aside      : [],
            audio      : ['autoplay', 'controls', 'loop', 'preload', 'src', 'class', 'style'],
            b          : ['class', 'style'],
            bdi        : ['dir'],
            bdo        : ['dir'],
            big        : [],
            blockquote : ['cite', 'class', 'style'],
            br         : [],
            caption    : ['class', 'style'],
            center     : [],
            cite       : [],
            code       : ['class', 'style'],
            col        : ['align', 'valign', 'span', 'width', 'class', 'style'],
            colgroup   : ['align', 'valign', 'span', 'width', 'class', 'style'],
            dd         : ['class', 'style'],
            del        : ['datetime'],
            details    : ['open'],
            div        : ['class', 'style'],
            dl         : ['class', 'style'],
            dt         : ['class', 'style'],
            em         : ['class', 'style'],
            font       : ['color', 'size', 'face'],
            footer     : [],
            h1         : ['class', 'style'],
            h2         : ['class', 'style'],
            h3         : ['class', 'style'],
            h4         : ['class', 'style'],
            h5         : ['class', 'style'],
            h6         : ['class', 'style'],
            header     : [],
            hr         : [],
            i          : ['class', 'style'],
            img        : ['src', 'alt', 'title', 'width', 'height', 'id', '_src', 'loadingclass', 'class', 'data-latex'],
            ins        : ['datetime'],
            li         : ['class', 'style'],
            mark       : [],
            nav        : [],
            ol         : ['class', 'style'],
            p          : ['class', 'style'],
            pre        : ['class', 'style'],
            s          : [],
            section    : [],
            small      : [],
            span       : ['class', 'style'],
            sub        : ['class', 'style'],
            sup        : ['class', 'style'],
            strong     : ['class', 'style'],
            table      : ['width', 'border', 'align', 'valign', 'class', 'style'],
            tbody      : ['align', 'valign', 'class', 'style'],
            td         : ['width', 'rowspan', 'colspan', 'align', 'valign', 'class', 'style'],
            tfoot      : ['align', 'valign', 'class', 'style'],
            th         : ['width', 'rowspan', 'colspan', 'align', 'valign', 'class', 'style'],
            thead      : ['align', 'valign', 'class', 'style'],
            tr         : ['rowspan', 'align', 'valign', 'class', 'style'],
            tt         : [],
            u          : [],
            ul         : ['class', 'style'],
            video      : ['autoplay', 'controls', 'loop', 'preload', 'src', 'height', 'width', 'class', 'style']
        },
        locale   : 'zh-cn'
    };

    Editor.INDEX = 0;

    Editor.UEDITOR_TYPES = {
        default : {
            toolbars : [["fullscreen", "source", "|", "undo", "redo", "|", "bold", "italic", "underline", "fontborder", "strikethrough", "superscript", "subscript", "removeformat", "formatmatch", "autotypeset", "blockquote", "pasteplain", "|", "forecolor", "backcolor", "insertorderedlist", "insertunorderedlist", "selectall", "cleardoc", "|", "rowspacingtop", "rowspacingbottom", "lineheight", "|", "paragraph", "fontfamily", "fontsize", "|", "directionalityltr", "directionalityrtl", "indent", "|", "justifyleft", "justifycenter", "justifyright", "justifyjustify", "|", "touppercase", "tolowercase", "|", "link", "unlink", "anchor", "|", "imagenone", "imageleft", "imageright", "imagecenter", "|", "simpleupload", "insertimage", "attachment", "insertvideo", "scrawl", "|", "wordimage", "insertcode", "pagebreak", "map", "horizontal", "date", "time", "spechars", "|", "inserttable", "deletetable", "insertparagraphbeforetable", "insertrow", "deleterow", "insertcol", "deletecol", "mergecells", "mergeright", "mergedown", "splittocells", "splittorows", "splittocols", "|", "print", "preview", "searchreplace"]]
        },
        small   : {
            toolbars : [["fullscreen", "source", "|", "undo", "redo", "|", "bold", "italic", "underline", "fontborder", "strikethrough", "superscript", "subscript", "removeformat", "formatmatch", "autotypeset", "blockquote", "pasteplain", "|", "forecolor", "backcolor", "insertorderedlist", "insertunorderedlist", "|", "paragraph", "fontsize", "|", "indent", "justifyleft", "justifycenter", "justifyright", "justifyjustify", "|", "link", "unlink", "anchor", "|", "simpleupload", "insertimage", "scrawl", "|", "horizontal", "spechars", "|", "inserttable", "deletetable", "|", "print", "preview", "searchreplace"]],
        },
        text    : {
            toolbars          : [["source", "undo", "redo", "|", "bold", "italic", "underline", "removeformat", "formatmatch", "autotypeset", "forecolor", "link", "unlink"]],
            enableContextMenu : false,
            pasteplain        : true,
            filterTxtRules    : function () {
                function transP(node) {
                    node.tagName = 'p';
                    node.setAttr('style', '');
                    node.setAttr('class', '');
                }

                return {
                    //直接删除及其字节点内容
                    '-'       : 'script style object iframe embed input select textarea',
                    'p'       : {'$' : {}},
                    'a'       : {
                        '$' : {
                            href   : '',
                            target : '',
                            title  : ''
                        }
                    },
                    'br'      : {'$' : {}},
                    'div'     : {'$' : {}},
                    'li'      : {'$' : {}},
                    'caption' : transP,
                    'th'      : transP,
                    'tr'      : transP,
                    'h1'      : transP,
                    'h2'      : transP,
                    'h3'      : transP,
                    'h4'      : transP,
                    'h5'      : transP,
                    'h6'      : transP,
                    'td'      : function (node) {
                        //没有内容的td直接删掉
                        var txt = !!node.innerText();
                        if (txt) {
                            node.parentNode.insertAfter(UE.uNode.createText(' &nbsp; &nbsp;'), node);
                        }
                        node.parentNode.removeChild(node, node.innerText())
                    }
                }
            }()
        },
    };

    Editor.CKEDITOR_TYPES = {
        default : {
            toolbar : ["sourceEditing", "|", "undo", "redo", "|", "heading", "|", "bold", "italic", "underline", "strikethrough", "link", "superscript", "subscript", "removeFormat", "|", "fontColor", "fontBackgroundColor", "highlight", "numberedList", "bulletedList", "todoList", "|", "fontFamily", "fontSize", "|", "outdent", "indent", "|", "alignment", "|", "blockQuote", "uploadImage", "insertTable", "|", "pageBreak", "horizontalLine", "codeBlock", "specialCharacters", "selectAll", "findAndReplace"],
        },
        small   : {
            toolbar : ["sourceEditing", "|", "undo", "redo", "|", "heading", "|", "bold", "italic", "underline", "strikethrough", "link", "|", "fontColor", "fontBackgroundColor", "bulletedList", "numberedList", "alignment", "outdent", "indent", "|", "blockQuote", "uploadImage", "insertTable", "|", "horizontalLine", "specialCharacters", "findAndReplace"]
        },
        text    : {
            toolbar : ["undo", "redo", "|", "bold", "italic", "underline", "strikethrough", "link"]
        }
    };

    /**
     * @param option
     * @return {jQuery|Editor|*}
     * @constructor
     */
    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.editor.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Editor(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminEditor             = Plugin;
    $.fn.busyAdminEditor.Constructor = Editor;
    busyAdmin.plugins.Editor         = Editor;
    $.extend(busyAdmin.e, {});

    busyAdmin.autoInit('[data-toggle="busy-editor"],[busy-editor]', function () {
        Plugin.call(this);
    });

    return Editor;
}));
/**
 * 文件选择器
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/filePicker', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    var pluginIsReady = false;
    var fileConfig    = null;

    var FilePicker = function (element, options) {
        var me        = this;
        me.element    = element;
        me.$element   = $(element);
        me.options    = $.extend(true, {}, FilePicker.DEFAULTS, me.$element.data() || {}, options || {});
        me.modal      = null;
        me.$deleteBtn = null;
        me.deleteIds  = [];
        me.selectData = [];
        me.ready(me.init);
    };

    FilePicker.prototype = {
        /**
         * 组件已准备完成
         * @param {Function} callback
         */
        ready : function (callback) {
            var me = this;
            if (fileConfig) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.uploadConfig], function (uploadConfig) {
                    fileConfig = uploadConfig;
                    typeof callback === 'function' && callback.call(me);
                });
            }
        },

        /**
         * 初始化文件选择器
         */
        init : function () {
            var me   = this;
            var opts = me.options;
            if (me.isInit) {
                return;
            }

            me.isInit = true;
            me.$element.busyAdminModal({
                keyboard  : false,
                title     : opts.title,
                zindex    : opts.zindex,
                type      : 'page',
                padding   : 0,
                size      : 'lg',
                className : 'busy-admin-file-picker',
                url       : fileConfig.picker.replace('_type_', encodeURIComponent(opts.classType)).replace('_value_', encodeURIComponent(opts.classValue)).replace('_extensions_', encodeURIComponent(opts.extensions)),

                // 内容初始化
                onReady : function (modal) {
                    modal.$fileBody    = modal.$dialogBody.find('.file-list');
                    modal.$imageBody   = modal.$dialogBody.find('.image-list');
                    modal.$fileTable   = modal.$fileBody.find('table');
                    modal.$fieldType   = modal.$dialogBody.find('.field-type');
                    modal.$searchBar   = modal.$dialogBody.find('.search-bar');
                    modal.$selectRange = modal.$dialogBody.find('[name="range"]');
                    modal.$searchForm  = modal.$searchBar.find('form');
                    modal.$searchReset = modal.$searchBar.find('.btn-default');
                    me.setConfirmBtn(0);


                    // 范围切换
                    modal.$selectRange.on('change', function () {
                        if ($(this).val() === '0') {
                            modal.$fieldType.hide();
                            modal.$searchBar.removeClass('has-type');
                        } else {
                            modal.$fieldType.show();
                            modal.$searchBar.addClass('has-type');
                        }
                    }).trigger('change');


                    // 拦截表单
                    modal.$searchForm.on('submit', function () {
                        var action = $(this).attr('action');
                        var params = $(this).serialize();
                        me.reload(action + '?' + params);

                        return false;
                    });


                    // 拦截重置
                    modal.$searchReset.on('click', function (e) {
                        e.preventDefault();

                        me.reload($(this).attr('href'));

                        return false;
                    });


                    // 删除按钮
                    if (!me.$deleteBtn) {
                        me.$deleteBtn = $('<button class="btn btn-danger pull-left"><i class="fa fa-trash"></i> ' + opts.locale.delete + '</button>');
                        modal.$dialogFooter.append(me.$deleteBtn);
                    }

                    me.$deleteBtn.off('click').on('click', function () {
                        if (me.deleteIds.length === 0) {
                            busyAdmin.dialog.toast(opts.locale.pleaseSelectDeleteFile);
                            return;
                        }

                        busyAdmin.dialog.confirm(busyAdmin.helper.sprintf(opts.locale.confirmDeleteSelectFile, '<code>' + me.deleteIds.length + '</code>'), function () {
                            busyAdmin.request(busyAdmin.root() + 'system_file/delete.html')
                                .method('post')
                                .params({
                                    id : me.deleteIds.join(',')
                                })
                                .success(function (response) {
                                    // 从表格删除
                                    if (modal.$fileTable.length > 0) {
                                        modal.$fileTable.busyAdminTable('remove', {
                                            field  : 'id',
                                            values : $.map(me.deleteIds, function (item) {
                                                return item + "";
                                            })
                                        });

                                        me.getSelectData();
                                        if (modal.$fileTable.busyAdminTable('getData').length <= 0) {
                                            me.reload();
                                        }
                                    }

                                    // 从图片列表删除
                                    if (modal.$imageBody.length > 0) {
                                        $.map(me.deleteIds, function (id) {
                                            modal.$imageBody.find('.item-' + id).remove();
                                        });

                                        me.resetImageView();
                                        me.getSelectData();

                                        if (modal.$imageBody.find('.item').length <= 0) {
                                            me.reload();
                                        }
                                    }
                                }).exec();
                        });
                    });
                    me.$deleteBtn.hide();


                    // 拦截分页
                    modal.$dialogBody.find('.busy-admin-pagination').find('ul').addClass('pagination-sm').on('click', 'a', function (e) {
                        e.preventDefault();

                        var href = $(this).attr('href');
                        if (-1 === href.indexOf('javascript:')) {
                            me.reload($(this).attr('href'));
                        }

                        return false;
                    });

                    // 初始化表格
                    if (modal.$fileTable.length > 0) {
                        modal.$fileTable
                            // 数据初始化后触发
                            .on(busyAdmin.e.tableDataInit, function (e, table) {
                                // 拦截点击
                                table.columns[4].events = {
                                    // 预览
                                    'click .btn-default' : function (e, node, data) {
                                        var item = data._data.item;
                                        busyAdmin.helper.urlPreviewHandler({
                                            url   : item.url,
                                            image : function () {
                                                $(e.currentTarget).busyAdminImageViewer({
                                                    src          : item.url,
                                                    alt          : item.name,
                                                    clickHandler : false
                                                }).busyAdminImageViewer('show');
                                            },
                                            video : function () {
                                                $(e.currentTarget).busyAdminVideoViewer({
                                                    src          : item.url,
                                                    clickHandler : false
                                                }).busyAdminVideoViewer('show');
                                            },
                                            audio : function () {
                                                $(e.currentTarget).busyAdminAudioViewer({
                                                    src          : item.url,
                                                    clickHandler : false
                                                }).busyAdminAudioViewer('show');
                                            },
                                            file  : function () {
                                                window.open(item.url);
                                            }
                                        })
                                    },

                                    // 删除
                                    'click .btn-danger' : function (e, value, data, index) {
                                        $(e.currentTarget).busyAdminRequest({
                                            clickHandler : false,
                                            onSuccess    : function () {
                                                table.remove({
                                                    field  : '$index',
                                                    values : [index]
                                                });

                                                me.getSelectData();
                                                return true;
                                            }
                                        });
                                    },
                                }
                            })

                            // 表格选中
                            .on(
                                busyAdmin.e.tableCheck + ' ' +
                                busyAdmin.e.tableUncheck + ' ' +
                                busyAdmin.e.tableCheckAll + ' ' +
                                busyAdmin.e.tableUncheckAll, function () {
                                    me.getSelectData();
                                });

                        modal.$fileTable.busyAdminTable({
                            search        : false,
                            clickToSelect : true,
                            height        : modal.$fileBody,
                            pagination    : false,
                            noDataText    : opts.locale.noFile
                        });
                    }

                    // 初始化图片
                    if (modal.$imageBody.length > 0) {
                        modal.$imageBody.on('click', 'input', function (e) {
                            e.stopPropagation();

                            var $this = $(this);
                            if ($this.prop('checked')) {
                                $this.closest('.item').addClass('active');
                            } else {
                                $this.closest('.item').removeClass('active');
                            }

                            me.getSelectData();
                        });

                        modal.$imageBody.on('click', '.tool-box', function () {
                            $(this).find('input').trigger('click');
                        });

                        modal.$imageBody.on('click', 'a.preview', function (e) {
                            $(this).closest('.thumb').find('img').trigger('click');

                            return false;
                        });

                        modal.$imageBody.on('click', 'a.delete', function (e) {
                            var $item = $(this).closest('.item');

                            $(this).busyAdminRequest({
                                clickHandler : false,
                                onSuccess    : function () {
                                    $item.remove();

                                    me.resetImageView();
                                    me.getSelectData();

                                    return true;
                                }
                            });

                            return false;
                        });

                        me.resetImageView();
                    }

                    me.getSelectData();
                },

                // 显示完成回调
                onShown : function (modal) {
                    // 初始化表格
                    if (modal.$fileTable.length > 0) {
                        modal.$fileTable.busyAdminTable('ready', function () {
                            this.resetView();
                        });
                    }
                },

                // 隐藏回调
                onHide : function () {
                    // 清理
                    if (me.$deleteBtn) {
                        me.$deleteBtn.remove();
                        me.$deleteBtn = null;
                    }

                    me.deleteIds  = [];
                    me.selectData = [];
                },

                // 确认回调
                onOk : function (modal) {
                    if (me.selectData.length <= 0) {
                        busyAdmin.dialog.toast(opts.locale.pleaseSelectFile);
                        return false;
                    }

                    var count = opts.multiple ? opts.count : 1;
                    if (me.selectData.length > count && count > 0) {
                        busyAdmin.dialog.toast(busyAdmin.helper.sprintf(opts.locale.maxSelectAllowed, count));
                        return false;
                    }

                    busyAdmin.helper.execCallback(opts.success, me.element, [me.selectData], me.$element, busyAdmin.e.filePickerSuccess);

                    return true;
                }
            });
            me.$element.busyAdminModal();
            me.modal = me.$element.data('busy.admin.modal.api');
        },


        /**
         * 获取选中内容
         */
        getSelectData() {
            var me        = this;
            me.selectData = [];
            me.deleteIds  = [];

            var func = function () {
                if (me.$deleteBtn) {
                    if (me.selectData.length > 0) {
                        me.$deleteBtn.show();
                    } else {
                        me.$deleteBtn.hide();
                    }
                }
                me.setConfirmBtn();
            };


            // 文件
            if (me.modal.$fileTable.length > 0) {
                me.modal.$fileTable.busyAdminTable('ready', function () {
                    $.map(this.api.getSelections(), function (row) {
                        me.deleteIds.push(row._data.item.id);
                        me.selectData.push(row._data.item);
                    });

                    func();
                });
            }

            // 图片
            else if (me.modal.$imageBody.length > 0) {
                me.modal.$imageBody.find(':checked').each(function () {
                    var item = $(this).closest('.item').data('item');
                    me.deleteIds.push(item.id);
                    me.selectData.push(item);
                });
                func();
            }
        },


        /**
         * 设置确认按钮
         */
        setConfirmBtn() {
            var me      = this;
            var current = me.selectData.length;
            var opts    = me.options;
            var tip     = current;
            var max     = opts.count;
            if (opts.multiple) {
                if (max > 0) {
                    tip += '/' + opts.count;
                } else {
                    tip += '';
                    max = 0;
                }
            } else {
                tip += '/1';
                max = 1;
            }

            me.modal.$okBtn.html('<span class="badge">' + tip + '</span> ' + opts.locale.confirm);
            if ((current > max && max > 0) || current <= 0) {
                me.modal.$okBtn.removeClass('btn-primary').addClass('btn-secondary');
            } else {
                me.modal.$okBtn.removeClass('btn-secondary').addClass('btn-primary');
            }
        },

        /**
         * 重置图片列表
         */
        resetImageView : function () {
            var me = this;
            if (me.modal.$imageBody.find('.image-list-body .item').length <= 0) {
                me.modal.$imageBody.html('<div class="empty-info">' + me.options.locale.noPicture + '</div>');
            }
        },

        /**
         * 显示文件选择器
         */
        show : function () {
            var me = this;
            if (me.modal) {
                me.modal.show();
            }
        },

        /**
         * 重新加载内容
         * @param url
         */
        reload : function (url) {
            var me = this;
            if (me.modal) {
                me.modal.reload(url);
            }
        }
    }

    FilePicker.DEFAULTS = {
        title      : '',
        classType  : 'file',
        classValue : '',
        multiple   : false,
        extensions : '',
        count      : 9,
        success    : $.noop,
        zindex     : 'auto',

        locale : $.extend({
            noPicture               : '暂无图片',
            noFile                  : '暂无文件',
            delete                  : '删除',
            pleaseSelectDeleteFile  : '请选择要删除的文件',
            confirmDeleteSelectFile : '确认要删除选中的%s个文件吗？',
            confirm                 : '确定',
            pleaseSelectFile        : '请选择文件',
            maxSelectAllowed        : '最多允许选择%s个文件',
        }, ((busyAdmin.locale || {}).plugin || {}).filePicker || {})
    };

    /**
     * @param option
     * @return {jQuery|FilePicker|*}
     * @constructor
     */
    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.filePicker.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new FilePicker(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            } else {
                api.ready(api.show);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminFilePicker             = Plugin;
    $.fn.busyAdminFilePicker.Constructor = FilePicker;
    busyAdmin.plugins.FilePicker         = FilePicker;
    $.extend(busyAdmin.e, {
        /**
         * 选择完成触发
         */
        filePickerSuccess : busyAdmin.ee('success', 'file-picker')
    });


    $(document).on('click.busyAdmin', '[data-toggle="busy-file-picker"],[busy-file-picker]', function () {
        Plugin.call($(this));
    });

    return FilePicker;
}));
/**
 * 表单验证
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/verify', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    var pluginIsReady = false;

    /**
     * 高亮处理
     * @param un
     * @param element
     * @param errorClass
     * @param validClass
     */
    var highlight = function (un, element, errorClass, validClass) {
        var $this      = $(element);
        var $formGroup = $this.closest('.form-group');
        if ($formGroup.length > 0) {
            $formGroup.toggleClass('has-error', !un);
        }
    }

    var StringToArray = function (value, split) {
        var arr = [];
        value.split(split).map(function (item) {
            item = item.trim();
            if (item.length) {
                arr.push(item);
            }
        });

        return arr;
    }

    var DataToArray = function (value, split) {
        var list;
        try {
            list = JSON.parse(value);
        } catch (e) {
            list = StringToArray(value, split);
        }

        return $.isArray(list) ? list : [];
    }

    var Verify = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me.options  = $.extend(true, {}, Verify.DEFAULTS, me.$element.data() || {}, options || {});
        me.ready(me.init);
    };

    Verify.prototype = {
        ready : function (callback) {
            var me = this;
            if (pluginIsReady) {
                typeof callback === "function" && callback.call(me);
            } else {
                require([busyAdmin.lib.validate], function () {
                    if (!pluginIsReady) {
                        var locale           = me.options.locale;
                        // 语言
                        $.validator.messages = locale;

                        // 添加规则
                        $.validator.addMethod('phone', function (value, element) {
                            return this.optional(element) || /^(\+?86-?)?(18|15|13|14|17|16|19)[0-9]{9}$/.test(value);
                        }, locale.phone);
                        $.validator.addMethod('tel', function (value, element) {
                            return this.optional(element) || /^(010|02\d{1}|0[3-9]\d{2})-\d{7,9}(-\d+)?$/.test(value);
                        }, locale.tel);
                        $.validator.addMethod('decimal', function (value, element) {
                            return this.optional(element) || /^\d+(\.\d+)?$/.test(value);
                        }, locale.decimal);
                        $.validator.addMethod('zip', function (value, element) {
                            return this.optional(element) || /^\d{6}$/.test(value);
                        }, locale.zip);
                        $.validator.addMethod('en', function (value, element) {
                            return this.optional(element) || /^[A-Za-z]+$/.test(value);
                        }, locale.en);
                        $.validator.addMethod('enNumLine', function (value, element) {
                            return this.optional(element) || /^[A-Za-z0-9_]+$/.test(value);
                        }, locale.enNumLine);
                        $.validator.addMethod('minArray', function (value, element, param) {
                            if (param <= 0) {
                                return this.optional(element);
                            }

                            var data  = $(element).data() || {};
                            var split = data.optArraySpace || ',';
                            return this.optional(element) || DataToArray(value, split).length >= param;
                        }, locale.minArray);
                        $.validator.addMethod('maxArray', function (value, element, param) {
                            if (param <= 0) {
                                return this.optional(element);
                            }

                            var data  = $(element).data() || {};
                            var split = data.optArraySpace || ',';
                            return this.optional(element) || DataToArray(value, split).length <= param;
                        }, locale.maxArray);

                        // 覆盖方法
                        var validatorMethods = busyAdmin.helper.extends($.validator.prototype, {
                            // 没有监听change，这里补齐
                            init : function () {
                                busyAdmin.helper.override(validatorMethods, 'init', this, arguments);

                                var currentForm = this.currentForm;
                                $(this.currentForm).on('change.validate', 'input,select,textarea', function (event) {
                                    var isContentEditable = typeof $(this).attr("contenteditable") !== "undefined" && $(this).attr("contenteditable") !== "false";

                                    // Set form expando on contenteditable
                                    if (!this.form && isContentEditable) {
                                        this.form = $(this).closest("form")[0];
                                        this.name = $(this).attr("name");
                                    }

                                    // Ignore the element if it belongs to another form. This will happen mainly
                                    // when setting the `form` attribute of an input to the id of another form.
                                    if (currentForm !== this.form) {
                                        return;
                                    }

                                    var validator = $.data(this.form, "validator"), eventType = "on" + event.type.replace(/^validate/, ""), settings = validator.settings;
                                    if (settings[eventType] && !$(this).is(settings.ignore)) {
                                        settings[eventType].call(validator, this, event);
                                    }
                                });
                            },

                            // 生成ID
                            idOrName : function (element) {
                                var $this = $(element);
                                var key   = 'busy-verify-id';
                                var id    = $this.data(key);
                                if (!id) {
                                    id = '__busy_verify_element_' + (Verify.INDEX++);
                                    $this.data(key, id);
                                }

                                return id;
                            }
                        });

                        // 覆盖默认值
                        var defaultsMethods = busyAdmin.helper.extends($.validator.defaults, {
                            highlight   : function (element, errorClass, validClass) {
                                if (false === highlight(false, element, errorClass, validClass)) {
                                    return;
                                }

                                busyAdmin.helper.override(defaultsMethods, 'highlight', this, arguments);
                            },
                            unhighlight : function (element, errorClass, validClass) {
                                if (false === highlight(true, element, errorClass, validClass)) {
                                    return;
                                }

                                busyAdmin.helper.override(defaultsMethods, 'unhighlight', this, arguments);
                            },
                        });

                        // 覆盖系统规则
                        var rulesMethods = busyAdmin.helper.extends($.validator.methods, {
                            remote : function (value, element, param, method) {
                                if (this.optional(element)) {
                                    return "dependency-mismatch";
                                }

                                method       = typeof method === "string" && method || "remote";
                                var previous = this.previousValue(element, method);

                                if (!this.settings.messages[element.name]) {
                                    this.settings.messages[element.name] = {};
                                }
                                previous.originalMessage                     = previous.originalMessage || this.settings.messages[element.name][method];
                                this.settings.messages[element.name][method] = previous.message;
                                param                                        = typeof param === "string" ? {url : param} : param;
                                var optionDataString                         = $.param($.extend({data : value}, param.data));
                                if (previous.old === optionDataString) {
                                    return previous.valid;
                                }

                                previous.old = optionDataString;
                                this.startRequest(element);

                                var data         = $(element).data();
                                var errorMessage = this.defaultMessage(element, {
                                    method     : method,
                                    parameters : value
                                });

                                var api = this;
                                if (api._ajaxPending) {
                                    if (api._ajaxTask) {
                                        api._ajaxTask.abort();
                                        api._ajaxTask = null;
                                    }

                                    api._ajaxPending = false;
                                }

                                api._ajaxPending = true;
                                api._ajaxTask    = busyAdmin
                                    .request(data.optRemoteModel ? busyAdmin.getConfig('formVerify').remote : param.url)
                                    .addHeader('Busy-Admin-Plugin', 'FormVerifyRemote')
                                    .params({
                                        field         : element.name,
                                        value         : value,
                                        model         : data.optRemoteModel || '',
                                        exclude_field : data.optRemoteExcludeField || 'id',
                                        exclude_value : data.optRemoteExcludeValue || '',
                                        error_message : errorMessage
                                    })
                                    .pending(false)
                                    .before(function (jQueryXhr, ajaxSettings) {
                                        ajaxSettings.context = api.currentForm
                                    })
                                    .complete(function (response, type, xhr) {
                                        api._ajaxTask                               = null;
                                        api._ajaxPending                            = false;
                                        api.settings.messages[element.name][method] = previous.originalMessage;
                                    })
                                    .success(function (response, type, xhr) {
                                        var submitted = api.formSubmitted;
                                        api.resetInternals();
                                        api.toHide        = api.errorsFor(element);
                                        api.formSubmitted = submitted;
                                        api.successList.push(element);
                                        api.invalid[element.name] = false;
                                        api.showErrors();
                                        previous.valid = true;
                                        api.stopRequest(element, true);
                                        return false;
                                    })
                                    .error(function (response, type, xhr) {
                                        if (type === 1) {
                                            return false;
                                        }

                                        var errors                = {};
                                        errors[element.name]      = previous.message = (response.message || errorMessage);
                                        api.invalid[element.name] = true;
                                        api.showErrors(errors);
                                        previous.valid = false;
                                        api.stopRequest(element, false);
                                        return false;
                                    })
                                    .exec();

                                return 'pending';
                            }
                        });
                    }

                    pluginIsReady = true;
                    typeof callback === "function" && callback.call(me);
                });
            }
        },

        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }
            me.isInit = true;

            $(document).one(busyAdmin.e.appRenderBefore, function () {
                me.destroy();
            });

            var messages = {};
            me.$element.find(':input').each(function () {
                var $this       = $(this);
                var data        = $this.data();
                var placeholder = $this.attr('placeholder');
                var name        = $this.attr('name');
                if (!placeholder || !name || data.msg) {
                    return true;
                }

                messages[name] = {
                    required : placeholder
                }
            });

            me.$element.validate({
                messages       : messages,
                errorClass     : 'busy-form-verify-error text-danger',
                ignoreTitle    : true,
                ignore         : '',
                errorElement   : 'span',
                onkeyup        : false,
                onchange       : function (element) {
                    if (!this.checkable(element) && (element.name in this.submitted || !this.optional(element))) {
                        this.element(element);
                    }
                },
                errorPlacement : function (error, element) {
                    error.addClass('help-block');

                    // 触发自定创建错误标签事件
                    if (false === busyAdmin.helper.execCallback(null, element[0], [error], element, busyAdmin.e.verifyErrorPlacement, true, false)) {
                        return;
                    }

                    var data   = element.data();
                    var target = data.verifyMsgTarget;
                    if (target) {
                        if (typeof target === "function") {
                            target(error);
                        } else {
                            $(target).append(error);
                        }
                        return;
                    }

                    if (element.is(':checkbox') || element.is(':radio')) {
                        var $checkbox = element.closest('.checkbox-inline,.checkbox,.radio-inline,.radio');
                        if ($checkbox.length) {
                            $checkbox.parent().append(error);
                        }
                    } else {
                        var $inputGroup = element.closest('.input-group');
                        if ($inputGroup.length) {
                            error.insertAfter($inputGroup);
                        } else {
                            error.insertAfter(element);
                        }
                    }
                }
            });
        },

        /**
         * 执行验证
         * @return {boolean}
         */
        valid : function () {
            if (!pluginIsReady) {
                return false;
            }
            return this.$element.valid();
        },

        /**
         * 执行规则
         * @param command
         * @param argument
         * @return {jQuery|undefined}
         */
        rules : function (command, argument) {
            if (!pluginIsReady) {
                return undefined;
            }

            return this.$element.rules(command, argument);
        },

        /**
         * 销毁
         */
        destroy : function () {
        }
    };

    Verify.INDEX = 0;

    Verify.DEFAULTS = {
        locale : $.extend({
            required    : "必选项",
            remote      : "请检测该项",
            email       : "请输入有效邮件",
            url         : "请输入有效的网址",
            date        : "请输入有效的日期",
            dateISO     : "请输入有效的日期(ISO)",
            number      : "请输入数字",
            digits      : "请输入整数",
            equalTo     : "请再次输入相同的值",
            maxlength   : '最多允许输入{0}个字符',
            minlength   : '至少需要输入{0}个字符',
            rangelength : '输入的字符长度必须在{0}~{1}个字符内',
            range       : '输入的数字必须在{0}~{1}之间',
            max         : '不能超过{0}',
            min         : '不能小于{0}',
            step        : '输入的数值必须是{0}的倍数',
            phone       : '请输入有效的手机号',
            decimal     : '请输入有效的数值(可包涵小数)',
            zip         : '请输入有效的邮编',
            en          : '只能包涵英文字母',
            enNumLine   : '只能包涵英文、数字、下划线',
            tel         : '请输入有效的电话号码',
            minArray    : '至少需要{0}项',
            maxArray    : '最多允许{0}项',
        }, ((busyAdmin.locale || {}).plugin || {}).formVerify || {})
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.verify.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Verify(this, typeof option === 'object' && option)));
            }

            if (typeof option === "string") {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    var eventGroup                   = 'form-verify';
    $.fn.busyAdminVerify             = Plugin;
    $.fn.busyAdminVerify.Constructor = Verify;
    busyAdmin.plugins.Verify         = Verify;


    $.extend(busyAdmin.e, {
        /**
         * 自定创建错误标签事件，返回false阻止系统创建标签
         */
        verifyErrorPlacement : busyAdmin.ee('verify-error-placement', eventGroup),
    });

    // DATA-API
    busyAdmin.autoInit('[data-toggle="busy-verify"],[busy-verify]', function () {
        Plugin.call(this);
    });

    return Verify;
}));
/**
 * 自动表单
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/form', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    var argsToArr = function (argsArr) {
        return Array.prototype.slice.call(argsArr);
    }

    var apiKey = 'busy.admin.form.api';
    var Form   = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me.options  = $.extend(true, {}, Form.DEFAULTS, me.$element.data() || {}, options || {});

        var action = me.$element.attr('action');
        var method = me.$element.attr('method');
        if (!me.options.action && action) {
            me.options.action = action;
        }

        if (!me.options.method && method) {
            me.options.method = method;
        }

        if (!me.options.action) {
            me.options.action = document.URL;
        }

        if (!me.options.method) {
            me.options.method = Form.DEFAULTS.method;
        }

        me.init();
    };

    Form.prototype = {
        /**
         * 初始化
         */
        init : function () {
            var me  = this;
            var opt = me.options;

            if (me.isInit) {
                return;
            }
            me.isInit = true;

            // 拦截submit
            if (opt.submitHandler) {
                me.$element.on('submit.busyAdmin', function () {
                    me.submit();

                    return false;
                });
            }

            // 初始化验证
            if (opt.verify) {
                me.$element.busyAdminVerify(busyAdmin.helper.parseData(me.options, 'verify'));
            }
        },

        /**
         * 执行提交
         */
        submit : function () {
            var me = this;

            // 执行验证
            if (me.options.verify && !me.$element.busyAdminVerify('valid')) {
                return;
            }

            // 触发验证事件
            if (false === busyAdmin.helper.execCallback(me.options.onCheck, me.element, [], me.$element, busyAdmin.e.formCheck, true, false)) {
                return;
            }

            var confirm = me.options.confirm;
            if (confirm) {
                busyAdmin.dialog.confirm(confirm, function () {
                    me.request();
                });
            } else {
                me.request();
            }
        },

        /**
         * 执行请求
         * @return {BusyAdminRequestTask}
         */
        request : function () {
            var me  = this;
            var opt = me.options;
            return busyAdmin
                .request(opt.action)
                .pending(opt.pending, opt.pendingMessage)
                .method(opt.method)
                .params(me.$element)
                .before(function (xhr, settings) {
                    return false !== busyAdmin.helper.execCallback(opt.onBefore, me.element, argsToArr(arguments), me.$element, busyAdmin.e.formBefore, true, false);
                })
                .complete(function (result, type, xhr) {
                    return false !== busyAdmin.helper.execCallback(opt.onComplete, me.element, argsToArr(arguments), me.$element, busyAdmin.e.formComplete, true, false);
                })
                .success(function (result, type, xhr) {
                    if (false === busyAdmin.helper.execCallback(opt.onSuccess, me.element, argsToArr(arguments), me.$element, busyAdmin.e.formSuccess, true, false)) {
                        return false;
                    }

                    if (opt.onSuccess === false) {
                        return false;
                    }

                    busyAdmin.dialog.tipSuccess(result.message);
                    busyAdmin.dispatchSugar(me.element, opt.onSuccess, result, []);

                    return false;
                })
                .error(function (result, type, xhr) {
                    if (false === busyAdmin.helper.execCallback(opt.onError, me.element, argsToArr(arguments), me.$element, busyAdmin.e.formError, true, false)) {
                        return false;
                    }

                    if (opt.onError === false) {
                        return false;
                    }

                    busyAdmin.dialog.tipError(result.message);
                    busyAdmin.dispatchSugar(me.element, opt.onError, result, []);

                    return false;
                })
                .exec();
        },

        /**
         * 重置表单
         */
        reset : function () {
            this.element.reset();
            this.$element.trigger('reset');
        },

        /**
         * 销毁
         */
        destroy : function () {
            this.$element.off('submit.busyAdmin');

            if (this.options.verify) {
                this.$element.busyAdminVerify('destroy');
            }
        }
    };

    Form.DEFAULTS = {
        confirm        : '',    // 提交前询问的内容
        pending        : true, // 是否显示loading对话框
        pendingMessage : '',    // 提交等待提示文案
        method         : 'post', // 提交方式
        action         : '',    // 提交地址
        verify         : true, // 是否开启验证
        submitHandler  : true, // 是否拦截submit事件

        // 回调
        onCheck    : $.noop,
        onBefore   : $.noop, // 提交前回调
        onSuccess  : $.noop, // 提交成功回调
        onError    : $.noop, // 提交失败回调
        onComplete : $.noop, // 提交完成回调
    };


    function Plugin(option) {
        var ret;
        var args = argsToArr(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(apiKey);

            if (!api) {
                $this.data(apiKey, (api = new Form(this, typeof option === 'object' && option)));
            }

            if (typeof option === "string") {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminForm             = Plugin;
    $.fn.busyAdminForm.Constructor = Form;
    busyAdmin.plugins.Form         = Form;
    busyAdmin.regSugar('form', function (element, method, result, args) {
        var me = $(element).data(apiKey);
        if (me instanceof Form) {
            me[method].apply(me, args);
            return;
        }

        // Modal中的form
        me = $(element).data(busyAdmin.plugins.Modal.KEY);
        if (me instanceof busyAdmin.plugins.Modal) {
            me = me.$form.data(apiKey);
            if (me instanceof Form) {
                me[method].apply(me, args);
            }
        }
    });

    var eventGroup = 'form';
    $.extend(busyAdmin.e, {
        /**
         * 提交前验证事件，会在confirm对话框显示前触发
         */
        formCheck : busyAdmin.ee('check', eventGroup),
        /**
         * 请求前触发
         */
        formBefore : busyAdmin.ee('before', eventGroup),
        /**
         * 请求完成触发
         */
        formComplete : busyAdmin.ee('complete', eventGroup),
        /**
         * 请求成功触发
         */
        formSuccess : busyAdmin.ee('success', eventGroup),
        /**
         * 请求失败触发
         */
        formError : busyAdmin.ee('error', eventGroup),
    });

    busyAdmin.autoInit('[data-toggle="busy-form"],[busy-form]', function () {
        Plugin.call(this);
    });

    return Form;
}));
/**
 * 代码高亮
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/high', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    var highlight = null;

    var High = function (element, options) {
        this.$element = $(element);
        this.$wrap    = null;
        this.options  = $.extend(true, {}, High.DEFAULTS, this.$element.data() || {}, options || {});
        this.ready(this.init);
    };

    High.prototype = {
        /**
         * 组件已准备完成
         * @param {Function} callback
         */
        ready : function (callback) {
            var me = this;
            if (highlight) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.highlight], function (highlightTarget) {
                    highlight = highlightTarget;

                    typeof callback === 'function' && callback.call(me);
                });
            }
        },

        /**
         * 初始化
         */
        init : function () {
            this.$wrap = $(High.parse(this.$element.html(), this.options.type, '', this.options.locale.copy));
            this.$element.hide().after(this.$wrap);

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(this.$element, 'High', this);
        },

        /**
         * 重新加载
         */
        reload : function () {
            if (this.$wrap) {
                this.$wrap.remove();
            }

            this.init();
        }
    };

    High.DEFAULTS = {
        type : 'auto',

        // 语言
        locale : $.extend({
            copy : '复制',
        }, ((busyAdmin.locale || {}).plugin || {}).highCode || {})
    };

    /**
     * 注入highlight对象
     * @type {{highlight}}
     */
    High.highlight = null;

    /**
     * 解析代码
     * @param content
     * @param type
     * @param wrapClasses
     * @param copyLang
     */
    High.parse = function (content, type, wrapClasses, copyLang) {
        if (highlight === null) {
            highlight = High.highlight;
        }

        var value;
        var classes = '';
        var id      = busyAdmin.helper.uuid();

        content = (content || '').trim();
        if (typeof type === 'string' && type && type !== 'auto') {
            value   = highlight.highlight(type, content).value;
            classes = type;
        } else {
            type  = 'code';
            value = highlight.highlightAuto(content).value;
        }


        value = '<ol><li>' + value.replace(/\n/g, '</li><li>') + '</li></ol>';

        return '<div class="busy-admin-high-code ' + (wrapClasses || '') + '"><div class="busy-admin-high-code-title"><a href="javascript:void(0)" class="pull-right" data-toggle="busy-copy" data-target="#' + id + '" data-on-decode="html">' + (copyLang || '复制') + '</a>' + type + '</div><pre><code class="hljs ' + classes + '">' + value + '</code></pre><script type="text/plain" id="' + id + '">' + busyAdmin.helper.htmlEncode(content) + '</script></div>';
    };


    function Plugin(option) {
        var key  = 'busy.admin.highlight.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        return this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new High(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                if (option === 'ready') {
                    api.ready.apply(api, args);
                } else {
                    api.ready(function () {
                        this[option].apply(this, args);
                    });
                }
            }
        });
    }

    $.fn.busyAdminHighCode             = Plugin;
    $.fn.busyAdminHighCode.Constructor = High;
    busyAdmin.plugins.High             = High;
    busyAdmin.autoInit('[data-toggle="busy-high-code"],[busy-high-code]', function () {
        Plugin.call(this);
    });

    return High;
}));
/**
 * 图标选择器
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/iconPicker', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    var iconData;

    var IconPicker = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me.options  = $.extend(true, {}, IconPicker.DEFAULTS, me.$element.data() || {}, options || {});
        me.ready(me.init);
    };

    IconPicker.prototype = {
        /**
         * 准备完成
         * @param callback
         */
        ready : function (callback) {
            var me = this;
            if (iconData) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require(['bicon/busy-icon-data'], function (data) {
                    iconData = data;
                    typeof callback === 'function' && callback.call(me);
                });
            }
        },

        /**
         * 初始化
         */
        init : function () {
            var me  = this;
            var opt = me.options;
            if (me.isInit) {
                return;
            }

            me.isInit = true;

            if (opt.clickHandler) {
                me.$element.on('click.busyAdmin', function (e) {
                    e.preventDefault();

                    me.show();

                    return false;
                });
            }

            var tabItems    = '';
            var tabContents = '';
            var index       = 0;
            for (var key in iconData) {
                var item   = iconData[key];
                var active = index === 0 ? ' active' : '';
                var id     = '__busy_admin_icon_tab' + index;

                tabItems += '<li class="' + active + '"><a href="#' + id + '" data-toggle="tab">' + item.name + ' <span class="badge badge-primary">' + item.list.length + '</span></a></li>';
                tabContents += '<div class="tab-pane' + active + '" id="' + id + '"><ul>';
                item.list.map(function (vo) {
                    var icon = key + ' ' + key + '-' + vo;
                    tabContents += '<li><span class="keyword hide">' + vo + '</span><a href="javascript:void(0);" icon="' + icon + '"><i class="' + icon + '"></i><span>' + vo + '</span></a></li>'
                });
                tabContents += '</ul></div>';
                index++;
            }
            me.$content = $('<div><ul class="nav nav-lines nav-justified">' + tabItems + '</ul><div class="form-horizontal"><input type="text" class="form-control" placeholder="' + opt.locale.search + '"/></div><div class="tab-content">' + tabContents + '</div></div>');
            me.$element.busyAdminModal({
                type      : 'page',
                content   : me.$content,
                title     : opt.locale.title,
                className : 'busy-admin-icon-picker',
                cancel    : opt.locale.clear,
                onCancel  : function () {
                    me._setValue('');
                    me.$element.busyAdminModal('hide');
                    busyAdmin.helper.execCallback(me.options.onClear, me.element, [], me.$element, busyAdmin.e.iconPickerClear)
                },
                padding   : 0,
                onShown   : function () {
                    me.$content.on('click', '[icon]', function () {
                        var icon = $(this).attr('icon');
                        me._setValue(icon);
                        me.$element.busyAdminModal('hide');
                    });

                    // 搜索
                    me.$content.on('input', '.form-control', function () {
                        var $this = $(this);
                        var value = $this.val().trim();
                        if (!value) {
                            me.$content.find('.keyword').parent().show();
                            return;
                        }

                        me.$content.find('.keyword:contains(' + value + ')').parent().show();
                        me.$content.find('.keyword:not(:contains(' + value + '))').parent().hide();
                    });

                    var value;
                    if (me.$element.is(':input')) {
                        value = me.$element.val().trim();
                    }

                    if (!value && opt.target) {
                        $(opt.target).each(function () {
                            var $this = $(this);
                            if ($this.is(":input")) {
                                value = $this.val().trim();
                            } else {
                                value = $this.attr('class');
                            }

                            if (value) {
                                return false;
                            }
                        });
                    }

                    me.$content.find('.active[icon]').removeClass('active');

                    var $current = me.$content.find('[icon="' + value + '"]').addClass('active');
                    var id       = $current.closest('.tab-pane').attr('id');
                    if (id) {
                        var $tabContent = $current.closest('.tab-content');
                        me.$content.find('[href="#' + id + '"]').trigger('click');
                        $tabContent.scrollTop($current.offset().top - $tabContent.offset().top + $tabContent.scrollTop());
                    }
                }
            });
        },

        /**
         * 设置值
         * @private
         */
        _setValue : function (icon) {
            var me = this;
            if (me.$element.is(':input')) {
                me.$element.val(icon).busyAdminEventInput(true);
            }

            if (me.options.target) {
                $(me.options.target).each(function () {
                    var $this = $(this);
                    if ($this.is(':input')) {
                        $this.val(icon).busyAdminEventInput(true);
                    } else {
                        $this.removeAttr('class').addClass(icon || 'icon-placeholder');
                    }
                });
            }

            busyAdmin.helper.execCallback(me.options.onSelect, me.element, [icon], me.$element, busyAdmin.e.iconPickerSelect)
        },

        /**
         * 显示对话框
         */
        show : function () {
            var me = this;
            me.ready(function () {
                me.$element.busyAdminModal('show');
            });
        }
    };

    IconPicker.DEFAULTS = {
        clickHandler : true,
        target       : null,

        locale : $.extend({}, {
            title  : '图标选择器',
            clear  : '清空',
            search : '搜索图标',
        }, ((busyAdmin.locale || {}).plugin || {}).iconPicker || {}),
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.iconPicker.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new IconPicker(this, typeof option === 'object' && option)));
            }

            if (typeof option === "string") {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminIconPicker             = Plugin;
    $.fn.busyAdminIconPicker.Constructor = IconPicker;
    busyAdmin.plugins.IconPicker         = IconPicker;

    var eventGroup = 'icon-picker';
    $.extend(busyAdmin.e, {
        iconPickerSelect : busyAdmin.ee('select', eventGroup),
        iconPickerClear  : busyAdmin.ee('clear', eventGroup),
    });

    $(document).on('focus.busyAdmin', ':input[data-toggle="busy-icon-picker"],:input[busy-icon-picker]', function () {
        var $this = $(this);
        Plugin.call($this, {clickHandler : false});
        Plugin.call($this, 'show');
    });

    $(document).on('click.busyAdmin', '[data-toggle="busy-icon-picker"]:not(:input),[busy-icon-picker]:not(:input)', function () {
        var $this = $(this);
        Plugin.call($this, {clickHandler : false});
        Plugin.call($this, 'show');
    });

    return IconPicker;
}));
/**
 * 图片预览
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/imageViewer', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {

    /**
     * 构造
     * @param {HTMLElement} element
     * @param {Object} options
     * @constructor
     */
    var ImageViewer = function (element, options) {
        var me      = this;
        me.element  = element;
        me.isSingle = false;
        me.$element = $(element);
        me.$img     = null;
        me.options  = $.extend(true, {}, ImageViewer.DEFAULTS, me.$element.data() || {}, options || {});
        me.api      = null;
        me.$body    = $('body');
        me.ready(me.init);
    };


    ImageViewer.prototype = {
        /**
         * 准备完成
         * @param {Function} callback
         */
        ready : function (callback) {
            var me = this;
            if ($.fn.viewer) {
                callback.call(me);
            } else {
                require([busyAdmin.lib.imageViewer], function () {
                    callback.call(me);
                });
            }
        },


        /**
         * 初始化
         */
        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }
            me.isInit = true;

            // 页面销毁监听
            $(document).on(busyAdmin.e.appRenderBefore, function () {
                me.destroy();
            });

            me.options.button = me.options.showClose;
            me.options.navbar = me.options.thumbs;
            me.options.url    = 'data-src';
            me.options.zIndex = 19900521;

            // 直接指定src，代表当前节点不是图片或子节点无图片
            if (me.options.src) {
                me.$img = $('<img data-src="' + me.options.src + '" style="display: none;" alt="' + me.options.alt + '"/>');
                me.$element.append(me.$img);
                me.isSingle = true;
            } else {
                me.isSingle = me.element.tagName.toLowerCase() === 'img';
            }

            // 单图
            if (me.isSingle) {
                me.options.navbar = false;

                // 显示工具栏
                if (typeof me.options.control === 'boolean') {
                    me.options.toolbar = me.options.control;
                } else {
                    me.options.toolbar = false;
                }
            } else {
                // 显示工具栏
                if (typeof me.options.control === 'boolean') {
                    me.options.toolbar = me.options.control;
                } else {
                    me.options.toolbar = true;
                }
            }

            // 初始化
            me.$element.viewer(me.options);
            me.api = me.$element.data('viewer');

            // 直接指定src，为其绑定点击事件
            if (me.options.src && me.options.clickHandler) {
                me.$element.off('click').on('click', function () {
                    me.show();
                });
            }

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'ImageViewer', me);
        },

        /**
         * 显示预览
         * @param {number?} index 预览第几张图片
         */
        show : function (index) {
            this.api.view(index || 0);
        },


        /**
         * 隐藏预览
         */
        hide : function () {
            this.api.hide();
        },


        /**
         * 更新预览，一般用于当图片地址发生变化时
         * @param {{src: string, alt: string}} options
         */
        update : function (options) {
            var me     = this;
            me.options = $.extend({}, me.options, options || {});

            // 直接指定src，代表当前节点不是图片或子节点无图片
            if (me.options.src) {
                me.$img.attr('src', me.options.src).attr('alt', me.options.alt);
            }

            me.api.update();
        },


        /**
         * 销毁
         */
        destroy : function () {
            var me = this;
            if (!me.isInit) {
                return;
            }

            me.isInit = false;

            if (me.$img) {
                me.$img.remove();
            }

            if (me.api) {
                me.$element.viewer('destroy');
            }

            if (me.options.src && me.options.clickHandler) {
                me.$element.off('click');
            }
        }
    }

    ImageViewer.DEFAULTS = {
        backdrop     : true,
        showClose    : false,
        fullscreen   : true,
        keyboard     : true,
        loading      : true,
        loop         : true,
        movable      : true,
        rotatable    : true,
        scalable     : true,
        title        : true,
        alt          : '',
        control      : undefined,
        transition   : true,
        zoomable     : true,
        thumbs       : true,
        src          : '',
        clickHandler : true,
    };


    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.image-viewer.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new ImageViewer(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminImageViewer             = Plugin;
    $.fn.busyAdminImageViewer.Constructor = ImageViewer;
    busyAdmin.plugins.ImageViewer         = ImageViewer;

    busyAdmin.autoInit('[data-toggle="busy-image-viewer"],[busy-image-viewer]', function () {
        Plugin.call(this);
    });

    return ImageViewer;
}));
/**
 * 联动选择器
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/linkagePicker', [core.sys.core, core.sys.jquery, core.lib.bootstrap], factory);
}(function (busyAdmin, $) {
    var pickerClassName = function (name) {
        return 'busy-linkage-picker' + name;
    };

    var inputClassName = function (name) {
        return 'busy-linkage-input' + name
    };

    var LinkagePicker = function (element, options) {
        var me = this;

        me.showing     = false;
        me.uuid        = me.getUID('linkage_picker');
        me.wrapId      = '__busy_' + me.uuid;
        me.selectData  = [];
        me.selectIndex = [];
        me.pickerData  = [];

        // 包裹元素
        me.$value      = $(element).hide().removeClass('form-control').wrap('<div class="' + inputClassName('') + '" id="' + me.wrapId + '"/>');
        me.placeholder = me.$value.attr('placeholder') || '请选择';
        me.$wrap       = $('#' + me.wrapId);
        me.$caret      = $('<i class="fa fa-angle-down" />');
        me.$clear      = $('<i class="bicon bicon-close-o" />');
        me.$loading    = $('<i class="fa fa-spinner fa-spin" />');
        me.$input      = $('<input type="text" readonly class="form-control"/>').attr('placeholder', me.placeholder);
        me.$wrap.append(me.$input);
        me.$wrap.append(me.$caret);
        me.$wrap.append(me.$clear);
        me.$wrap.append(me.$loading);

        // 初始化Popover
        me.init('linkagePicker', me.$wrap[0], options);

        // 获取默认选中
        me.values = [];
        me.$value.val().trim().split(me.options.idSpace).map(function (item) {
            var value = item.trim();
            if (value !== '') {
                me.values.push(value);
            }
        });

        // 初始参数
        me.$content      = me.tip().find('.popover-content');
        me.childField    = me.options.childField || 'child';
        me.idField       = me.options.idField || 'id';
        me.nameField     = me.options.nameField || 'name';
        me.parentField   = me.options.parentField || 'parent';
        me.disabledField = me.options.disabledField || 'disabled';
        me.parentRoot    = me.options.parentRoot || '';

        // 初始化事件
        me.initEvent();

        // 初始化数据
        me.setList(me.options.list);

        // 加载远程数据显示选中项
        if (me.values.length > 0 && (me.options.model || me.options.url)) {
            me.$wrap.addClass(inputClassName('-load'));
            me.$input.attr('placeholder', me.options.locale.loading);
            me.request(function (state) {
                if (!state) {
                    me.$input.attr('placeholder', me.placeholder);
                    me.$wrap.removeClass(inputClassName('-load'));
                } else {
                    me.initDefault();
                }
            });
        } else {
            me.initDefault();
        }

        // 启用/禁用
        me.setDisabled(me.$value.prop('disabled'));

        // 触发插件准备完成事件
        busyAdmin.helper.triggerPluginReady(me.$value, 'LinkagePicker', me);
    }

    LinkagePicker.prototype = $.extend({}, $.fn.popover.Constructor.prototype, {
        /**
         * 初始化事件
         */
        initEvent : function () {
            var me = this;

            // 非严格模式，支持单选
            if (!me.options.strict && !me.options.multiple) {
                me.$content.on('click', 'label', function (e) {
                    var $li = $(this).closest('li');
                    me.handleClick($li);
                    if ($li.hasClass('disabled')) {
                        return;
                    }

                    me.selectComplete();
                });
            }

            me.$content.on('click', 'li', function (e) {
                if (e.target.tagName === 'LABEL') {
                    return;
                }
                if (me.handleClick($(this))) {
                    me.selectComplete();
                }
            });

            // 点击外部关闭
            var $doc = busyAdmin.app.$doc;
            var $win = busyAdmin.app.$win;
            $doc.on('click.busy-admin-linkage-picker', function (e) {
                var $target = $(e.target);
                if ($target.closest(me.tip()).length || $target.closest(me.$element).length || $target.closest(me.$wrap).length) {
                    return;
                }

                if (me.showing) {
                    me.hide();
                }
            }).one(busyAdmin.e.appRenderBefore, function () {
                $doc.off('click.busy-admin-linkage-picker');
                $win.off('resize.busy-admin-linkage-picker');
                me.destroy();
            });

            // 调整位置
            $win.on('resize.busy-admin-linkage-picker', function () {
                if (me.showing) {
                    me.autoPosition();
                }
            });

            // 清理
            if (me.options.clear) {
                me.$wrap.addClass(inputClassName('-has-clear'));
                me.$clear.on('click', function (e) {
                    e.preventDefault();

                    me.selectData  = [];
                    me.selectIndex = [];
                    me.setValue(true);
                    me.$wrap.removeClass(inputClassName('-has-value'));

                    if (me.showing) {
                        me.hide();
                    }

                    busyAdmin.helper.execCallback(me.options.onClear, me.$value[0], [me], me.$value, busyAdmin.e.linkagePickerClear);
                });
            }

            me.$wrap
                // 点击主体展开
                .on('click', function (e) {
                    var $this = $(this);
                    if ($(e.target).closest(me.$clear).length || $this.hasClass(inputClassName('-load')) || $this.hasClass('disabled') || me.showing) {
                        return;
                    }

                    if ($this.hasClass('focus')) {
                        me.hide();
                        return;
                    }

                    me.show();
                })
                // 已展示事件
                .on('shown.bs.linkagePicker', function () {
                    me.selectIndex.map(function (index, number) {
                        var $warp   = me.$content.find('.' + pickerClassName('-wrap-' + number));
                        var $active = $warp.find('li.active');
                        if ($active.length > 0) {
                            var offset = ($warp.outerHeight(true) - $active.outerHeight(true)) / 2;
                            $warp.scrollTop($active.offset().top - ($warp.offset().top + offset) + $warp.scrollTop());
                        }
                    });
                    busyAdmin.helper.execCallback(me.options.onShown, me.$value[0], [me], me.$value, busyAdmin.e.linkagePickerShown);
                })
                // 展示事件
                .on('show.bs.linkagePicker', function () {
                    me.showing = true;
                    me.$wrap.addClass('focus');
                    busyAdmin.helper.execCallback(me.options.onShow, me.$value[0], [me], me.$value, busyAdmin.e.linkagePickerShow);
                })
                // 隐藏事件
                .on('hide.bs.linkagePicker', function () {
                    me.$wrap.removeClass('focus');
                    me.showing = false;
                    busyAdmin.helper.execCallback(me.options.onHide, me.$value[0], [me], me.$value, busyAdmin.e.linkagePickerHide);
                })
                // 已隐藏事件
                .on('hidden.bs.linkagePicker', function () {
                    busyAdmin.helper.execCallback(me.options.onHided, me.$value[0], [me], me.$value, busyAdmin.e.linkagePickerHided);
                });

            // 验证提示
            me.$value.on(busyAdmin.e.verifyErrorPlacement, function (e, error) {
                me.$wrap.after(error);
                return false;
            });
        },

        /**
         * 获取默认配置
         * @returns {*}
         */
        getDefaults : function () {
            return $.extend({}, LinkagePicker.DEFAULTS, {
                trigger   : 'manual',
                template  : '<div class="popover ' + pickerClassName('') + '" role="tooltip"><div class="arrow"></div><div class="popover-content"></div></div>',
                placement : 'autobottom',
                viewport  : 'body',
            });
        },

        /**
         * 获取配置
         * @param options
         */
        getOptions : function (options) {
            var me  = this;
            options = $.extend({}, me.getDefaults(), me.$value.data(), options);

            if (!options.container) {
                var $model = me.$value.closest('.modal');
                if ($model.length) {
                    options.container = $model;
                } else {
                    options.container = 'body';
                }
            }

            if (options.delay && typeof options.delay == 'number') {
                options.delay = {
                    show : options.delay,
                    hide : options.delay
                }
            }

            return options
        },

        /**
         * 计算位置
         * @param placement
         * @param pos
         * @param actualWidth
         * @param actualHeight
         * @returns {{top: number, left:number}}
         */
        getCalculatedOffset : function (placement, pos, actualWidth, actualHeight) {
            if (placement == 'bottom') {
                return {
                    top  : pos.top + pos.height,
                    left : pos.left
                };
            } else {
                return {
                    top  : pos.top - actualHeight,
                    left : pos.left
                };
            }
        },

        /**
         * 自动调整位置
         */
        autoPosition : function () {
            var me           = this;
            var $tip         = me.tip();
            var placement    = 'bottom';
            var pos          = me.getPosition();
            var actualWidth  = $tip[0].offsetWidth;
            var actualHeight = $tip[0].offsetHeight;
            var viewportDim  = me.getPosition(me.$viewport)
            if (pos.bottom + actualHeight > viewportDim.bottom) {
                placement = 'top';
            }

            $tip.removeClass('top bottom').addClass(placement);
            me.applyPlacement(me.getCalculatedOffset(placement, pos, actualWidth, actualHeight), placement)
        },

        /**
         * 调整三角形位置
         */
        replaceArrow : function (delta, dimension, isVertical) {
            this.arrow().css('left', (this.$wrap.offset().left - this.tip().offset().left + 45) + 'px');
        },

        /**
         * 是否有内容
         * @returns {boolean}
         */
        hasContent : function () {
            return true;
        },

        /**
         * 设置内容
         */
        setContent : function () {
            var me       = this;
            var opt      = me.options;
            var complete = function () {
                var length = me.selectIndex.length;
                if (length > 0) {
                    me.$content.html('');
                    me.selectIndex.map(function (index, number) {
                        var $picker = me.createPicker(me.pickerData[number], number, index);
                        me.$content.append($picker);

                        // 非严格模式且单选
                        if (!me.options.strict && !me.options.multiple && number === length - 1) {
                            $picker.find('li.active').find('input').prop('checked', true);
                        }
                    });
                } else {
                    if (me.pickerData.length) {
                        me.$content.html(me.createPicker(me.pickerData[0], 0, -1));
                    } else {
                        me.$content.html('<div style="width: ' + (me.$wrap.width() - 2) + 'px" class="' + pickerClassName('-empty') + '">' + opt.emptyText + '</div>');
                    }
                }
            };

            if ((opt.model || opt.url) && !opt.list.length) {
                var $loading = $('<div style="width: ' + (me.$wrap.width() - 2) + 'px" class="' + pickerClassName('-load') + '"><i class="fa fa-spinner fa-spin"></i> <span>' + opt.locale.loading + '</span></div>');
                me.$content.html($loading);
                me.request(function (state) {
                    if (!state) {
                        $loading.remove();
                    } else {
                        me.initDefault();
                        complete();
                    }
                });
                return;
            }

            complete();
        },

        /**
         * 远程加载
         * @param callback
         */
        request : function (callback) {
            var me  = this;
            var opt = me.options;

            var params = {
                model          : opt.model,
                extend         : opt.modelExtend ? 1 : 0,
                id_field       : opt.modelIdField || '',
                name_field     : opt.modelNameField || '',
                parent_field   : opt.modelParentField || '',
                disabled_field : opt.modelDisabledField || '',
                order          : opt.modelOrder || ''
            };

            if (typeof opt.params === "object") {
                params = $.extend({}, opt.params, params);
            } else if (opt.params) {
                var call = opt.params;
                if (typeof opt.params !== 'function') {
                    call = busyAdmin.helper.scope(opt.params);
                }

                if (typeof call === 'function') {
                    var res = call.call();
                    params  = $.extend({}, res || {}, params);
                }
            }

            busyAdmin
                .request(opt.model ? busyAdmin.getConfig('linkagePicker').url : (typeof opt.url === 'function' ? opt.url() : opt.url))
                .method(opt.method)
                .addHeader('Busy-Admin-Plugin', 'LinkagePicker')
                .pending(false)
                .params(params)
                .complete(function (response, type, xhr) {
                    callback(false);
                })
                .error(function (response, type, xhr) {
                    return false;
                })
                .success(function (response, type, xhr) {
                    me.setList(response.result.data);
                    callback(true);
                    return false;
                }).exec();
        },

        /**
         * 转换数据
         * @param list
         */
        setList : function (list) {
            list = list || [];
            if (!list.length) {
                return;
            }

            var me = this;
            if (list.length > 0 && (list[0] || {}).hasOwnProperty(me.childField)) {
                me.options.list = list;
            } else {
                me.options.list = busyAdmin.helper.listToTree(list, me.idField, me.childField, me.parentField, me.parentRoot);
            }
        },

        /**
         * 创建选择器
         * @param list
         * @param number
         * @param selected
         * @returns {string}
         */
        createPicker : function (list, number, selected) {
            var me     = this;
            var html   = '';
            var strict = me.options.strict;
            var multi  = me.options.multiple;
            list.map(function (item, index) {
                var childData = item[me.childField] || [];
                var operate   = '';
                var disabled  = item[me.disabledField] ? ' disabled' : '';
                var id        = me.uuid + '_' + number + '_' + index;
                if (!strict || multi) {
                    if (multi) {
                        operate = '<div class="' + pickerClassName('-checkbox') + '"><input ' + disabled + ' type="checkbox" id="__checkbox_' + id + '"/><label class="bicon" for="__checkbox_' + id + '"></label></div>';
                    } else {
                        operate = '<div class="' + pickerClassName('-radio') + '"><input ' + disabled + ' type="radio" id="__radio_' + id + '" name="__radio_' + me.uuid + '"/><label class="bicon" for="__radio_' + id + '"></label></div>';
                    }
                } else {
                    operate = '<div class="' + pickerClassName('-check') + '"><i class="bicon bicon-check"></i></div>';
                }

                html += '<li ' + disabled + ' class="' + (selected === index ? 'active' : '') + disabled + '" data-index="' + index + '" data-picker-index="' + number + '">\
                    ' + operate + '\
                    <span>' + item[me.nameField] + '</span>\
                    <i class="angle-right fa fa-angle-right ' + (childData.length > 0 ? '' : 'hide') + '"></i>\
                </li>';
            });

            return $('<div class="' + pickerClassName('-wrap') + ' ' + pickerClassName('-wrap-' + number) + '"><ul>' + html + '</ul></div>');
        },

        /**
         * 处理点击
         * @param $li
         * @returns {boolean}
         */
        handleClick : function ($li) {
            var me           = this;
            var data         = $li.data();
            var index        = data.index;
            var pickerIndex  = data.pickerIndex;
            var selectedItem = (me.pickerData[pickerIndex] || [])[index] || null;
            var list         = selectedItem[me.childField] || [];

            // 删除超过范围的数据
            var length = me.pickerData.length;
            for (var i = length; i > pickerIndex; i--) {
                me.$content.find('.busy-linkage-picker-wrap-' + i).remove();
                me.pickerData  = me.pickerData.del(i);
                me.selectData  = me.selectData.del(i - 1);
                me.selectIndex = me.selectIndex.del(i - 1);
            }

            // 高亮
            $li.siblings().removeClass('active');
            $li.addClass('active');
            me.selectData.push(selectedItem);
            me.selectIndex.push(index);

            if (list.length > 0) {
                me.pickerData.push(list);
                me.$content.append(me.createPicker(list, pickerIndex + 1, -1));
                me.autoPosition();
                return false;
            } else {
                return !selectedItem[me.disabledField];
            }
        },

        /**
         * 选择完成
         */
        selectComplete : function () {
            var me = this;
            me.hide();
            me.setValue(true);
            busyAdmin.helper.execCallback(me.options.onChanged, me.$value[0], [me, me.selectData, me.selectIndex], me.$value, busyAdmin.e.linkagePickerChanged);
        },

        /**
         * 设置值
         */
        setValue : function (trigger) {
            var me          = this;
            var selectNames = [];
            var selectIds   = [];
            me.selectData.map(function (item) {
                selectNames.push(item[me.nameField]);
                selectIds.push(item[me.idField]);
            });

            if (me.options.nameAllPath) {
                me.$input.val(selectNames.join(me.options.nameSpace));
            } else {
                me.$input.val(selectNames[selectNames.length - 1]);
            }
            me.$value.val(selectIds.join(me.options.idSpace));
            trigger && me.$value.busyAdminEventInput(true);

            if (selectIds.length > 0) {
                me.$wrap.addClass(inputClassName('-has-value'));
            }
        },

        /**
         * 初始化默认值
         */
        initDefault : function () {
            var me    = this;
            var index = 0;
            var list  = me.options.list || [];
            do {
                var value = me.values[index] || null;
                if (value === null) {
                    break;
                }

                var data         = null;
                var currentIndex = -1;
                $.each(list, function (num, item) {
                    if (item[me.idField] == value) {
                        data         = item;
                        currentIndex = num;
                        return false;
                    }
                });
                if (!data || currentIndex == -1) {
                    break;
                }

                me.selectData.push(data);
                me.pickerData.push(list);
                me.selectIndex.push(currentIndex);
                list = data[me.childField] || [];

                index++;
            } while (true);

            list = me.options.list || [];
            if (!me.pickerData.length && list.length > 0) {
                me.pickerData = [list];
            }

            me.setValue(false);
        },

        /**
         * 启用/禁用
         * @param disabled
         */
        setDisabled : function (disabled) {
            this.$wrap.toggleClass('disabled', disabled);
            this.$input.prop('disabled', disabled);
        },
    });

    LinkagePicker.DEFAULTS = {
        list          : [],
        idField       : null,
        nameField     : null,
        childField    : null,
        parentField   : null,
        disabledField : null,
        parentRoot    : '',
        strict        : true,
        multiple      : false, // TODO 待完善
        clear         : false,

        url    : '',
        params : null,
        method : 'get',

        model              : '',
        modelExtend        : false,
        modelIdField       : '',
        modelNameField     : '',
        modelParentField   : '',
        modelDisabledField : '',
        modelOrder         : '',

        idSpace     : ',',
        nameSpace   : '/',
        nameAllPath : true,
        container   : '',

        onChanged : $.noop,
        onClear   : $.noop,
        onShow    : $.noop,
        onShown   : $.noop,
        onHide    : $.noop,
        onHidden  : $.noop,
        emptyText : '无选项',

        locale : $.extend({}, {
            loading : '请稍后...',
        }, ((busyAdmin.locale || {}).plugin || {}).linkagePicker || {}),
    }

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.linkagePicker.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new LinkagePicker(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    var eventGroup                          = 'linkage-picker';
    $.fn.busyAdminLinkagePicker             = Plugin;
    $.fn.busyAdminLinkagePicker.Constructor = LinkagePicker;
    busyAdmin.plugins.LinkagePicker         = LinkagePicker;
    $.extend(busyAdmin.e, {
        /**
         * 刚显示触发
         */
        linkagePickerShow : busyAdmin.ee('show', eventGroup),
        /**
         * 完全显示出来触发
         */
        linkagePickerShown : busyAdmin.ee('shown', eventGroup),
        /**
         * 隐藏触发
         */
        linkagePickerHide : busyAdmin.ee('hide', eventGroup),
        /**
         * 完全隐藏触发
         */
        linkagePickerHided : busyAdmin.ee('hidden', eventGroup),
        /**
         * 选择内容发生改变触发
         */
        linkagePickerChanged : busyAdmin.ee('changed', eventGroup),
        /**
         * 内容被清空触发
         */
        linkagePickerClear : busyAdmin.ee('clear', eventGroup)
    });

    busyAdmin.autoInit('[data-toggle="busy-linkage-picker"],[busy-linkage-picker]', function () {
        Plugin.call(this);
    });

    return LinkagePicker;
}));
/**
 * MarkDown语法解析器
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/markdown', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    var rendererMD = null;
    var marked     = null;

    var Markdown = function (element, options) {
        this.$element = $(element);
        this.$wrap    = null;
        this.options  = $.extend(true, {}, Markdown.DEFAULTS, this.$element.data() || {}, options || {});
        this.ready(this.init);
    };

    Markdown.prototype = {
        /**
         * 组件已准备完成
         * @param {Function} callback
         */
        ready : function (callback) {
            var me = this;
            if (rendererMD && $.fn.busyAdminHighCode.Constructor.highlight) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.marked, busyAdmin.lib.highlight], function (markedTarget, highlight) {
                    marked     = markedTarget;
                    rendererMD = new marked.Renderer();

                    // 段落
                    rendererMD.paragraph = function (text) {
                        return '<p class="markdown-paragraph">' + text + '</p>';
                    };

                    // 引用
                    rendererMD.blockquote = function (text) {
                        return '<blockquote class="markdown-blockquote">' + text + '</blockquote>';
                    }

                    // 列表
                    rendererMD.list = function (body, ordered, start) {
                        var tag = ordered ? 'ol' : 'ul';

                        return '<' + tag + ' class="markdown-' + tag + '" ' + (ordered && start ? 'start="' + start + '"' : '') + '>' + body + '</' + tag + '>';
                    };

                    // 表格
                    rendererMD.table = function (header, body) {
                        var html   = '<div class="table-responsive markdown-table-responsive"><table class="table table-hover table-striped table-bordered markdown-table"><thead> ' + header + ' </thead> <tbody> ' + body + ' </tbody></table></div>';
                        var $table = $(html);

                        $table.find('thead th').each(function () {
                            var $this = $(this).addClass('text-center');
                            var text  = $this.text().trim();
                            if (text.indexOf(':')) {
                                var texts = text.split(':');
                                $this.attr('width', (texts[1] || '').trim());
                                $this.html((texts[0] || '').trim());
                            }
                        });
                        $table.find('tbody td').each(function () {
                            var $this = $(this).addClass('text-vtop');
                            var text  = $this.html().trim();
                            if (text.indexOf(':')) {
                                var texts  = text.split(':');
                                var suffix = (texts[1] || '').trim();
                                if (suffix === 'title') {
                                    var $tdList = $this.closest('tr').addClass('info text-bold').find('td');
                                    $this.attr('colspan', $tdList.length);
                                    $tdList.each(function (index) {
                                        if (index > 0) {
                                            $(this).remove();
                                        } else {
                                            $(this).html((texts[0] || '').trim());
                                        }
                                    });
                                }
                            }
                        });

                        return $table[0].outerHTML;
                    };

                    // 代码高亮
                    rendererMD.code = function (code, language) {
                        // 演示
                        if (0 === language.indexOf('demo')) {
                            var arr   = language.split(':');
                            var title = arr[1] || '实例';

                            var codes = code.split('\n');
                            var maps  = {};
                            codes.map(function (item) {
                                item = item.trim();
                                if (-1 === item.indexOf(':')) {
                                    return;
                                }

                                var items             = item.split(':');
                                maps[items[0].trim()] = (items[1] || '').trim();
                            });

                            var $box    = $(code.trim());
                            var content = $box.html().trim();
                            if ($box.is('textarea')) {
                                content = busyAdmin.helper.htmlDecode(content);
                            }

                            var htmlCode = $.fn.busyAdminHighCode.Constructor.parse(content, 'html', '', me.options.locale.copy);


                            return '<div class="busy-demo panel panel-default"><div class="busy-demo-title panel-heading"><h3 class="panel-title">' + title + '</h3></div><div class="panel-body busy-demo-content">' + content + '</div><div class="busy-demo-code">' + htmlCode + '</div><div class="panel-footer busy-demo-control"><a href="javascript:void(0)"><i class="fa fa-caret-down"></i> ' + me.options.locale.showCode + '</a></div></div>';
                        }

                        // 普通
                        return '<div class="markdown-code">' + $.fn.busyAdminHighCode.Constructor.parse(code, language, '', me.options.locale.copy) + '</div>';
                    };

                    // 标题
                    rendererMD.heading = function (text, level) {
                        var id = busyAdmin.helper.base64Encode(text + ':' + level);
                        id     = id.replace(/([=\/+])/g, '');
                        return '<h' + level + ' class="markdown-heading" id="' + id + '">' + text + '</h' + level + '>';
                    };

                    // 超级连接
                    rendererMD.link = function (link, title, text) {
                        return '<a class="markdown-link" href="' + link + '" target="_blank" title="' + (title || text) + '">' + text + '</a>'
                    };

                    $.fn.busyAdminHighCode.Constructor.highlight = highlight;

                    typeof callback === 'function' && callback.call(me);
                });
            }
        },

        /**
         * 初始化
         */
        init : function () {
            var me      = this;
            var content = marked(me.$element.html(), {
                renderer : rendererMD
            });

            var $row     = $('<div class="row" />');
            var $content = $('<div class="col-sm-12 busy-admin-markdown-content" />');
            var $catalog = $('<div class="col-sm-3 col-sm-push-9 busy-admin-markdown-catalog" />');

            // 显示目录
            if (me.options.catalog) {
                $content = $('<div class="col-sm-9 col-sm-pull-3 busy-admin-markdown-content"/>');
                $row.append($catalog);
                $row.append($content);
            } else {
                $row.append($content);
            }

            $content.html(content);
            me.$wrap = $('<div class="busy-admin-markdown" />').append($row);
            me.$element.hide().after(me.$wrap);

            $content.find('.busy-demo-control a').on('click', function () {
                var $this = $(this);
                var $code = $this.parent('.busy-demo-control').prev();
                if ($code.data('opened')) {
                    $code.slideUp(function () {
                        $code.data('opened', false);
                        $this.html('<i class="fa fa-caret-down"></i> ' + me.options.locale.showCode + '</a>');
                    });
                } else {
                    $code.slideDown(function () {
                        $code.data('opened', true);
                        $this.html('<i class="fa fa-caret-up"></i> ' + me.options.locale.hideCode + '</a>');
                    });
                }
            });

            // 生成目录
            if (me.options.catalog) {
                me.catalog($content, $catalog);
            }

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'Markdown', me);
        },

        /**
         * 生成目录
         */
        catalog : function ($content, $catalog) {
            var bodyHeight = $(document.body).offset().top + $(document.body).outerHeight(true);
            var height     = $content.offset().top + $content.outerHeight(true);

            this.$wrap.busyAdminCatalog({
                container      : $catalog,
                filterSelector : '.busy-demo',
                scroll         : this.options.catalogScroll,
                sticky         : busyAdmin.app.isMobileSize() ? false : this.options.catalogSticky,
                top            : busyAdmin.app.getContentFrame().top + this.options.catalogTop,
                bottom         : bodyHeight - height + this.options.catalogBottom,
            });
        },

        /**
         * 重载
         */
        reload : function () {
            if (this.$wrap !== null) {
                this.$wrap.remove();
            }

            this.init();
        }
    };

    Markdown.DEFAULTS = {
        catalog       : true,   // 是否生成目录
        catalogScroll : true,   // 是否执行目录滚动监听
        catalogSticky : true,   // 是否开启目录滚动定位,
        catalogTop    : 15,     // 目录滚定定位开始上偏移
        catalogBottom : 15,     // 目录滚动定位结束下偏移

        // 语言
        locale : $.extend({
            showCode : '显示代码',
            hideCode : '隐藏代码',
            copy     : '复制'
        }, ((busyAdmin.locale || {}).plugin || {}).markdown || {})
    };


    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.markdown.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Markdown(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminMarkdown             = Plugin;
    $.fn.busyAdminMarkdown.Constructor = Markdown;
    busyAdmin.plugins.Markdown         = Markdown;
    busyAdmin.autoInit('[data-toggle="busy-markdown"],script[type="text/x-markdown"],[busy-markdown]', function () {
        Plugin.call(this);
    });

    return Markdown;
}));
/**
 * 模态框
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/modal', [core.sys.core, core.sys.jquery, core.lib.bootstrap], factory);
}(function (busyAdmin, $) {
    'use strict';

    // 重写Bootstrap modal方法
    var oldMethods = busyAdmin.helper.extends($.fn.modal.Constructor.prototype, {
        adjustDialog : function () {
            busyAdmin.helper.override(oldMethods, 'adjustDialog', this, arguments);

            // 适配自动居中
            if (!this.$element.hasClass('busy-admin-modal')) {
                return;
            }

            if (!this.$win) {
                this.$win = $(window);
            }

            if (!this.$content) {
                this.$content = this.$dialog.find('.modal-content');
            }

            var contentHeight = this.$content.height();
            var winHeight     = this.$win.height();
            var winWidth      = this.$win.width();
            var isMobile      = winWidth <= 767;
            var max           = isMobile ? 10 : 30;

            // 内容高度 + 边距超过window高度则不计算居中
            if (contentHeight + max * 2 >= winHeight) {
                if (isMobile) {
                    this.$dialog.css('margin', max + 'px');
                } else {
                    this.$dialog.css('margin', max + 'px auto');
                }
            } else {
                var margin = (winHeight - contentHeight) / 2 - 1;
                if (isMobile) {
                    this.$dialog.css('margin', margin + 'px ' + max + 'px');
                } else {
                    this.$dialog.css('margin', margin + 'px auto');
                }
            }
        },

        show : function () {
            this.noFix = this.$body.hasClass('modal-open');

            busyAdmin.helper.override(oldMethods, 'show', this, arguments);

            // 层级
            var zIndex = this.options.zindex === 'auto' ? busyAdmin.zIndex(2) : this.options.zindex;
            this.$element.css('z-index', zIndex);
            this.$backdrop && this.$backdrop.addClass('busy-admin-modal-backdrop').css('z-index', zIndex - 1);
        },

        hideModal : function () {
            var that = this
            if (!that.$element.hasClass('busy-admin-modal')) {
                busyAdmin.helper.override(oldMethods, 'hideModal', that, arguments);
                return;
            }

            that.$element.hide();
            that.backdrop(function () {
                if (!that.noFix) {
                    that.$body.removeClass('modal-open');
                    that.resetAdjustments()
                    that.resetScrollbar()
                }
                that.$element.trigger('hidden.bs.modal')
            })
        }
    });

    var btnIcon = function (icon) {
        if (!icon) {
            return '';
        }

        if (-1 === icon.indexOf(' ')) {
            icon = 'fa ' + icon;
        }

        return '<i class="' + icon + '"></i> ';
    };

    var IfUpdate = function (update) {
        return typeof update === 'boolean' ? update : true;
    }

    /**
     * 构造器
     * @param {Node} element
     * @param {Modal.DEFAULTS} options
     * @constructor
     * @exports plugin/modal
     */
    var Modal = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);

        var data         = me.$element.data() || {};
        me.options       = $.extend(true, {}, Modal.DEFAULTS, data, options || {});
        me.sourceOptions = $.extend(true, {}, Modal.DEFAULTS, data, options || {});

        me.$documentBody = $(document.body);
        me.api           = null;
        if (!me.options.url && !me.options.content && !me.options.text) {
            me.setOption('url', me.$element.attr('href'));
        }

        me.ajax         = !!me.options.url;
        me.leftButtons  = [];
        me.rightButtons = [];
        me.init();
    };

    Modal.prototype = {
        /**
         * 初始化
         */
        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }

            me.isInit = true;
            $(document).one(busyAdmin.e.appRenderBefore, function () {
                me.destroy();
            });

            me._listenResize();
        },

        /**
         * 监听resize事件
         * @private
         */
        _listenResize : function () {
            var me = this;
            $(window).one('resize', function () {
                me.resetView();
                me._listenResize();
            });
        },

        /**
         * 创建模态框
         * @private
         */
        _create : function () {
            var me              = this;
            var opt             = me.options;
            me.$container       = $(Modal.TEMPLATE).addClass(opt.className);
            me.$dialog          = me.$container.find('.modal-dialog');
            me.$dialogContent   = me.$container.find('.modal-content');
            me.$dialogHeader    = me.$container.find('.modal-header');
            me.$dialogTitle     = me.$container.find('.modal-title');
            me.$dialogBody      = me.$container.find('.modal-body');
            me.$dialogFooter    = me.$container.find('.modal-footer-sys');
            me.$dialogFooterUse = me.$container.find('.modal-footer-use').hide();
            me.$dialogClose     = me.$dialogHeader.find('.close');
            me.$okBtn           = $('<button type="button" class="btn" />');
            me.$cancelBtn       = $('<button type="button" class="btn" />');

            me.setClose(opt.close);

            // 对话框尺寸
            me.setSize(opt.size, false);

            // 填充
            me.setPadding(opt.padding, false);

            // 上边框
            me.setBorderTop(opt.borderTop, false);

            // 下边框
            me.setBorderBottom(opt.borderBottom, false);

            // 高度
            me.setHeight(opt.height, false);

            // 对话框标题
            me.setTitle(opt.title, false);

            // 设置footer
            me.setFooter(opt.footer, false);

            // 设置对齐方式
            me.setFooterAlign(opt.footerAlign);

            // 取消按钮
            me.$dialogFooter.append(me.$cancelBtn);
            me.setCancel(opt.cancel !== false ? opt.cancel || opt.locale.cancel : false, opt.cancelIcon, opt.cancelSkin, false);

            // 确认按钮
            me.$dialogFooter.append(me.$okBtn);
            me.setOk(opt.ok !== false ? opt.ok || opt.locale.confirm : false, opt.okIcon, opt.okSkin, false);

            // 追加按钮
            me.setButtons(typeof opt.buttons === 'string' ? busyAdmin.helper.scope(opt.buttons, []) : opt.buttons, false);

            return me.$container;
        },

        setClose : function (show) {
            var me = this;
            if (!me.$dialogClose) {
                return;
            }

            me.setOption('close', show);
            if (show) {
                me.$dialogClose.show();
            } else {
                me.$dialogClose.hide();
            }
        },

        setButtons : function (buttons, update) {
            var me = this;
            if (!me.$dialogFooter) {
                return;
            }

            if (me.leftButtons) {
                me.leftButtons.map(function (item) {
                    item.remove();
                });
            }

            if (me.rightButtons) {
                me.rightButtons.map(function (item) {
                    item.remove();
                });
            }

            me.leftButtons  = [];
            me.rightButtons = [];
            me.setOption('buttons', buttons);
            $.map(buttons || [], function (item) {
                item = item || {};
                if (item.align === 'left') {
                    me.leftButtons.push(me._createBtn(item));
                } else {
                    me.rightButtons.push(me._createBtn(item));
                }
            });

            $.map(me.leftButtons, function (item) {
                me.$dialogFooter.prepend(item);
            });

            $.map(me.rightButtons, function (item) {
                me.$dialogFooter.append(item);
            });

            if (IfUpdate(update)) {
                this.resetView();
            }
        },

        setOk : function (text, icon, skin, update) {
            let me = this;
            if (!me.$okBtn) {
                return;
            }

            me.setOption('ok', text);
            if (text === false) {
                me.$okBtn.hide();
                return;
            }

            var oldSkin = me.options.okSkin;
            me.setOption('okIcon', icon);
            if (skin) {
                me.setOption('okSkin', skin);
            } else {
                skin = me.options.okSkin;
            }

            me.$okBtn.html(btnIcon(icon) + text).removeClass(oldSkin).addClass(skin).show();
            if (IfUpdate(update)) {
                me.resetView();
            }
        },

        setCancel : function (text, icon, skin, update) {
            let me = this;
            if (!me.$cancelBtn) {
                return;
            }

            me.setOption('cancel', text);
            if (text === false) {
                me.$cancelBtn.hide();
                return;
            }

            var oldSkin = me.options.cancelSkin;
            me.setOption('cancelIcon', icon);
            if (skin) {
                me.setOption('cancelSkin', skin);
            } else {
                skin = me.options.cancelSkin;
            }

            me.$cancelBtn.html(btnIcon(icon) + text).removeClass(oldSkin).addClass(skin).show();
            if (IfUpdate(update)) {
                me.resetView();
            }
        },

        /**
         * 设置对齐方式
         * @param align
         */
        setFooterAlign : function (align) {
            let me = this;
            if (!me.$dialogFooter) {
                return;
            }

            me.setOption('footerAlign', align);
            me.$dialogFooter.removeClass('text-center text-left text-right');
            if (align) {
                me.$dialogFooter.addClass('text-' + align);
            }
        },

        setFooter : function (footer, update) {
            let me = this;
            if (!me.$dialogFooter) {
                return;
            }

            me.setOption('footer', footer);
            if (typeof footer === 'boolean') {
                if (footer) {
                    me.$dialogFooter.show();
                } else {
                    me.$dialogFooter.hide();
                }
                me.$dialogFooterUse.hide();
            } else if (footer) {
                me.$dialogFooter.hide();
                me.$dialogFooterUse.empty().append(footer).show();
            }

            if (IfUpdate(update)) {
                me.resetView();
            }
        },

        /**
         * 设置尺寸
         * @param size
         * @param update
         */
        setSize : function (size, update) {
            var me = this;
            if (!me.$dialog) {
                return;
            }

            me.setOption('size', size);
            me.$dialog.removeClass('modal-sm modal-lg');
            if (size) {
                me.$dialog.addClass('modal-' + size);
            }

            if (IfUpdate(update)) {
                me.resetView();
            }
        },

        /**
         * 设置填充
         * @param padding
         * @param update
         */
        setPadding : function (padding, update) {
            var me = this;
            if (!me.$dialogBody) {
                return;
            }

            me.setOption('padding', padding);
            if ($.isNumeric(padding)) {
                padding = padding + 'px';
            }

            me.$dialogBody.css({padding : padding || ''});
            if (IfUpdate(update)) {
                me.resetView();
            }
        },

        /**
         * 设置上边框
         * @param border
         * @param update
         */
        setBorderTop : function (border, update) {
            var me = this;
            if (!me.$dialogHeader) {
                return;
            }

            me.setOption('borderTop', border);
            me.$dialogHeader.css('border-bottom-width', !border ? 0 : '');
            if (IfUpdate(update)) {
                me.resetView();
            }
        },

        /**
         * 设置下边框
         * @param border
         * @param update
         */
        setBorderBottom : function (border, update) {
            var me = this;
            if (!me.$dialogFooter) {
                return;
            }

            me.setOption('borderBottom', border);
            me.$dialogFooter.css('border-top-width', !border ? 0 : '');
            me.$dialogFooterUse.css('border-top-width', !border ? 0 : '');
            if (IfUpdate(update)) {
                me.resetView();
            }
        },

        /**
         * 设置高度
         * @param height
         * @param update
         */
        setHeight : function (height, update) {
            var me = this;
            if (!me.$dialog) {
                return;
            }

            me.setOption('height', height);
            if ($.isNumeric(height) && height > 0) {
                height = height + 'px';
            }

            if (height) {
                me.$dialogBody.css('height', height);
                me.$dialog.addClass('modal-fixed-height');
            } else {
                me.$dialogBody.css('height', '');
                me.$dialog.removeClass('modal-fixed-height');
            }
            if (IfUpdate(update)) {
                me.resetView();
            }
        },

        /**
         * 设置内容
         * @param content
         */
        setContent : function (content) {
            var me  = this;
            me.ajax = false;
            me.setOption('content', content);
            me.render();
        },

        /**
         * 设置标题
         */
        setTitle : function (title, update) {
            var me = this;
            if (!me.$dialogHeader) {
                return;
            }

            me.setOption('title', title);
            if (title === false) {
                me.$dialogHeader.hide();
            } else {
                me.$dialogHeader.show();
                me.$dialogTitle.empty().append(title || me.options.locale.title);
            }

            if (IfUpdate(update)) {
                me.resetView();
            }
        },

        /**
         * 渲染内容
         * @param {jQuery|HTMLElement} content
         * @param {String?} title
         */
        _renderContent : function (content, title) {
            this.$content = $('<div />').append($(content));

            // 设置标题
            if (title) {
                this.setTitle(title);
            }

            this.$dialogBody.empty().append(this.$content);
        },

        /**
         * 渲染内容
         */
        render : function () {
            var me  = this;
            var opt = me.options;

            // 内容
            if ((opt.content || opt.text) && !me.ajax) {
                var content;
                if (opt.text) {
                    content = '<div>' + opt.content + '</div>';
                } else {
                    if (typeof opt.content === 'function') {
                        content = $(opt.content());
                    } else {
                        content = $(opt.content);
                        if (content.length) {
                            if (content[0].tagName.toLowerCase() === 'script' || content[0].tagName.toLowerCase() === 'template') {
                                content = '<div>' + $(opt.content).html() + '</div>';
                            }
                        }
                    }
                }

                me._renderContent($(content));
            }

            var pageEvent = false;
            switch (me.options.type) {
                case 'page':
                    pageEvent = true;
                    break;
                default:
                    if (!me.$content || me.$content.length === 0) {
                        pageEvent = true;
                    } else {
                        me.renderForm();
                    }
            }

            if (pageEvent) {
                // 确认
                me.$okBtn.off('click').on('click', function (e) {
                    if (false === busyAdmin.helper.execCallback(opt.onOk, me.element, [me], [me.$element, busyAdmin.app.$doc], $.Event(busyAdmin.e.modalOk, {relatedTarget : this}), true, false)) {
                        return;
                    }

                    me.hide();
                });

                // 取消
                me.$cancelBtn.off('click').on('click', function () {
                    if (false === busyAdmin.helper.execCallback(opt.onCancel, me.element, [me], [me.$element, busyAdmin.app.$doc], $.Event(busyAdmin.e.modalCancel, {relatedTarget : this}), true, false)) {
                        return;
                    }

                    me.hide();
                });
            }

            // 触发已准备好
            busyAdmin.helper.execCallback(opt.onReady, me.element, [me], [me.$element, busyAdmin.app.$doc], busyAdmin.e.modalReady);

            if (me.api.isShown) {
                me.resetView();
                return;
            }

            me.api.show();
        },

        /**
         * 提交表单
         */
        submit : function () {
            var me = this;
            if (!me.$form || me.$form.length === 0) {
                return false;
            }

            me.$form.submit();
            return true;
        },

        /**
         * 重置表单
         */
        reset : function () {
            var me = this;
            if (!me.$form || me.$form.length === 0) {
                return false;
            }

            me.$form[0].reset();
            return true;
        },

        /**
         * 渲染表单
         */
        renderForm : function () {
            var me  = this;
            var opt = me.options;

            // 补齐form表单
            var $form = me.$content.find('form');
            if ($form.length === 0) {
                me.$content.wrap('<form />');
                me.$content = me.$content.parent('form');
                $form       = me.$content;
            } else {
                opt.formAction = $form.attr('action') || opt.url;
                opt.formMethod = $form.attr('method') || opt.formMethod;
            }

            me.$form = $form;
            if ($form.find(':submit').length === 0) {
                $form.append('<button type="submit" style="position: absolute; left: -9999px;">submit</button>');
            }

            var formOptions    = busyAdmin.helper.parseData(opt, 'form', 'verify');
            formOptions.action = formOptions.action || opt.url;
            formOptions.method = formOptions.method || 'post';

            // 覆盖form方法，增加语法糖
            var formOnSuccess = formOptions.onSuccess;
            if (formOnSuccess && typeof formOnSuccess === 'string' && 0 === formOnSuccess.indexOf('@')) {
                formOptions.onSuccess = function (result) {
                    busyAdmin.dispatchSugar(me.element, formOnSuccess, result, []);
                }
            }

            $form.busyAdminForm(formOptions);

            // 确认
            me.$okBtn.off('click').on('click', function (e) {
                if (false === busyAdmin.helper.execCallback(opt.onOk, me.element, [me], [me.$element, busyAdmin.app.$doc], $.Event(busyAdmin.e.modalOk, {relatedTarget : this}), true, false)) {
                    return;
                }

                me.submit();
            });

            // 取消
            me.$cancelBtn.off('click').on('click', function () {
                if (false === busyAdmin.helper.execCallback(opt.onCancel, me.element, [me], [me.$element, busyAdmin.app.$doc], $.Event(busyAdmin.e.modalCancel, {relatedTarget : this}), true, false)) {
                    return;
                }

                me.hide();
            });
        },

        /**
         * 显示对话框
         */
        show : function () {
            var me    = this;
            var opt   = me.options;
            me.result = null;
            me.$documentBody.append(me._create());

            me.$container.modal({
                show     : false,
                backdrop : opt.backdrop,
                keyboard : opt.keyboard,
                zindex   : opt.zindex
            });
            me.$container.on('show.bs.modal shown.bs.modal hide.bs.modal hidden.bs.modal', function (e) {
                if (e.namespace !== 'bs.modal') {
                    return;
                }

                busyAdmin.helper.execCallback(opt[busyAdmin.helper.camel('on_' + e.type)], me.element, [me], [me.$element, busyAdmin.app.$doc], busyAdmin.ee(e.type, 'modal'));

                // 销毁模态框
                if (e.type === 'hidden') {
                    me.$container.remove();
                }

                // 还原配置
                if (e.type === 'hide') {
                    // 销毁表单
                    if (me.$form) {
                        me.$form.busyAdminForm('destroy');
                    }

                    me.options = $.extend(true, {}, me.options, me.sourceOptions);
                }
            });
            me.api = me.$container.data('bs.modal');

            if (false === busyAdmin.helper.execCallback(opt.onRenderBefore, me.element, [me], me.$element, busyAdmin.e.modalRenderBefore, true, false)) {
                return;
            }

            // 远程加载
            if (me.ajax) {
                me.load();
            } else {
                me.render();
            }
        },

        /**
         * 关闭对话框
         */
        hide : function () {
            if (!this.api) {
                return;
            }

            this.api.hide();
        },

        /**
         * 加载远程内容
         * @param {Boolean} isReload 是否重新加载
         */
        load : function (isReload) {
            var me = this;
            busyAdmin
                .request(me.options.url)
                .method(me.options.method || 'get')
                .params(me.options.params || {})
                .addHeader('Busy-Admin-Plugin', 'Modal')
                .parse('html')
                .success(function (res) {
                    busyAdmin.app.responseToHtml(res, function (html) {
                        var result = busyAdmin.app.extractContainer(html);
                        me._renderContent(result.content, result.appTitle);
                        me.render();

                        if (isReload) {
                            busyAdmin.helper.execCallback(me.options.show, me.element, [me], [me.$element, busyAdmin.app.$doc], busyAdmin.e.modalShow);
                            busyAdmin.helper.execCallback(me.options.shown, me.element, [me], [me.$element, busyAdmin.app.$doc], busyAdmin.e.modalShown);
                        }
                    });
                    return false;
                }).exec();
        },

        /**
         * 重新加载远程内容
         * @param {String} url 重新加载的URL
         */
        reload : function (url) {
            var me = this;
            if (url) {
                me.options.url = url;
            }

            me.ajax = true;
            me.load(true);
        },

        /**
         * 重置模态框布局
         */
        resetView : function () {
            if (!this.api) {
                return;
            }

            this.api.adjustDialog();
        },

        setOption : function (key, value) {
            this.options[key]       = value;
            this.sourceOptions[key] = value;
        },

        /**
         * 生成按钮
         * @param btn
         * @private
         */
        _createBtn : function (btn) {
            var me = this;
            if (btn.element) {
                btn.$element = $(btn.element);
            } else {
                btn.$element = $('<button type="button" class="btn"/>').addClass(btn.classes || 'btn-default').html(btn.text);
            }

            if (typeof btn.events === 'function') {
                btn.$element.off('click.busy.modal').on('click.busy.modal', function () {
                    btn.events.call(this, me);
                });
            } else {
                btn.events = btn.events || {};
                for (var eventsKey in btn.events) {
                    me._createBtnEvents(btn.$element, eventsKey, btn.events[eventsKey]);
                }
            }

            return btn.$element;
        },

        /**
         * 创建按钮时间监听
         * @param $btn
         * @param event
         * @param callback
         * @private
         */
        _createBtnEvents : function ($btn, event, callback) {
            var me = this;
            $btn.off(event).on(event, function () {
                typeof callback === 'function' && callback.call(this, me);
            });
        },

        /**
         * 销毁
         */
        destroy : function () {
            $('body').removeClass('modal-open');

            if (this.api) {
                this.api.removeBackdrop();
                this.api.resetAdjustments();
                this.api.resetScrollbar();
            }

            if (this.$container) {
                this.$container.remove();
            }
        }
    };

    Modal.TEMPLATE = '<div class="modal fade busy-admin-modal">\
        <div class="modal-dialog">\
            <div class="modal-content">\
                <div class="modal-header">\
                    <button type="button" class="close" data-dismiss="modal"><span>&times;</span></button>\
                    <h4 class="modal-title"></h4>\
                </div>\
                <div class="modal-body"></div>\
                <div class="modal-footer modal-footer-sys clearfix"></div>\
                <div class="modal-footer modal-footer-use clearfix"></div>\
            </div>\
        </div>\
    </div>';


    Modal.DEFAULTS = {
        type         : '',
        backdrop     : true,
        keyboard     : true,
        size         : '',
        title        : '',
        footer       : true,
        footerAlign  : null,
        content      : '',
        text         : false,
        url          : '',
        method       : 'get',
        params       : {},
        className    : '',
        padding      : undefined,
        borderTop    : true,
        borderBottom : true,
        height       : null,
        buttons      : [],
        zindex       : 'auto',
        close        : true,

        // 确认按钮
        ok     : '',
        okSkin : 'btn-primary',
        okIcon : '',

        // 取消按钮
        cancel     : '',
        cancelSkin : 'btn-default',
        cancelIcon : '',

        onOk           : $.noop,
        onCancel       : $.noop,
        onReady        : $.noop,
        onShow         : $.noop,
        onShown        : $.noop,
        onHide         : $.noop,
        onHidden       : $.noop,
        onRenderBefore : $.noop,

        formMethod    : 'post',
        formAction    : '',
        formOnSuccess : '@modal.close',
        locale        : $.extend({}, {
            confirm : '确定',
            cancel  : '取消',
            title   : '操作',
            reset   : '重置'
        }, ((busyAdmin.locale || {}).plugin || {}).dialog || {}),
    };

    Modal.KEY = 'busy.admin.modal.api';


    function Plugin(option) {
        var ret;
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(Modal.KEY);
            if (!api) {
                $this.data(Modal.KEY, (api = new Modal(this, typeof option === 'object' && option)));
            }

            if (typeof option === "string") {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    var eventGroup                  = 'modal';
    $.fn.busyAdminModal             = Plugin;
    $.fn.busyAdminModal.Constructor = Modal;
    busyAdmin.plugins.Modal         = Modal;
    busyAdmin.regSugar('modal', function (element, method, result, args) {
        var me = $(element).data(Modal.KEY);
        if (me instanceof Modal) {
            if (method === 'close') {
                method = 'hide';
            }

            me[method].apply(me, args);
        }
    });

    $.extend(busyAdmin.e, {
        /**
         * 模态框准备完成，显示前触发
         */
        modalRenderBefore : busyAdmin.ee('render-before', eventGroup),
        /**
         * 模态框准备完成，显示前触发
         */
        modalReady : busyAdmin.ee('ready', eventGroup),
        /**
         * 模态框刚显示触发
         */
        modalShow : busyAdmin.ee('show', eventGroup),
        /**
         * 模态框完全显示出来触发
         */
        modalShown : busyAdmin.ee('shown', eventGroup),
        /**
         * 模态框隐藏触发
         */
        modalHide : busyAdmin.ee('hide', eventGroup),
        /**
         * 模态框完全隐藏触发
         */
        modalHided : busyAdmin.ee('hidden', eventGroup),
        /**
         * 确定按钮点击回调
         */
        modalOk : busyAdmin.ee('ok', eventGroup),
        /**
         * 取消按钮点击回调
         */
        modalCancel : busyAdmin.ee('cancel', eventGroup),
    });

    // DATA-API
    $(document).on('click', '[data-toggle="busy-modal"],[busy-modal]', function (e) {
        e.preventDefault();

        Plugin.call($(this), 'show');

        return false;
    });

    return Modal;
}));
/**
 * 模态框
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/random', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    /**
     * 构造器
     * @param {Node} element
     * @param {Random.DEFAULTS} options
     * @constructor
     */
    var Random = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me.options  = $.extend(true, {}, Random.DEFAULTS, me.$element.data() || {}, options || {});
        me.init();
    };

    Random.prototype = {
        /**
         * 初始化
         */
        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }

            me.isInit = true;
            if (me.options.clickHandler) {
                me.$element.on('click', function () {
                    me.value();
                });
            }
        },

        /**
         * 生成随机数
         */
        value : function () {
            var me  = this;
            var opt = this.options;
            if (!opt.target) {
                return;
            }

            var $target = $(opt.target);
            if ($target.is(":input")) {
                $target.val(busyAdmin.helper.random(opt.length, opt.char));
                $target.busyAdminEventInput(true);
            } else {
                $target.text(busyAdmin.helper.random(opt.length, opt.char));
                $target.trigger('change');
            }
        }
    };

    Random.DEFAULTS = {
        target       : null, // 写入选择
        length       : 32, // 随机长度
        char         : null, // 随机字符
        clickHandler : true, // 是否绑定点击事件
    };

    Random.KEY = 'busy.admin.random.api';

    function Plugin(option) {
        var ret;
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(Random.KEY);
            if (!api) {
                $this.data(Random.KEY, (api = new Random(this, typeof option === 'object' && option)));
            }

            if (typeof option === "string") {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminRandom             = Plugin;
    $.fn.busyAdminRandom.Constructor = Random;
    busyAdmin.plugins.Random         = Random;

    // DATA-API
    $(document).on('click', '[data-toggle="busy-random"],[busy-random]', function (e) {
        e.preventDefault();

        Plugin.call($(this), {clickHandler : false});
        Plugin.call($(this), 'value');

        return false;
    });

    return Random;
}));
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/rangeSlider', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    var IonRangeSlider = null;

    var RangeSlider = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me.options  = this._parseOptions($.extend(true, {}, RangeSlider.DEFAULTS, me.$element.data() || {}, options || {}));

        var values = me.options.values;
        if (values) {
            me.$element.removeData('values').removeAttr('data-values');
            if (typeof values === 'string') {
                values = values.split(',');
            }
            if (!Array.isArray(values)) {
                values = [];
            }
            me.options.values = values;
        }

        me._parseValue(me.$element.val().trim());
        me.ready(me.init);
    };


    RangeSlider.prototype = {
        /**
         * 组件已准备完成
         * @param {Function} callback
         */
        ready : function (callback) {
            var me = this;
            if (IonRangeSlider) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.ionRangeSlider], function (ionRangeSlider) {
                    IonRangeSlider = ionRangeSlider;
                    typeof callback === 'function' && callback.call(me);
                });
            }
        },


        init : function () {
            var me       = this;
            var onStart  = me.options.onStart;
            var onChange = me.options.onChange;
            var onFinish = me.options.onFinish;
            var onUpdate = me.options.onUpdate;
            var $element = me.$element;
            var element  = me.element;

            me.options.onStart  = function (v) {
                busyAdmin.helper.execCallback(onStart, element, [v], $element, busyAdmin.e.rangeSliderStart);
            }
            me.options.onChange = function (v) {
                busyAdmin.helper.execCallback(onChange, element, [v], $element, busyAdmin.e.rangeSliderChange);
                $element.busyAdminEventInput(false, false);
            }
            me.options.onFinish = function (v) {
                busyAdmin.helper.execCallback(onFinish, element, [v], $element, busyAdmin.e.rangeSliderFinish);
            }
            me.options.onUpdate = function (v) {
                busyAdmin.helper.execCallback(onUpdate, element, [v], $element, busyAdmin.e.rangeSliderUpdate);
            }

            me.options.skin          = 'round';
            me.options.extra_classes = 'ba-range-slider';
            me.api                   = $element.ionRangeSlider(me.options).data('ionRangeSlider');

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady($element, 'RangeSlider', me);
        },

        /**
         * 处理选项
         * @param options
         * @return {*}
         * @private
         */
        _parseOptions : function (options) {
            for (var key in options) {
                if (key.substring(0, 2) === 'on') {
                    continue;
                }
                if (key === 'readonly') {
                    options.block = options[key];
                    delete options[key];
                }
                if (key === 'disabled') {
                    options.disable = options[key];
                    delete options[key];
                }

                if (-1 === key.indexOf('_')) {
                    var newKey = busyAdmin.helper.snake(key, '_');
                    if (newKey != key) {
                        options[newKey] = options[key];
                        delete options[key];
                    }
                }
            }

            return options;
        },

        /**
         * 处理值
         * @param value
         * @param must
         * @private
         */
        _parseValue : function (value, must) {
            value      = value === null || value === undefined ? '' : value + '';
            var me     = this;
            var values = me.options.values;
            if (values.length > 0) {
                if (me.options.type != 'single') {
                    var vas = value.split(me.options.input_values_separator);
                    if (!$.isNumeric(me.options.from) || must) {
                        me.options.from = values.indexOf(vas[0]);
                    }
                    if (vas.length > 1) {
                        if (!$.isNumeric(me.options.to) || must) {
                            me.options.to = values.indexOf(vas[1]);
                            me.options.to = me.options.to == -1 ? null : me.options.to;
                        }
                    } else {
                        if (must) {
                            me.options.to = null;
                        }
                    }
                } else {
                    if (!$.isNumeric(me.options.from) || must) {
                        me.options.from = values.indexOf(value);
                    }
                }
            } else {
                if (me.options.type != 'single') {
                    var vas         = value.split(me.options.input_values_separator);
                    me.options.from = vas[0];
                    if (vas.length > 1) {
                        me.options.to = vas[1];
                    } else {
                        me.options.to = null;
                    }
                } else {
                    me.options.from = value;
                }
            }
        },

        /**
         * 设置选项
         * @param key
         * @param value
         */
        setOption : function (key, value) {
            this.options[key] = value;
            this.setOptions();
        },

        /**
         * 设置选项
         * @param options
         */
        setOptions : function (options) {
            this.options = this._parseOptions($.extend(true, {}, this.options, options || {}));
            if (!this.api) {
                return;
            }
            this.api.update(this.options);
        },

        /**
         * 设置值
         * @param value
         */
        setValue : function (value) {
            if (!this.api) {
                return;
            }

            this.$element.val(value).busyAdminEventInput(true);
            this._parseValue(value, true);
            this.api.update(this.options);
        },


        getApi : function () {
            return this.api;
        },

        /**
         * 销毁
         */
        destroy : function () {
            let me = this;
            me.$element.removeAttr('data-toggle').removeAttr('busy-range-slider');
            if (!me.api) {
                return;
            }

            me.api.destroy();
        },
    };

    RangeSlider.DEFAULTS = {
        type                 : "single",
        min                  : 0,
        max                  : 100,
        from                 : null,
        to                   : null,
        step                 : 1,
        minInterval          : 0,
        maxInterval          : 0,
        dragInterval         : false,
        values               : [],
        fromFixed            : false,
        fromMin              : null,
        fromMax              : null,
        fromShadow           : false,
        toFixed              : false,
        toMin                : null,
        toMax                : null,
        toShadow             : false,
        prettifyEnabled      : true,
        prettifySeparator    : " ",
        prettify             : null,
        forceEdges           : false,
        keyboard             : true,
        grid                 : false,
        gridMargin           : true,
        gridNum              : 4,
        gridSnap             : false,
        hideMinMax           : false,
        hideFromTo           : false,
        prefix               : "",
        postfix              : "",
        maxPostfix           : "",
        decorateBoth         : true,
        valuesSeparator      : " — ",
        inputValuesSeparator : ",",
        disabled             : false,
        readonly             : false,
        scope                : null,

        onStart  : null,
        onChange : null,
        onFinish : null,
        onUpdate : null
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.rangeSlider.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new RangeSlider(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);

                if (option == 'destroy') {
                    $this.removeData(key);
                }
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminRangeSlider             = Plugin;
    $.fn.busyAdminRangeSlider.Constructor = RangeSlider;
    busyAdmin.plugins.RangeSlider         = RangeSlider;
    var eventName                         = 'range-slider';
    $.extend(busyAdmin.e, {
        rangeSliderStart  : busyAdmin.ee('start', eventName),
        rangeSliderChange : busyAdmin.ee('change', eventName),
        rangeSliderUpdate : busyAdmin.ee('update', eventName),
        rangeSliderFinish : busyAdmin.ee('finish', eventName),
    });

    busyAdmin.autoInit('[data-toggle="busy-range-slider"],[busy-range-slider]', function () {
        Plugin.call(this);
    });

    return RangeSlider;
}));
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/rate', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    var BootstrapStarRating = null;

    var Rate = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me.options  = $.extend(true, {}, Rate.DEFAULTS, me.$element.data() || {}, options || {});
        me.ready(me.init);
    };


    Rate.prototype = {
        /**
         * 组件已准备完成
         * @param {Function} callback
         */
        ready : function (callback) {
            var me = this;
            if (BootstrapStarRating) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.bootstrapStarRating], function () {
                    BootstrapStarRating = true;
                    typeof callback === 'function' && callback.call(me);
                });
            }
        },


        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }

            me.isInit = true;

            var options              = me.options
            options.containerClass   = 'ba-rate';
            options.clearCaption     = options.clearCaption || options.locale.clearCaption;
            options.clearButtonTitle = options.clearButtonTitle || options.locale.clearButtonTitle;
            options.defaultCaption   = options.defaultCaption || options.locale.caption;
            this._initDefaultCaption(options);


            // 星星标题
            if (!options.starTitles) {
                var starTitles = {};
                for (var i = 1; i <= options.max; i++) {
                    starTitles[i] = options.defaultCaption.replace(/\{rating}/g, i);
                }
                options.starTitles = starTitles;
            }

            // 辅助文案
            if (!options.starCaptions) {
                options = this._initTexts(options);
            }

            var event = function (name) {
                return 'rating:' + name;
            }

            var $element = me.$element;
            var element  = me.element;
            $element
                .on(event('clear') + ' ' + event('reset') + ' ' + event('refresh'), function (e) {
                    var name = e.type.substring(7);
                    name     = name.slice(0, 1).toUpperCase() + name.slice(1);
                    busyAdmin.helper.execCallback(options['on' + name], element, [], $element, busyAdmin.e['rate' + name]);
                })
                .on('change', function () {
                    $element.busyAdminEventInput(false, true);
                    busyAdmin.helper.execCallback(options.onChange, element, [], $element, busyAdmin.e.rateChange);
                });
            me.api = $element.addClass('input-hidden').rating(options).data('rating');

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady($element, 'Rate', me);
        },


        getApi : function () {
            return this.api;
        },

        /**
         * 设置值
         * @param val
         */
        setValue : function (val) {
            if (!this.api) {
                return;
            }

            this.api.update(val);
        },

        clear : function () {
            if (!this.api) {
                return;
            }
            this.api.clear();
        },

        reset : function () {
            if (!this.api) {
                return;
            }
            this.api.reset();
        },

        /**
         * 设置选项
         * @param key
         * @param value
         */
        setOption : function (key, value) {
            this.options[key] = value;
            this.setOptions(this.options);
        },

        /**
         * 设置选项
         * @param options
         */
        setOptions : function (options) {
            if (!this.api) {
                return;
            }
            this.options = $.extend(true, {}, this.options, options || {});
            this.options = this._initDefaultCaption(this.options);
            this.options = this._initTexts(this.options);
            this.api.refresh(this.options);
        },

        _initTexts : function (options) {
            // 辅助文案
            var texts = options.texts;
            if (texts.length > 0) {
                var caps     = {};
                var oldTexts = [];
                for (var i = options.step; i <= options.max; i += options.step) {
                    caps[i] = texts.splice(0, 1);
                    oldTexts.push(caps[i]);
                }
                options.texts        = oldTexts;
                options.starCaptions = caps;
            }

            return options;
        },

        _initDefaultCaption : function (options) {
            // 默认标题
            var defaultCaption = options.defaultCaption;
            if (-1 === defaultCaption.indexOf('{rating}')) {
                defaultCaption = '{rating}' + options.defaultCaption;
            }
            options.defaultCaption = defaultCaption;

            return options;
        },

        /**
         * 销毁
         */
        destroy : function () {
            let me    = this;
            me.isInit = false;
            me.$element.removeAttr('data-toggle').removeAttr('busy-rate');
            if (!me.api) {
                return;
            }

            me.api.destroy();
        },
    };

    Rate.DEFAULTS = {
        min            : 0,
        max            : 5,
        stars          : 5,
        size           : '',
        step           : 1,
        showClear      : false,
        showCaption    : false,
        defaultCaption : '',
        captionElement : null,
        clearElement   : null,
        texts          : ['极差', '失望', '一般', '满意', '惊喜'],
        animate        : false,
        onReset        : null,
        onClear        : null,
        onRefresh      : null,
        onChange       : null,
        locale         : $.extend({}, {
            caption          : '{rating}分',
            clearButtonTitle : '清理',
            clearCaption     : '未评分',
        }, ((busyAdmin.locale || {}).plugin || {}).rate || {}),
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.rate.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Rate(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);

                if (option == 'destroy') {
                    $this.removeData(key);
                }
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminRate             = Plugin;
    $.fn.busyAdminRate.Constructor = Rate;
    busyAdmin.plugins.Rate         = Rate;
    var eventName                  = 'rate';
    $.extend(busyAdmin.e, {
        rateChange  : busyAdmin.ee('change', eventName),
        rateClear   : busyAdmin.ee('clear', eventName),
        rateReset   : busyAdmin.ee('reset', eventName),
        rateRefresh : busyAdmin.ee('refresh', eventName),
    });

    busyAdmin.autoInit('[data-toggle="busy-rate"],[busy-rate]', function () {
        Plugin.call(this);
    });

    return Rate;
}));
/**
 * 自动请求
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/request', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    function argsToArray(args) {
        return Array.prototype.slice.call(args);
    }

    var Request = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me._parseOptions(options);
    }

    Request.prototype = {
        /**
         * 初始化
         */
        init : function (options) {
            var me = this;
            me._parseOptions(options);
            var exec = function () {
                var confirm = me.options.confirm;
                if (confirm) {
                    if (typeof confirm === 'function') {
                        confirm = confirm.call(me);
                    }
                    busyAdmin.dialog.confirm(confirm, {
                        btn : [me.options.confirmOk || me.options.locale.confirm, me.options.confirmCancel || me.options.locale.cancel]
                    }, function () {
                        me._exec();
                    });
                } else {
                    me._exec();
                }
            };

            // 处理点击
            if (me.options.clickHandler) {
                if (me.isInit) {
                    return;
                }

                me.isInit = true;
                me.$element.off('click.busyAdmin').on('click.busyAdmin', function (e) {
                    exec.call(me);

                    return false;
                });
            } else {
                exec.call(me);
            }
        },

        /**
         * 解析选项
         * @param options
         * @private
         */
        _parseOptions : function (options) {
            var me     = this;
            me.options = $.extend(true, {}, Request.DEFAULTS, me.options || {}, me.$element.data() || {}, options || {});

            // 请求地址
            if (!me.options.url || me.options.url === true) {
                var href = me.$element.attr('href');
                if (href) {
                    me.options.url = href;
                }
            }
            if (me.options.url === true) {
                me.options.url = document.URL;
            }

            if (!me.options.method) {
                me.options.method = Request.DEFAULTS.method;
            }
        },

        /**
         * 执行请求
         * @private
         */
        _exec : function () {
            var me  = this;
            var opt = me.options;
            if (!busyAdmin.helper.checkURL(me.options.url)) {
                console.error('请检查请求URL是否合规');
                return;
            }

            // 支持闭包
            if (typeof opt.params === 'function') {
                opt.params = opt.params.call(me);
            }

            busyAdmin
                .request(opt.url)
                .headers(opt.headers || {})
                .pending(opt.pending, opt.pendingMessage)
                .params(opt.params || {})
                .method(opt.method)
                .before(function (xhr, ajaxSetting) {
                    return false !== busyAdmin.helper.execCallback(opt.onBefore, me.element, argsToArray(arguments), me.$element, busyAdmin.e.requestBefore, true, false);
                })
                .complete(function (result, type, xhr) {
                    return false !== busyAdmin.helper.execCallback(opt.onComplete, me.element, argsToArray(arguments), me.$element, busyAdmin.e.requestComplete, true, false);
                })
                .success(function (result, type, xhr) {
                    if (false === busyAdmin.helper.execCallback(opt.onSuccess, me.element, argsToArray(arguments), me.$element, busyAdmin.e.requestSuccess, true, false)) {
                        return false;
                    }

                    if (opt.onSuccess === false) {
                        return false;
                    }

                    busyAdmin.dialog.tipSuccess(result.message);
                    busyAdmin.dispatchSugar(me.element, opt.onSuccess, result, []);

                    return false;
                })
                .error(function (result, type, xhr) {
                    if (false === busyAdmin.helper.execCallback(opt.onError, me.element, argsToArray(arguments), me.$element, busyAdmin.e.requestError, true, false)) {
                        return false;
                    }

                    if (opt.onError === false) {
                        return false;
                    }

                    busyAdmin.dialog.tipError(result.message);
                    busyAdmin.dispatchSugar(me.element, opt.onError, result, []);

                    return false;
                })
                .exec();
        }
    };

    Request.DEFAULTS = {
        clickHandler   : false, // 是否拦截点击
        url            : undefined, // 请求URL
        params         : {}, // 请求参数
        headers        : {}, // 请求头
        confirm        : undefined, // 确认文案
        confirmOk      : null, // 确认按钮文本
        confirmCancel  : null, // 取消按钮文本
        method         : 'get', // 请求方式
        pending        : true, // 显示loading
        pendingMessage : undefined, // loading文案

        onSuccess  : $.noop, // 请求成功回调
        onError    : $.noop, // 请求失败回调
        onComplete : $.noop, // 请求完成回调
        onBefore   : $.noop, // 请求前回调

        locale : $.extend({}, {
            confirm : '确定',
            cancel  : '取消'
        }, ((busyAdmin.locale || {}).plugin || {}).request || {}),
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.request.api';
        var args = argsToArray(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Request(this, typeof option === 'object' && option)));
            }

            if (typeof option === "string") {
                ret = api[option].apply(api, args);
            } else {
                api.init(typeof option === 'object' && option);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminRequest             = Plugin;
    $.fn.busyAdminRequest.Constructor = Request;
    busyAdmin.plugins.Request         = Request;
    var eventGroup                    = 'request';
    $.extend(busyAdmin.e, {
        /**
         * 请求前回调
         */
        requestBefore : busyAdmin.ee('before', eventGroup),
        /**
         * 请求完成回调
         */
        requestComplete : busyAdmin.ee('complete', eventGroup),
        /**
         * 请求成功回调
         */
        requestSuccess : busyAdmin.ee('success', eventGroup),
        /**
         * 请求失败回调
         */
        requestError : busyAdmin.ee('error', eventGroup),
    });


    // DATA-API
    $(document).on('click.busyAdmin', '[data-toggle="busy-request"],[busy-request]', function (e) {
        e.preventDefault();

        Plugin.call($(this));

        return false;
    });

    return Request;
}));
/**
 * 自动搜索
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/searchBar', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    function getElement($el, id) {
        return $el.find('[data-search-id="' + id + '"]')
    }

    var SearchBar = function (element, options) {
        var me      = this;
        me.$element = $(element);
        me.options  = $.extend(true, {}, SearchBar.DEFAULTS, me.$element.data() || {}, options || {});

        // 搜索字段解析
        if (me.options.fields && typeof me.options.fields === 'string') {
            var fields = me.options.fields.split(',');
            var arr    = [];
            fields.map(function (item) {
                var itemArr = item.split(':');
                var value   = (itemArr[0] || '').trim();
                var name    = (itemArr[1] || '').trim();
                arr.push({
                    name  : name,
                    value : value
                })
            });
            me.options.fields = arr;
        }

        if (!me.options.contentLeft) {
            me.contentLeftHtml = getElement(me.$element, 'left').html();
        } else {
            me.contentLeftHtml = $(me.options.contentLeft).html();
        }
        if (!me.options.contentRight) {
            me.contentRightHtml = getElement(me.$element, 'right').html();
        } else {
            me.contentRightHtml = $(me.options.contentRight).html();
        }
        if (!me.options.toolbar) {
            me.toolbarHtml = getElement(me.$element, 'toolbar').html();
        } else {
            me.toolbarHtml = $(me.options.toolbar).html();
        }

        me.options.url = me.options.url || document.URL;

        me.init();
    };

    SearchBar.prototype = {
        /**
         * 初始化
         */
        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }
            me.isInit = true;

            var opt      = me.options;
            var template = SearchBar.TEMPLATE.replace('_toolbar_', me.toolbarHtml || '');
            template     = template.replace('_content_left_', me.contentLeftHtml || '');
            template     = template.replace('_content_right_', me.contentRightHtml || '');
            template     = template.replace('_title_', '<span>' + (me.options.title || me.options.locale.title) + '</span>');

            me.$template      = $(template);
            me.$form          = getElement(me.$template, 'form').attr('action', opt.url);
            me.$fieldSelect   = getElement(me.$template, 'field');
            me.$accurateInput = getElement(me.$template, 'accurate').prop('checked', opt.accurate).attr('title', opt.locale.accurate).attr('name', opt.accurateName).addClass(opt.accurateClass);
            me.$wordInput     = getElement(me.$template, 'word').attr('name', me.options.wordName).attr('placeholder', me.options.placeholder ? me.options.placeholder : opt.locale.placeholder);
            me.$keywords      = getElement(me.$template, 'keywords');
            me.$btnShowAll    = getElement(me.$template, 'all').html(opt.locale.showAll).addClass(opt.showAllBtnClass).attr('href', opt.url);
            me.$btnSubmit     = getElement(me.$template, 'submit').addClass(opt.searchBtnClass);
            me.$btnSubmit.find('span').html(opt.locale.search);

            me.$accurateWrap = me.$accurateInput.closest('.checkbox');

            var filter = [me.options.accurateName, me.options.fieldName, me.options.wordName];
            me.$template.find('[name]').each(function () {
                var $this = $(this);
                var name  = $this.attr('name');
                if (!name) {
                    return true;
                }

                if (-1 !== filter.indexOf(name) || -1 !== name.indexOf('static[')) {
                    return true;
                }

                $this.attr('name', 'static[' + name + ']');
            });

            // 字段选项
            var fieldOptions = '';
            (opt.fields || []).map(function (item) {
                var name  = item.name || '';
                var value = item.value || '';
                fieldOptions += '<option value="' + value + '">' + name + '</option>';
            });
            if (!fieldOptions) {
                me.$fieldSelect.remove();
                me.$keywords.addClass('no-field');
            } else {
                me.$keywords.addClass('has-field');
                var optionsHtml = '';
                if (opt.fieldUnlimited) {
                    optionsHtml += '<option value="_unlimited_">' + (opt.fieldUnlimited === true ? opt.locale.unlimited : opt.fieldUnlimited) + '</option>';
                }
                optionsHtml += fieldOptions;
                me.$fieldSelect.html(optionsHtml);
            }

            // 删除精确搜索
            if (!opt.accurateShow) {
                me.$accurateWrap.remove();
            }

            // 自动选中
            var queryParams = busyAdmin.helper.parseURL(document.URL).params || {};
            me.$form.busyAdminFormVal($.extend({}, busyAdmin.helper.parseURL(opt.url).params || {}, queryParams));

            // 搜索标记
            var isSearch = queryParams.hasOwnProperty(opt.searchMark);
            if (!isSearch) {
                me.$form.append('<input type="hidden" name="' + opt.searchMark + '" value="1"/>');
            }

            // 精确搜索无状态的时候选中处理
            if (isSearch && !queryParams.hasOwnProperty(opt.locale.accurateName) && opt.accurate === true) {
                me.$accurateInput.prop('checked', false);
            }

            me.$element.html(me.$template);

            busyAdmin.app.triggerResize();

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'SearchBar', me);
        }
    };


    SearchBar.TEMPLATE = '<div class="busy-admin-search clearfix">\
        <div class="busy-admin-search-left fa fa-search">_title_</div>\
        <div class="busy-admin-search-right clearfix">_toolbar_</div>\
		<div class="busy-admin-search-form">\
		    <form data-search-id="form" method="get" class="form-inline">\
		        _content_left_\
		        <div class="form-group" data-search-id="keywords">\
		            <div class="input-group">\
		                <div class="input-group-btn"><select data-search-id="field" class="form-control" name="field"></select></div>\
		                <input data-search-id="word" class="form-control" name="word" />\
		            </div>\
		        </div>\
		        <div class="checkbox"><input class="pill" data-search-id="accurate" type="checkbox" data-toggle="busy-checkbox" value="1" /></div>\
		        _content_right_\
		        <div class="form-group">\
		            <button data-search-id="submit" class="btn" type="submit"><i class="fa fa-search"></i> <span></span></button>\
		            <a type="reset" data-search-id="all" class="btn"></a>\
		        </div>\
		    </form>\
		</div>\
    </div>';

    SearchBar.DEFAULTS = {
        url            : '',
        fields         : [], // 搜索字段集合
        fieldUnlimited : false, // 是否为字段显示不限选项
        fieldName      : 'field', // 字段参数名称
        wordName       : 'word', // 关键词参数名称
        placeholder    : '', // 关键词输入提示
        title          : '', // 搜索栏标题

        accurate      : false, // 精确搜索默认是否选中
        accurateShow  : false, // 是否显示精确搜索
        accurateClass : '', // 精确搜索样式
        accurateName  : 'accurate', // 精确搜索参数名称

        toolbar      : '',
        contentLeft  : '',
        contentRight : '',

        searchMark      : '_search', // 搜索结果标记参数名称
        searchBtnClass  : 'btn-info', // 搜索按钮样式
        showAllBtnClass : 'btn-default', // 显示全部按钮样式

        locale : $.extend({
            search      : '搜索',
            showAll     : '显示全部',
            placeholder : '请输入关键字',
            accurate    : '精确搜索',
            unlimited   : '不限',
            title       : '按条件搜索',
        }, ((busyAdmin.locale || {}).plugin || {}).searchBar || {})
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.searchBar.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new SearchBar(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }


    $.fn.busyAdminSearchBar             = Plugin;
    $.fn.busyAdminSearchBar.Constructor = SearchBar;
    busyAdmin.plugins.SearchBar         = SearchBar;

    busyAdmin.autoInit('[data-toggle="busy-search-bar"],[busy-search-bar]', function () {
        Plugin.call(this);
    });

    return SearchBar;
}));
/**
 * 下拉选择器
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/selectPicker', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    var Select2IsReady = false;
    var ArtTemplate    = null;
    var SelectPicker   = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me.options  = $.extend(true, {}, SelectPicker.DEFAULTS, me.$element.data(), options || {});

        if (me.$element.attr('multiple')) {
            me.options.multiple = true;
        }

        me.ready(me.init);
    };

    SelectPicker.prototype = {
        /**
         * 组件已准备完成
         * @param {Function} callback
         */
        ready : function (callback) {
            var me = this;
            switch (me.options.type) {
                default:
                    if (Select2IsReady && ArtTemplate) {
                        typeof callback === 'function' && callback.call(me);
                    } else {
                        require([busyAdmin.lib.select2, busyAdmin.lib.artTemplate], function (Select2, artTemplate) {
                            if (!Select2IsReady) {
                                Select2IsReady = true;
                                var oldMethods = busyAdmin.helper.extends(Select2.prototype, {
                                    render : function () {
                                        var $container = busyAdmin.helper.override(oldMethods, 'render', this, arguments);
                                        $container.addClass('busy-admin-select2');
                                        return $container;
                                    }
                                });
                            }

                            ArtTemplate = artTemplate;
                            $.fn.select2.defaults.set("theme", "bootstrap");
                            typeof callback === 'function' && callback.call(me);
                        });
                    }
            }
        },

        /**
         * 初始化
         */
        init : function () {
            var me   = this;
            var opts = me.options;
            if (me.isInit) {
                return;
            }

            me.isInit = true;

            // 宽度
            if (opts.width) {
                var width = opts.width;
                if (typeof opts.width === 'number') {
                    width = opts.width + 'px';
                }
                me.$element.css('width', width);
            }

            // 卸载
            $(document).one(busyAdmin.e.appRenderBefore, function () {
                me.destroy();
            });

            switch (opts.type) {
                default:
                    me._initSelect2();
            }
        },

        /**
         * Select2初始化
         * @private
         */
        _initSelect2 : function () {
            var me   = this;
            var opts = me.options;
            me.url   = opts.model ? busyAdmin.getConfig('selectPicker').url : (typeof opts.url === 'function' ? opts.url() : opts.url);

            me.isAjax         = opts.url || opts.model;
            me.select2Options = {};
            $.extend(true, me.select2Options, opts.select2Options || {}, {
                minimumResultsForSearch : opts.search ? 0 : -1,
                placeholder             : opts.placeholder,
                allowClear              : opts.clear,
                multiple                : opts.multiple,
                width                   : 'style',
                containerCssClass       : ':all:',
                data                    : opts.list,
                minimumInputLength      : opts.searchMin,
                maximumSelectionLength  : opts.max,
                tags                    : opts.select2Tags,
                tokenSeparators         : opts.select2TagsSpace,
                language                : {
                    errorLoading    : function () {
                        return opts.locale.errorLoading;
                    },
                    inputTooLong    : function (args) {
                        var overChars = args.input.length - args.maximum;
                        return busyAdmin.helper.sprintf(opts.locale.inputTooLong, overChars);
                    },
                    inputTooShort   : function (args) {
                        var remainingChars = args.minimum - args.input.length;
                        return busyAdmin.helper.sprintf(opts.locale.inputTooShort, remainingChars);
                    },
                    loadingMore     : function () {
                        return opts.locale.loadingMore;
                    },
                    maximumSelected : function (args) {
                        return busyAdmin.helper.sprintf(opts.locale.maximumSelected, args.maximum);
                    },
                    noResults       : function () {
                        return opts.locale.noResults;
                    },
                    searching       : function () {
                        return opts.locale.searching;
                    }
                },
                ajax                    : me.isAjax ? {
                    delay     : opts.modelLength === 0 ? 0 : opts.delay,
                    url       : me.url,
                    transport : function (params, success, failure) {
                        if (opts.modelLength === 0 && me.remoteData) {
                            success(me.remoteData);
                            return;
                        }

                        return busyAdmin
                            .request(params.url)
                            .method('get')
                            .addHeader('Busy-Admin-Plugin', 'SelectPicker')
                            .params(me._parseParams({
                                action     : 'list',
                                word       : params.data.q,
                                page       : params.data.page,
                                model      : opts.model,
                                id_field   : opts.modelIdField || '',
                                text_field : opts.modelTextField || '',
                                length     : opts.modelLength,
                                order      : opts.modelOrder || '',
                                extend     : opts.modelExtend ? 1 : 0
                            }))
                            .pending(false)
                            .success(function (response, type, xhr) {
                                me.remoteData = response.result;
                                success(response.result);
                                return false;
                            })
                            .error(function (response, type, xhr) {
                                failure();
                                return false;
                            })
                            .exec();
                    },
                } : null
            });

            // 选中项模板
            var selectedTemplate = opts.selectedTemplate;
            if (selectedTemplate) {
                if (typeof selectedTemplate === 'function') {
                    me.select2Options.templateSelection = selectedTemplate;
                } else if (typeof selectedTemplate === 'string') {
                    if (selectedTemplate.charAt(0) === '@') {
                        var selector                        = '#' + selectedTemplate.substring(1);
                        me.select2Options.templateSelection = function (state, container) {
                            return $(ArtTemplate.render($(selector)[0].innerHTML, {
                                data      : state,
                                container : container,
                            }));
                        }
                    } else {
                        me.select2Options.templateSelection = function (state, container) {
                            var callback = busyAdmin.helper.scope(selectedTemplate);
                            if (typeof callback === 'function') {
                                return callback(state, container);
                            }
                        }
                    }
                }
            }

            // 选项模板
            var optionTemplate = opts.optionTemplate;
            if (optionTemplate) {
                if (typeof optionTemplate === 'function') {
                    me.select2Options.templateResult = optionTemplate;
                } else if (typeof optionTemplate === 'string') {
                    if (optionTemplate.charAt(0) === '@') {
                        var selector                     = '#' + optionTemplate.substring(1);
                        me.select2Options.templateResult = function (state, container) {
                            return $(ArtTemplate.render($(selector)[0].innerHTML, {
                                data      : state,
                                container : container,
                            }));
                        }
                    } else {
                        me.select2Options.templateResult = function (state, container) {
                            var callback = busyAdmin.helper.scope(optionTemplate);
                            if (typeof callback === 'function') {
                                return callback(state, container);
                            }
                        }
                    }
                }
            }

            me.select2Api = me.$element.select2(me.select2Options).data('select2');

            // 缓存结果集搜索处理
            if (me.isAjax && opts.modelLength === 0) {
                var query                       = me.select2Api.dataAdapter.query;
                me.select2Api.dataAdapter.query = function (params, callback) {
                    query.call(this, params, function (data) {
                        var list = [];
                        $.each(data.results, function () {
                            var item = me.select2Api.options.options.matcher(params, this);
                            if (item) {
                                list.push(item);
                            }
                        });

                        return callback({
                            results    : list,
                            pagination : {more : false}
                        });
                    });
                };
            }

            // 多选禁止搜索
            if (opts.multiple) {
                me.$element.on('select2:opening select2:closing', function (e) {
                    $(this).parent().find('.select2-search__field').prop('disabled', !opts.search);
                });
            }

            // 默认选中项
            if (opts.value) {
                me.value(opts.value);
            }

            // 绑定事件
            me.$element.on('select2:closing select2:close select2:opening select2:open select2:selecting select2:select select2:unselecting select2:unselect select2:clearing select2:clear', function (e) {
                var eventName = e.type.substring(8);
                if (eventName.substring(eventName.length - 3) === 'ing') {
                    eventName = eventName.replace('ing', '');
                    eventName = eventName === 'clos' ? 'close' : eventName;
                    eventName = 'before-' + eventName;
                }

                var objEvent = busyAdmin.helper.camel(('on_' + eventName).replace(/\-/g, '_'));
                busyAdmin.helper.execCallback(me.options[objEvent], me.element, [me], me.$element, busyAdmin.ee(eventName, 'select-picker'));
            });

            // 验证提示
            me.$element.on(busyAdmin.e.verifyErrorPlacement, function (e, error) {
                me.select2Api.$container.after(error);
                return false;
            });

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'SelectPicker', me);
        },

        /**
         * 解析参数
         * @param params
         * @return {*}
         * @private
         */
        _parseParams : function (params) {
            var opts = this.options;
            if (typeof opts.params === "object") {
                params = $.extend({}, opts.params, params);
            } else if (opts.params) {
                var callback = busyAdmin.helper.scope(opts.params);
                if (typeof callback === 'function') {
                    params = $.extend({}, callback() || {}, params);
                }
            }

            return params;
        },

        /**
         * 打开/关闭
         * @param {boolean} open
         */
        open : function (open) {
            if (open) {
                this.select2Api.open();
            } else {
                this.select2Api.close();
            }
        },

        /**
         * 设置选中项
         * @param {[]} value
         */
        value : function (value) {
            var me   = this;
            var opts = me.options;

            if (me.isAjax) {
                me.$element.empty();
                if (!value) {
                    me.$element.val(value).trigger('change');
                    return;
                }

                busyAdmin
                    .request(me.url)
                    .method('get')
                    .addHeader('Busy-Admin-Plugin', 'SelectPicker')
                    .params(me._parseParams({
                        action     : 'value',
                        word       : value,
                        model      : opts.model,
                        id_field   : opts.modelIdField || '',
                        text_field : opts.modelTextField || '',
                        length     : opts.modelLength,
                        order      : opts.modelOrder || '',
                        extend     : opts.modelExtend ? 1 : 0
                    }))
                    .pending(false)
                    .success(function (response, type, xhr) {
                        var list = response.result.results || [];
                        if (list.length === 0) {
                            return false;
                        }

                        if (opts.multiple) {
                            $.map(list, function (item) {
                                me.$element.append(new Option(item.text || '', item.id || '', true, true));
                            });
                        } else {
                            me.$element.append(new Option(list[0].text || '', list[0].id || '', true, true));
                            me.$element.trigger({
                                type   : 'select2:select',
                                params : list[0]
                            });
                        }

                        me.$element.val(value).trigger('change');

                        return false;
                    })
                    .error(function (response, type, xhr) {
                        me.$element.val(value).trigger('change');

                        return false;
                    })
                    .exec();
            } else {
                this.$element.val(value).trigger('change');
            }
        },

        /**
         * 添加选项
         * @param {[Option], Option} value
         */
        append : function (value) {
            this.$element.append(value).trigger('change');
        },

        /**
         * 设置新选项
         * @param {[object]} data
         */
        list : function (data) {
            var options = '';
            var me      = this;
            $.map(data || [], function (item) {
                if (item.hasOwnProperty('children')) {
                    options += '<optgroup label="' + item.text + '" ' + me._toAttr(item) + '>';
                    $.map(item.children || [], function (vo) {
                        options += '<option value="' + vo.id + '"' + me._toAttr(vo) + '>' + vo.text + '</option>';
                    });
                    options += '</optgroup>';
                } else {
                    options += '<option value="' + item.id + '"' + me._toAttr(item) + '>' + item.text + '</option>';
                }
            });

            this.$element.html(options).trigger('change');
        },

        /**
         * 转为attr
         * @param data
         * @return {string}
         * @private
         */
        _toAttr : function (data) {
            var attr = '';
            for (var key in data) {
                if (key === 'text' || key === 'id' || key === 'children') {
                    continue;
                }

                var value = data[key];
                if (key === 'disabled' || key === 'selected' || key === 'readonly') {
                    value = key;
                }

                attr += key + '="' + value + '" ';
            }

            return attr;
        },

        /**
         * 销毁
         */
        destroy : function () {
            var me        = this;
            me.remoteData = null;
            if (me.select2Api) {
                try {
                    me.select2Api.destroy();
                } catch (e) {
                    console.warn(e);
                }
            }
        }
    }


    SelectPicker.DEFAULTS = {
        type        : '',
        placeholder : '',// 占位
        search      : true, // 是否允许搜索
        searchMin   : 0, // 最少需要输入多少个字符才进行搜索
        multiple    : false, // 是否允许多选
        clear       : false, // 是否显示清除按钮
        list        : null,
        max         : 0, // 最大允许选择数
        value       : null, // 默认选中项
        width       : null, // 宽度

        // 异步URL数据
        url    : false, // 是否启用异步数据 或 异步数据地址
        delay  : 250, // 异步搜索延迟毫秒
        params : null, // 参数

        // 异步模型数据
        model          : '', // 自动查询模型数据
        modelExtend    : false, // 自动模型数据是否包涵扩展数据
        modelIdField   : '', // 模型id键
        modelTextField : '', // 模型text键
        modelOrder     : '', // 模型数据排序方式，多个用英文逗号隔开
        modelLength    : 20, // 模型数据每页展示条数，0为全部，会缓存结果

        selectedTemplate : null, // 选中项模板
        optionTemplate   : null, // 选项模板

        // select2
        select2Tags      : false, // 是否为tags模式，该模式下，输入的tag不存则可以创建
        select2TagsSpace : null, // 设置tag分割字符
        select2Options   : {},

        locale : $.extend({
            errorLoading    : '数据加载失败',
            inputTooLong    : '请删除%s个字符',
            inputTooShort   : '至少输入%s个字符或更多字符',
            loadingMore     : '加载中...',
            maximumSelected : '最多能选择%s个',
            noResults       : '未找到任何结果',
            searching       : '搜索中...',
        }, ((busyAdmin.locale || {}).plugin || {}).select || {}),
    };

    /**
     * @param option
     * @return {jQuery|SelectPicker|*}
     * @constructor
     */
    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.select.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new SelectPicker(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === 'string') {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminSelectPicker             = Plugin;
    $.fn.busyAdminSelectPicker.Constructor = SelectPicker;
    busyAdmin.plugins.SelectPicker         = SelectPicker;
    $.extend(busyAdmin.e, {
        /**
         * 每当选择或删除选项时触发
         */
        selectPickerChange : 'change',
        /**
         * 关闭前触发
         */
        selectPickerBeforeClose : busyAdmin.ee('before-close', 'select-picker'),
        /**
         * 关闭后触发
         */
        selectPickerClose : busyAdmin.ee('close', 'select-picker'),
        /**
         * 打开前触发
         */
        selectPickerBeforeOpen : busyAdmin.ee('before-open', 'select-picker'),
        /**
         * 打开后触发
         */
        selectPickerOpen : busyAdmin.ee('open', 'select-picker'),
        /**
         * 选择前触发
         */
        selectPickerBeforeSelect : busyAdmin.ee('before-select', 'select-picker'),
        /**
         * 选择后触发
         */
        selectPickerSelect : busyAdmin.ee('select', 'select-picker'),
        /**
         * 取消选择前触发
         */
        selectPickerBeforeUnselect : busyAdmin.ee('before-unselect', 'select-picker'),
        /**
         * 取消选择后触发
         */
        selectPickerUnselect : busyAdmin.ee('unselect', 'select-picker'),
        /**
         * 清空前触发
         */
        selectPickerBeforeClear : busyAdmin.ee('before-clear', 'select-picker'),
        /**
         * 清空后触发
         */
        selectPickerClear : busyAdmin.ee('clear', 'select-picker'),
    });

    busyAdmin.autoInit('[data-toggle="busy-select-picker"],[busy-select-picker]', function () {
        Plugin.call($(this));
    });

    return SelectPicker;
}));
/**
 * 穿梭框
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/shuttle', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {

    var Panel = function (api, $elem, isLeft) {
        this.api          = api;
        this.$element     = $elem;
        this.$header      = $elem.find('.panel-heading');
        this.$title       = this.$header.find('span');
        this.index        = Shuttle.INDEX++;
        this.childClass   = '__busy_admin_shuttle_child_' + this.index;
        this.parentClass  = '__busy_admin_shuttle_parent_' + this.index;
        this.$checkAll    = this.$header.find('input').attr('data-toggle', 'busy-checked-all').attr('data-child', '.' + this.childClass).addClass(this.parentClass);
        this.$searchBar   = $elem.find('.panel-search');
        this.$searchInput = this.$searchBar.find('input');
        this.$body        = $elem.find('.panel-body');
        this.$empty       = this.$body.find('.empty-info').html(api.options.locale.noData);
        this.checkTimer   = null;
        this.emptyTimer   = null;
        this.list         = [];
        this.isLeft       = isLeft;

        if (isLeft) {
            this.$title.html(api.options.leftTitle);
            this.$moveBtn = api.$btnRight;
            this.$moveBtn.find('span').html(api.options.locale.moveDown);
        } else {
            this.$title.html(api.options.rightTitle);
            this.$moveBtn = api.$btnLeft;
            this.$moveBtn.find('span').html(api.options.locale.moveUp);
        }
        this.$element.css('height', api.options.height + 'px');

        var me        = this;
        var topHeight = me.$header.outerHeight(true);
        if (!api.options.search) {
            me.$searchBar.hide();
        } else {
            topHeight += me.$searchBar.outerHeight(true);
        }

        me.$body
          .css('height', (api.options.height - topHeight) + 'px')
          .on('change', ':checkbox', function () {
              clearTimeout(me.checkTimer);
              me.checkTimer = setTimeout(function () {
                  if (me.$body.find(':checked').length > 0) {
                      me.$moveBtn.removeClass('btn-default').addClass('btn-primary').prop('disabled', false);
                  } else {
                      me.$moveBtn.removeClass('btn-primary').addClass('btn-default').prop('disabled', true);
                  }
              });
          });

        // 搜索
        me.$searchInput.attr('placeholder', api.options.placeholder).on('input', function () {
            var value = ($(this).val() || '').trim();
            if (value === '') {
                $.map(me.list, function (item) {
                    item.$item.removeClass('hide');
                });
                me.$empty.html(api.options.locale.noData)
                me.empty();
                return;
            }

            $.map(me.list, function (item) {
                if (-1 !== item.text.indexOf(value)) {
                    item.$item.removeClass('hide');
                } else {
                    item.$item.addClass('hide');
                }
                me.$empty.html(api.options.locale.noMatchData)
                me.empty();
            });
        });
    }

    Panel.prototype = {
        /**
         * 添加选项
         * @param {object} item
         */
        append : function (item) {
            if (!item.$item) {
                item.$item     = $('<div class="checkbox' + (item.disabled ? ' disabled' : '') + '"><label><input type="checkbox" value="' + item.id + '"' + (item.disabled ? ' disabled' : '') + ' /><span>' + item.text + '</span></label></div>');
                item.$checkbox = item.$item.find('input').attr('data-toggle', 'busy-checked-all');
            }

            item.$checkbox.off('change').on('change', function () {
                item.selected = $(this).prop('checked');
            });
            item.$checkbox.prop('checked', false).attr('data-parent', '.' + this.parentClass).attr('class', this.childClass);
            this.list.push(item);
            this.$body.append(item.$item);
            this.empty();
        },

        /**
         * 移动
         * @param {Panel} panel
         */
        moveTo : function (panel) {
            var me = this;
            if (panel == me) {
                return;
            }

            var data = [];
            me.list  = $.map(me.list, function (item, index) {
                if (item.selected && !item.disabled) {
                    item.selected = false;
                    item.$item.remove();
                    panel.append(item);
                    data.push({
                        id       : item.id,
                        text     : item.text,
                        disabled : item.disabled
                    })
                    return null;
                }

                return item;
            });

            busyAdmin.helper.execCallback(me.api.options.onChange, me.api.element, [me.api, data, me.isLeft], me.api.$element, busyAdmin.e.shuttleChange);
            me.$checkAll.prop('checked', false);
            me.$checkAll[0].indeterminate = false;
            me.$moveBtn.prop('disabled', true).removeClass('btn-primary').addClass('btn-default');
            me.empty();
        },

        /**
         * 空内容
         */
        empty : function () {
            var me = this;
            clearTimeout(me.emptyTimer);
            me.emptyTimer = setTimeout(function () {
                if (me.$body.find('.checkbox:not(.hide)').length > 0) {
                    me.$empty.hide();
                } else {
                    me.$empty.show();
                }
            });
        }
    };

    var Shuttle = function (element, options) {
        var me          = this;
        me.element      = element;
        me.$element     = $(element);
        me.options      = $.extend(true, {}, Shuttle.DEFAULTS, me.$element.data(), options || {});
        me.options.list = me.options.list || [];
        me.init();
    };

    Shuttle.prototype = {
        /**
         * 初始化
         */
        init : function () {
            var me   = this;
            var opts = me.options;
            if (me.isInit) {
                return;
            }

            me.isInit    = true;
            me.$template = $(Shuttle.TEMPLATE);

            // Select
            me.isSelect = me.element.tagName.toLowerCase() === 'select';
            if (me.isSelect) {
                me.$select = me.$element.addClass('hide');
                me.$select.after(me.$template);
                opts.name = me.$select.attr('name');

                var list = [];
                me.$select.find('option').each(function () {
                    list.push({
                        id       : this.value || '',
                        text     : $(this).text() || '',
                        selected : this.hasAttribute('selected'),
                        disabled : this.hasAttribute('disabled'),
                    });
                });

                opts.list.unshift.apply(opts.list, list);
            } else {
                me.$select = $('<select />').addClass('hide');
                me.$template.append(me.$select);
                me.$element.html(me.$template);
            }
            me.$select.attr('name', opts.name).attr('multiple', 'multiple');

            // Panel
            me.$btnLeft   = me.$template.find('.btn-left');
            me.$btnRight  = me.$template.find('.btn-right');
            me.leftPanel  = new Panel(me, me.$template.find('.panel-left'), true);
            me.rightPanel = new Panel(me, me.$template.find('.panel-right'), false);

            // 右边移动到左边
            me.$btnLeft.on('click', function () {
                if (me.$btnLeft.prop('disabled')) {
                    return;
                }

                me.rightPanel.moveTo(me.leftPanel);
                me._setVal();
            });

            // 左边移动到右边
            me.$btnRight.on('click', function () {
                if (me.$btnRight.prop('disabled')) {
                    return;
                }

                me.leftPanel.moveTo(me.rightPanel);
                me._setVal();
            });

            // 解析数据
            var optionsHtml = '';
            $.map(opts.list || [], function (item) {
                item.id       = item.id || '';
                item.text     = item.text || '';
                item.disabled = item.disabled || false;
                item.selected = item.selected || false;
                if (item.selected) {
                    me.rightPanel.append(item);
                } else {
                    me.leftPanel.append(item);
                }

                optionsHtml += '<option value="' + item.id + '"' + (item.selected ? ' selected' : '') + (item.disabled ? ' disabled' : '') + '>' + item.text + '</option>';
            });
            me.$select.html(optionsHtml);

            // 验证提示
            me.$element.on(busyAdmin.e.verifyErrorPlacement, function (e, error) {
                me.$template.after(error);
                return false;
            });

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'Shuttle', me);
        },


        /**
         * 设置选中项
         * @private
         */
        _setVal : function () {
            var me = this;
            $.map(me.leftPanel.list, function (item) {
                me.$select.find('[value="' + item.id + '"]').prop('selected', false);
            });

            $.map(me.rightPanel.list, function (item) {
                me.$select.find('[value="' + item.id + '"]').prop('selected', true);
            });

            me.$select.trigger('change');
        },

        /**
         * 获取选中数据
         * @return [{id: string, text: string, disabled: boolean}]
         */
        getData : function () {
            return $.map(this.rightPanel.list, function (item) {
                return {
                    id       : item.id,
                    text     : item.text,
                    disabled : item.disabled
                };
            });
        },

        /**
         * 销毁
         */
        destroy : function () {
            var me    = this;
            me.isInit = false;
            me.$template.remove();

            if (me.isSelect) {
                me.$select.removeClass('hide');
            }
        }
    }

    Shuttle.INDEX = 0;

    Shuttle.TEMPLATE = '<div class="busy-admin-shuttle row">\
    <div class="col-sm-5">\
        <div class="panel panel-default panel-left">\
            <div class="panel-heading">\
                <div class="checkbox">\
                    <label>\
                        <input type="checkbox"/>\
                        <span></span>\
                    </label>\
                </div>\
            </div>\
            <div class="panel-search"><div class="input-group input-group-sm"><div class="input-group-addon"><i class="fa fa-search"></i></div><input type="text" class="form-control"/></div></div>\
            <div class="panel-body"><div class="empty-info"></div></div>\
        </div>\
    </div>\
    <div class="col-sm-2">\
        <div class="toolbar">\
            <button type="button" disabled class="btn btn-default btn-block btn-right"><i class="fa fa-angle-double-right hidden-xs"></i><i class="fa fa-angle-double-down visible-xs-inline"></i> <span class="visible-xs-inline"></span></button>\
            <button type="button" disabled class="btn btn-default btn-block btn-left"><i class="fa fa-angle-double-left hidden-xs"></i><i class="fa fa-angle-double-up visible-xs-inline"></i> <span class="visible-xs-inline"></span></button>\
        </div>\
    </div>\
    <div class="col-sm-5">\
        <div class="panel panel-default panel-right">\
            <div class="panel-heading">\
                <div class="checkbox">\
                    <label>\
                        <input type="checkbox"/>\
                        <span></span>\
                    </label>\
                </div>\
            </div>\
            <div class="panel-search"><div class="input-group input-group-sm"><div class="input-group-addon"><i class="fa fa-search"></i></div><input type="text" class="form-control"/></div></div>\
            <div class="panel-body"><div class="empty-info"></div></div>\
        </div>\
    </div>\
</div>'

    Shuttle.DEFAULTS = {
        leftTitle   : '列表1',
        rightTitle  : '列表2',
        placeholder : '关键词搜索',
        search      : false,
        height      : 320,
        locale      : $.extend({
            noData      : '无数据',
            noMatchData : '无匹配数据',
            moveUp      : '上移',
            moveDown    : '下移',
        }, ((busyAdmin.locale || {}).plugin || {}).table || {})
    };

    Shuttle.Panel = Panel;

    /**
     * @param option
     * @return {jQuery|Shuttle|*}
     * @constructor
     */
    function Plugin(option) {
        var key  = 'busy.admin.shuttle.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        var ret;
        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Shuttle(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === 'string') {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminShuttle             = Plugin;
    $.fn.busyAdminShuttle.Constructor = Shuttle;
    busyAdmin.plugins.Shuttle         = Shuttle;
    $.extend(busyAdmin.e, {
        /**
         * 穿梭时回调
         */
        shuttleChange : busyAdmin.ee('change', 'shuttle')
    });

    busyAdmin.autoInit('[data-toggle="busy-shuttle"],[busy-shuttle]', function () {
        Plugin.call(this);
    });

    return Shuttle;
}));
/**
 * 表格
 * TODO 滚动条，同一个页面多个表格滚动条
 * TODO 出现固定列的时候，超长表格会出现滚动缓慢的问题
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/table', [core.sys.core, core.sys.jquery, core.lib.bootstrap], factory);
}(function (busyAdmin, $) {
    var ArtTemplate;
    var isInitFixedColumns = false;
    var eventGroup         = 'table';
    var apiDataKey         = 'busy.admin.table.api';

    function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

        return arr2;
    }

    function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
    }

    function _iterableToArrayLimit(arr, i) {
        if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
        var _arr = [];
        var _n   = true;
        var _d   = false;
        var _e   = undefined;

        try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);

                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally {
            try {
                if (!_n && _i["return"] != null) _i["return"]();
            } finally {
                if (_d) throw _e;
            }
        }

        return _arr;
    }

    function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function (obj) {
                return typeof obj;
            };
        } else {
            _typeof = function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }

        return _typeof(obj);
    }

    function getStateKey(options) {
        var key = '';
        if (options.stateKey) {
            key = options.stateKey;
        } else if (options.state) {
            key = options.state === true ? document.URL : options.state;
        }

        return key;
    }

    function countHeight($element, height) {
        if (height === true) {
            if (busyAdmin.app.isInContent($element)) {
                return busyAdmin.app.isMobileSize() ? 0 : busyAdmin.app.getContentFrame().height;
            } else {
                return 0;
            }
        } else if (typeof height === 'string' && height) {
            return $(height).height();
        } else if (height instanceof $) {
            return height.height();
        }
    }


    /**
     * 切换全选状态
     * @param api
     */
    function _toggleCheckAll(api) {
        var enabledLength = api.$selectItem.filter(':enabled').length;
        var checkedLength = api.$selectItem.filter(':enabled').filter(':checked').length;
        var checkAll      = enabledLength === checkedLength;
        var $checkAll     = api.$container.find('[name="btSelectAll"]');

        if (checkAll) {
            $checkAll.each(function () {
                this.indeterminate = false;
                $(this).prop('checked', true);
            });
        } else if (checkedLength) {
            $checkAll.each(function () {
                this.indeterminate = true;
            });
        } else {
            $checkAll.each(function () {
                this.indeterminate = false;
                $(this).prop('checked', false);
            });
        }
    }

    function initBootstrapTable(options) {
        $.fn.dropdown.Constructor.VERSION = '3.3.7';

        options = options || {};

        var Utils        = $.fn.bootstrapTable.utils;
        var utilsMethods = busyAdmin.helper.extends(Utils, {
            calculateObjectValue : function (self, name, args, defaultValue) {
                // 自定义模板解析
                if (name && typeof name === 'string' && name.charAt(0) === '@') {
                    var field       = args[3];
                    var index       = args[2];
                    var data        = args[1];
                    var selector    = name.substring(1, name.length);
                    selector        = selector || '#' + field;
                    self.__template = self.__template || $(selector)[0].innerHTML;

                    return ArtTemplate.render(self.__template, {
                        column : self,
                        row    : index,
                        item   : data,
                        value  : args[0]
                    });
                }

                return busyAdmin.helper.override(utilsMethods, 'calculateObjectValue', this, arguments);
            }
        });

        $.extend($.BootstrapTable.EVENTS, {
            'before-refresh.bs.table' : 'onBeforeRefresh',
            'data-init.bs.table'      : 'onDataInit',
        });

        var oldMethods = busyAdmin.helper.extends($.BootstrapTable.prototype, {
            // 初始化
            initConstants : function () {
                var me = this;
                busyAdmin.helper.override(oldMethods, 'initConstants', me, arguments);

                // 属性转换
                me.$el.find('thead tr > *').each(function () {
                    var $this = $(this);

                    // width 转 data-width
                    var width = $this.attr('width');
                    if (width) {
                        $this.attr('data-width', width);
                    }

                    // 如果是ajax则默认禁止搜索
                    if (me.options.url) {
                        if ($this.attr('data-searchable') === undefined) {
                            $this.attr('data-searchable', 'false');
                        }
                    }
                });
            },

            // 初始化容器
            initContainer : function () {
                var me = this;
                busyAdmin.helper.override(oldMethods, 'initContainer', me, arguments);

                me.$container.addClass('busy-admin-bs-table');

                var headClass = me.$el.find('thead').attr('class') || '';
                if (headClass) {
                    me.$container.addClass(headClass);
                }

                if (me.$el.hasClass('table-dark')) {
                    me.$container.addClass('table-theme-dark');
                }

                // 监听动画执行完毕，重置表格
                me.$container.on('animationend webkitAnimationEnd oAnimationEnd', function () {
                    me.resetView();
                });
            },

            // 初始化表格
            initTable : function () {
                var me = this;
                busyAdmin.helper.override(oldMethods, 'initTable', me, arguments);

                me.trigger('data-init', this);
            },

            // 初始化分页
            initPagination : function () {
                var me = this;
                busyAdmin.helper.override(oldMethods, 'initPagination', me, arguments);

                // HTML转表格，则将分页捕获进来
                if (me.options.type === 'html') {
                    var $page = busyAdmin.app.getContentFrame().target.find('.busy-admin-pagination');
                    if ($page.length) {
                        me.$pagination.html($page);
                        me.$pagination.show();
                    }
                }
            },

            // 初始化表格
            initBody : function () {
                var me = this;
                busyAdmin.helper.override(oldMethods, 'initBody', me, arguments);

                // 树状表格
                if (me.options.treeShowField && me.options.parentIdField) {
                    var columns    = me.columns;
                    var column     = null;
                    var treeColumn = -1;

                    columns.some(function (item, index) {
                        if (item.visible) {
                            treeColumn++;
                        }

                        if (item.field === me.options.treeShowField && item.visible) {
                            column = item;

                            return true;
                        }
                    });

                    if (column) {
                        me.$el.treegrid({
                            treeColumn             : treeColumn,
                            saveState              : me.options.treeState,
                            saveStateMethod        : 'local',
                            saveStateName          : getStateKey(me.options),
                            expanderExpandedClass  : 'fa',
                            expanderCollapsedClass : 'fa',
                            onChange               : function () {
                                me.resetView();
                            }
                        });
                    }
                }
            },

            // 重置表格
            resetView : function (params) {
                params = params || {};
                var me = this;

                if (!params.hasOwnProperty('height')) {
                    params.height = countHeight(me.$el, me.options._height);
                }

                // 覆盖方法
                var padding = 0;
                if (params && params.height) {
                    me.options.height = params.height;
                }

                me.$selectAll.prop('checked', me.$selectItem.length > 0 && me.$selectItem.length === me.$selectItem.filter(':checked').length);
                me.$tableContainer.toggleClass('has-card-view', this.options.cardView);

                if (!me.options.cardView && me.options.showHeader && me.options.height) {
                    me.$tableHeader.show();
                    me.resetHeader();
                    padding += me.$header.outerHeight(true) + 1;
                } else {
                    me.$tableHeader.hide();
                    me.trigger('post-header');
                }

                if (!me.options.cardView && me.options.showFooter) {
                    me.$tableFooter.show();
                    me.fitFooter();

                    if (me.options.height) {
                        padding += me.$tableFooter.outerHeight(true);
                    }
                }

                if (me.$tableBorder) {
                    me.$tableBorder.hide();
                }

                if (me.$container.hasClass('fullscreen')) {
                    me.$tableContainer.css('height', '');
                    me.$tableContainer.css('width', '');
                }

                // 高度计算
                if (me.options.height) {
                    var trueHeight = me.options.height;

                    // 全屏的情况按照全屏高度算
                    if (me.$container.hasClass('fullscreen')) {
                        trueHeight = me.$container.height();
                    }

                    var toolbarHeight    = me.$toolbar.is(':visible') ? me.$toolbar.outerHeight(true) : 0;
                    var paginationHeight = me.options.pagination ? me.$pagination.outerHeight(true) : 0;
                    var height           = trueHeight - toolbarHeight - paginationHeight;
                    var $bodyTable       = me.$tableBody.find('>table');
                    var tableHeight      = $bodyTable.outerHeight();
                    me.$tableContainer.css('height', height + 'px').addClass('fixed-height');

                    if (tableHeight < me.$tableBody.outerHeight() - 2) {
                        me.$tableContainer.addClass('less-content');
                    } else {
                        me.$tableContainer.removeClass('less-content');
                    }
                }

                if (me.options.cardView) {
                    // remove the element css
                    me.$el.css('margin-top', '0');
                    me.$tableContainer.css('padding-bottom', '0');
                    me.$tableFooter.hide();
                } else {
                    // Assign the correct sortable arrow
                    me.getCaret();
                    me.$tableContainer.css('padding-bottom', "".concat(padding, "px"));
                }

                // 全选
                _toggleCheckAll(this);

                // 固定表头计算
                if (me.options.stickyHeader) {
                    if (me.$container.hasClass('fullscreen')) {
                        var left                           = busyAdmin.helper.int((me.$container.css('padding-left') || '').replace('px', ''));
                        var right                          = busyAdmin.helper.int((me.$container.css('padding-right') || '').replace('px', '')) + busyAdmin.helper.getScrollbarWidth();
                        me.options.stickyHeaderOffsetY     = -1;
                        me.options.stickyHeaderOffsetLeft  = left;
                        me.options.stickyHeaderOffsetRight = right;
                    } else {
                        me.options.stickyHeaderOffsetY     = me.options.noFullStickyHeaderOffsetY;
                        me.options.stickyHeaderOffsetLeft  = me.options.noFullStickyHeaderOffsetLeft;
                        me.options.stickyHeaderOffsetRight = me.options.noFullStickyHeaderOffsetRight;
                    }
                }

                me.trigger('reset-view');
            },

            // 全选切换
            toggleCheckAll : function () {
                var me = this;
                busyAdmin.helper.override(oldMethods, 'toggleCheckAll', me, arguments);

                _toggleCheckAll(me);
            },

            // 单选切换
            _toggleCheck : function () {
                var me = this;
                busyAdmin.helper.override(oldMethods, '_toggleCheck', me, arguments);

                _toggleCheckAll(me);
            },

            // 初始化行
            initRow : function (item, i, data, trFragments) {
                var me     = this;
                var _this7 = this;

                var html           = [];
                var style          = {};
                var csses          = [];
                var data_          = '';
                var attributes     = {};
                var htmlAttributes = [];

                if (Utils.findIndex(this.hiddenRows, item) > -1) {
                    return;
                }

                style = Utils.calculateObjectValue(this.options, this.options.rowStyle, [item, i], style);

                if (style && style.css) {
                    for (var _i7 = 0, _Object$entries6 = Object.entries(style.css); _i7 < _Object$entries6.length; _i7++) {
                        var _Object$entries6$_i = _slicedToArray(_Object$entries6[_i7], 2), key = _Object$entries6$_i[0], value = _Object$entries6$_i[1];

                        csses.push("".concat(key, ": ").concat(value));
                    }
                }

                attributes = Utils.calculateObjectValue(this.options, this.options.rowAttributes, [
                    item, i
                ], attributes);

                if (attributes) {
                    for (var _i8 = 0, _Object$entries7 = Object.entries(attributes); _i8 < _Object$entries7.length; _i8++) {
                        var _Object$entries7$_i = _slicedToArray(_Object$entries7[_i8], 2), _key2 = _Object$entries7$_i[0], _value = _Object$entries7$_i[1];

                        htmlAttributes.push("".concat(_key2, "=\"").concat(Utils.escapeHTML(_value), "\""));
                    }
                }

                if (item._data && !Utils.isEmptyObject(item._data)) {
                    for (var _i9 = 0, _Object$entries8 = Object.entries(item._data); _i9 < _Object$entries8.length; _i9++) {
                        var _Object$entries8$_i = _slicedToArray(_Object$entries8[_i9], 2), k = _Object$entries8$_i[0], v = _Object$entries8$_i[1];

                        // ignore data-index
                        if (k === 'index') {
                            return;
                        }

                        data_ += " data-".concat(k, "='").concat(_typeof(v) === 'object' ? JSON.stringify(v) : v, "'");
                    }
                }

                html.push('<tr', Utils.sprintf(' %s', htmlAttributes.length ? htmlAttributes.join(' ') : undefined), Utils.sprintf(' id="%s"', Array.isArray(item) ? undefined : item._id), Utils.sprintf(' class="%s"', style.classes || (Array.isArray(item) ? undefined : item._class)), Utils.sprintf(' style="%s"', Array.isArray(item) ? undefined : item._style), " data-index=\"".concat(i, "\""), Utils.sprintf(' data-uniqueid="%s"', Utils.getItemField(item, this.options.uniqueId, false)), Utils.sprintf(' data-has-detail-view="%s"', this.options.detailView && Utils.calculateObjectValue(null, this.options.detailFilter, [
                    i, item
                ]) ? 'true' : undefined), Utils.sprintf('%s', data_), '>');

                if (this.options.cardView) {
                    html.push("<td colspan=\"".concat(this.header.fields.length, "\"><div class=\"card-views\">"));
                }

                var detailViewTemplate = '';

                if (Utils.hasDetailViewIcon(this.options)) {
                    detailViewTemplate = '<td>';

                    if (Utils.calculateObjectValue(null, this.options.detailFilter, [i, item])) {
                        detailViewTemplate += "\n          <a class=\"detail-icon\" href=\"#\">\n          ".concat(Utils.sprintf(this.constants.html.icon, this.options.iconsPrefix, this.options.icons.detailOpen), "\n          </a>\n        ");
                    }

                    detailViewTemplate += '</td>';
                }

                if (detailViewTemplate && this.options.detailViewAlign !== 'right') {
                    html.push(detailViewTemplate);
                }

                this.header.fields.forEach(function (field, j) {
                    var text        = '';
                    var value_      = Utils.getItemField(item, field, _this7.options.escape);
                    var value       = '';
                    var type        = '';
                    var cellStyle   = {};
                    var id_         = '';
                    var class_      = _this7.header.classes[j];
                    var style_      = '';
                    var styleToAdd_ = '';
                    var data_       = '';
                    var rowspan_    = '';
                    var colspan_    = '';
                    var title_      = '';
                    var column      = _this7.columns[j];

                    if ((_this7.fromHtml || _this7.autoMergeCells) && typeof value_ === 'undefined') {
                        if (!column.checkbox && !column.radio) {
                            return;
                        }
                    }

                    if (!column.visible) {
                        return;
                    }

                    if (_this7.options.cardView && !column.cardVisible) {
                        return;
                    }

                    if (column.escape) {
                        value_ = Utils.escapeHTML(value_);
                    } // Style concat


                    if (csses.concat([_this7.header.styles[j]]).length) {
                        styleToAdd_ += "".concat(csses.concat([_this7.header.styles[j]]).join('; '));
                    }

                    if (item["_".concat(field, "_style")]) {
                        styleToAdd_ += "".concat(item["_".concat(field, "_style")]);
                    }

                    if (styleToAdd_) {
                        style_ = " style=\"".concat(styleToAdd_, "\"");
                    } // Style concat
                    // handle id and class of td


                    if (item["_".concat(field, "_id")]) {
                        id_ = Utils.sprintf(' id="%s"', item["_".concat(field, "_id")]);
                    }

                    if (item["_".concat(field, "_class")]) {
                        class_ = Utils.sprintf(' class="%s"', item["_".concat(field, "_class")]);
                    }

                    if (item["_".concat(field, "_rowspan")]) {
                        rowspan_ = Utils.sprintf(' rowspan="%s"', item["_".concat(field, "_rowspan")]);
                    }

                    if (item["_".concat(field, "_colspan")]) {
                        colspan_ = Utils.sprintf(' colspan="%s"', item["_".concat(field, "_colspan")]);
                    }

                    if (item["_".concat(field, "_title")]) {
                        title_ = Utils.sprintf(' title="%s"', item["_".concat(field, "_title")]);
                    }

                    cellStyle = Utils.calculateObjectValue(_this7.header, _this7.header.cellStyles[j], [
                        value_, item, i, field
                    ], cellStyle);

                    if (cellStyle.classes) {
                        class_ = " class=\"".concat(cellStyle.classes, "\"");
                    }

                    if (cellStyle.css) {
                        var csses_ = [];

                        for (var _i10 = 0, _Object$entries9 = Object.entries(cellStyle.css); _i10 < _Object$entries9.length; _i10++) {
                            var _Object$entries9$_i = _slicedToArray(_Object$entries9[_i10], 2), _key3 = _Object$entries9$_i[0], _value2 = _Object$entries9$_i[1];

                            csses_.push("".concat(_key3, ": ").concat(_value2));
                        }

                        style_ = " style=\"".concat(csses_.concat(_this7.header.styles[j]).join('; '), "\"");
                    }

                    value = Utils.calculateObjectValue(column, _this7.header.formatters[j], [
                        value_, item, i, field
                    ], value_);

                    if (!(column.checkbox || column.radio)) {
                        value = typeof value === 'undefined' || value === null || value === '' ? _this7.options.undefinedText : value;
                    }

                    if (column.searchable && _this7.searchText && _this7.options.searchHighlight) {
                        var defValue = '';
                        var regExp   = new RegExp("(".concat(_this7.searchText.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), ")"), 'gim');
                        var marker   = '<mark>$1</mark>';
                        var isHTML   = value && /<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i.test(value);

                        if (isHTML) {
                            // value can contains a HTML tags
                            var textContent  = new DOMParser().parseFromString(value.toString(), 'text/html').documentElement.textContent;
                            var textReplaced = textContent.replace(regExp, marker);
                            defValue         = value.replace(new RegExp("(>\\s*)(".concat(textContent, ")(\\s*)"), 'gm'), "$1".concat(textReplaced, "$3"));
                        } else {
                            // but usually not
                            defValue = value.toString().replace(regExp, marker);
                        }

                        value = Utils.calculateObjectValue(column, column.searchHighlightFormatter, [
                            value, _this7.searchText
                        ], defValue);
                    }

                    if (item["_".concat(field, "_data")] && !Utils.isEmptyObject(item["_".concat(field, "_data")])) {
                        for (var _i11 = 0, _Object$entries10 = Object.entries(item["_".concat(field, "_data")]); _i11 < _Object$entries10.length; _i11++) {
                            var _Object$entries10$_i = _slicedToArray(_Object$entries10[_i11], 2), _k = _Object$entries10$_i[0], _v = _Object$entries10$_i[1];

                            // ignore data-index
                            if (_k === 'index') {
                                return;
                            }

                            data_ += " data-".concat(_k, "=\"").concat(_v, "\"");
                        }
                    }

                    if (column.checkbox || column.radio) {
                        type                           = column.checkbox ? 'checkbox' : type;
                        type                           = column.radio ? 'radio' : type;
                        var c                          = column['class'] || '';
                        var isChecked                  = Utils.isObject(value) && value.hasOwnProperty('checked') ? value.checked : (value === true || value_) && value !== false;
                        var isDisabled                 = !column.checkboxEnabled || value && value.disabled;
                        text                           = [
                            _this7.options.cardView ? "<div class=\"card-view ".concat(c, "\">") : "<td class=\"bs-checkbox ".concat(c, "\"").concat(class_).concat(style_, ">"),
                            "<label>\n            <input\n            data-index=\"".concat(i, "\"\n            name=\"").concat(_this7.options.selectItemName, "\"\n            type=\"").concat(type, "\"\n            ").concat(Utils.sprintf('value="%s"', item[_this7.options.idField]), "\n            ").concat(Utils.sprintf('checked="%s"', isChecked ? 'checked' : undefined), "\n            ").concat(Utils.sprintf('disabled="%s"', isDisabled ? 'disabled' : undefined), " />\n            <span></span>\n            </label>"),
                            _this7.header.formatters[j] && typeof value === 'string' ? value : '',
                            _this7.options.cardView ? '</div>' : '</td>'
                        ].join('');
                        item[_this7.header.stateField] = value === true || !!value_ || value && value.checked;
                    } else if (_this7.options.cardView) {
                        var cardTitle = _this7.options.showHeader ? "<span class=\"card-view-title ".concat(cellStyle.classes, "\"").concat(style_, ">").concat(Utils.getFieldTitle(_this7.columns, field), "</span>") : '';
                        text          = "<div class=\"card-view\">".concat(cardTitle, "<span class=\"card-view-value ").concat(cellStyle.classes, "\"").concat(style_, ">").concat(value, "</span></div>");

                        if (_this7.options.smartDisplay && value === '') {
                            text = '<div class="card-view"></div>';
                        }
                    } else {
                        text = "<td field=\"" + field + "\" ".concat(id_).concat(class_).concat(style_).concat(data_).concat(rowspan_).concat(colspan_).concat(title_, ">").concat(value, "</td>");
                    }

                    html.push(text);
                });

                if (detailViewTemplate && this.options.detailViewAlign === 'right') {
                    html.push(detailViewTemplate);
                }

                if (this.options.cardView) {
                    html.push('</div></td>');
                }

                html.push('</tr>');
                return html.join('');
            },

            // 刷新
            refresh : function () {
                this.trigger('before-refresh', this);

                busyAdmin.helper.override(oldMethods, 'refresh', this, arguments);
            }
        });
    }

    var Table = function (element, options) {
        var me      = this;
        me.element  = element;
        me.$element = $(element);
        me.plugins  = {};
        me.api      = null;
        me.stateKey = 'busy.admin.table.state';
        me.options  = $.extend(true, {}, Table.DEFAULTS, me.$element.data() || {}, options || {}, {
            iconsPrefix     : 'fa',
            paginationLoop  : false,
            loadingTemplate : function () {
                return '<i class="busy-admin-pending-icon"></i>';
            }
        });

        if (typeof me.options.exportTypes === 'string') {
            me.options.exportTypes = me.options.exportTypes.split(',');
        }

        me.libs = ['bootstrapTableStickyHeader', 'bootstrapTableFixedColumns'];

        // 启用表格列宽度拖拽调整
        if (me.options.resizable) {
            me.libs.push('bootstrapTableResizable');
        }

        // 启用表格行拖拽排序
        if (me.options.reorderableRows) {
            me.libs.push('bootstrapTableReorderRows')
        }

        // 启用表格列拖拽排序
        if (me.options.reorderableColumns) {
            me.libs.push('bootstrapTableReorderColumns')
        }

        // 树形结构
        if (me.options.treeShowField && me.options.parentIdField) {
            me.libs.push('bootstrapTableTree');
        }

        // 打印
        if (me.options.showPrint) {
            me.libs.push('bootstrapTablePrint');
        }

        // 启用导出
        if (me.options.showExport) {
            me.libs.push('bootstrapTableExport');
        }

        // Ajax
        if (me.options.model) {
            me.options.url = busyAdmin.getConfig('table').url;
        }

        if (me.options.url) {
            me.options.url            = me.options.url === true ? document.URL : me.options.url;
            me.options.sidePagination = "server";
            me.options.ajax           = function (params) {
                var api        = this;
                var url        = params.url;
                var data       = params.data || {};
                var searchable = data.searchable;
                delete data.searchable;


                // 路由处理
                if (me.options.route && !me.options.model) {
                    // 首次标记
                    if (!me._routeInit) {
                        me._routeInit = true;
                    } else {
                        if (!me._noRecordRoute || me._needReplaceRoute) {
                            me._noRecordRoute    = false;
                            me._needReplaceRoute = false;

                            var parse    = busyAdmin.helper.parseURL(url);
                            parse.params = $.extend(true, {}, parse.params || {}, data);
                            var address  = parse.path + '?' + $.param(parse.params);

                            busyAdmin.route.show(address, {
                                popStateDispatch : false // 不调度
                            }, false, true);
                        }
                    }
                }

                busyAdmin
                    .request(url)
                    .addHeader('Busy-Admin-Plugin', 'Table')
                    .pending(false)
                    .params($.extend(true, {}, params.data, {
                        model      : me.options.model,
                        extend     : me.options.modelExtend ? 1 : 0,
                        searchable : searchable || []
                    }))
                    .method(params.type)
                    .error(function (response, type, xhr) {
                        params.error(xhr);
                    })
                    .success(function (response, type, xhr) {
                        params.success(response.result || {}, type, xhr);

                        return false;
                    })
                    .exec();
            };
        }

        // 自定义搜索表单
        if (me.options.search && typeof me.options.search === 'string') {
            me.searchSelector = me.options.search;
            me.options.search = false;
        }

        // 高度计算
        me.options._height = me.options.height;
        me.options.height  = countHeight(me.$element, me.options._height);

        // 定义查询参数
        var queryParams        = me.options.queryParams;
        me.options.queryParams = function (params) {
            var searchParams = me._searchParams || {};
            for (var searchParamsKey in searchParams) {
                params[searchParamsKey] = searchParams[searchParamsKey];
            }

            if (typeof queryParams === "function") {
                params = queryParams.call(this, params);
            }

            return params;
        };

        // 加载组件
        me.ready(me.init);
    };

    Table.prototype = {
        /**
         * 初始化
         */
        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }
            me.isInit = true;

            $(document)
                // 监听页面销毁前事件
                .one(busyAdmin.e.appRenderBefore, function () {
                    me.destroy();
                })

                // 监听路由切换后决定不调度事件
                .off(busyAdmin.e.routeNoDispatch)
                .on(busyAdmin.e.routeNoDispatch, function () {
                    // 恢复表
                    var pageNumber = me.resumeByUrl();
                    if (pageNumber > 0) {
                        me.api.refresh({
                            pageNumber : pageNumber
                        });
                    }
                });

            me.$element
                // 渲染之前处理的一些事情
                .on('pre-body.bs.table', function (e) {
                    var api = e.sender;
                    me.api  = api;

                    if (!api._$toolbarSystem) {
                        var $bsBars    = api.$toolbar.find('.bs-bars');
                        var $columns   = api.$toolbar.find('.columns');
                        var $searchBar = api.$toolbar.find('.search');

                        if ($bsBars.length > 0 || $columns.length > 0 || $searchBar.length > 0) {
                            api.$toolbar.show();
                        } else {
                            api.$toolbar.hide();
                        }

                        api._$toolbarSystem    = $('<div class="fixed-table-toolbar-system"/>').append($bsBars).append($columns).append($searchBar);
                        api._$toolbarSearchBar = $('<div class="fixed-table-toolbar-search"/>')
                        api.$toolbar.prepend(api._$toolbarSearchBar);
                        api.$toolbar.append(api._$toolbarSystem);
                    }

                    // 对toolbar下的data-disabled进行处理
                    var status = api.getSelections().length === 0;
                    api.$toolbar.find('[data-disabled]').prop('disabled', status).toggleClass('disabled', status);

                    me._initSearch(api);
                })

                // 记录字段显示隐藏
                .on('column-switch.bs.table', function (e, field, status) {
                    if (me.options.state) {
                        var value            = me._getTableState();
                        value.columns        = value.columns || {};
                        value.columns[field] = status;

                        me._saveTableState(value);
                    }
                })

                // 对toolbar下的 data-disabled 进行处理
                .on('check.bs.table uncheck.bs.table check-all.bs.table uncheck-all.bs.table', function (e) {
                    var api    = e.sender;
                    var status = api.getSelections().length === 0;
                    api.$toolbar.find('[data-disabled]').prop('disabled', status).toggleClass('disabled', status);
                })

                // 初始化表格状态
                .on('post-body.bs.table', function (e) {
                    var api = e.sender;
                    me.api  = api;

                    // 还原滚动条
                    if (me._needResumeScroll) {
                        me._needResumeScroll = false;
                        api.scrollTo(me._scrollTop);
                    }

                    // 还原 columns
                    if (me.stateInit) {
                        return;
                    }
                    me.stateInit = true;

                    if (me.options.state) {
                        var state        = me._getTableState();
                        var stateColumns = state.columns || {};
                        for (var field in stateColumns) {
                            if (!stateColumns[field]) {
                                api.hideColumn(field);
                            }
                        }
                    }

                    // 监听表格内data-bind进行数据绑定
                    api.$body.on('input change', '[data-bind]', function () {
                        var $this = $(this);
                        var data  = $this.data();
                        var value = $this.val();
                        var $tr   = $this.closest('tr[data-index]');
                        if (!$tr.length) {
                            return;
                        }

                        var field;
                        if (typeof data.bind === 'string' && data.bind) {
                            field = data.bind;
                        } else {
                            field = $this.closest('td[field]').attr('field');
                        }
                        if (!field) {
                            return;
                        }

                        var row         = $tr.data('index');
                        var itemData    = api.data[row] || {};
                        itemData[field] = value;
                    });

                    // 拦截 toolbar 的 data-url
                    api.$toolbar.on('click', '[data-url]', function () {
                        var $this = $(this);
                        var data  = $this.data() || {};

                        // 包涵toggle则不处理
                        if (data.toggle) {
                            return;
                        }

                        // 解析携带参数
                        var field = data.field || 'id';
                        var key   = '';
                        if (-1 !== field.indexOf(',')) {
                            var arr = field.split(',');
                            field   = arr[1].trim();
                            key     = arr[0].trim();
                        }

                        var name = data.name || field;
                        $this.busyAdminRequest({
                            clickHandler : false,
                            params       : function () {
                                if (data.params === false) {
                                    return {};
                                }

                                var params = data.params || {};
                                if (field) {
                                    var values = key ? {} : [];
                                    (data.checked ? api.getSelections() : api.getData()).map(function (item) {
                                        if (key) {
                                            params[name + '[' + item[key] + ']'] = item[field];
                                        } else {
                                            values.push(item[field]);
                                        }
                                    });

                                    if (!key) {
                                        params[name] = values;
                                    }
                                }
                                return params;
                            },
                            confirm      : function () {
                                if (data.confirm && data.checked) {
                                    return busyAdmin.helper.sprintf(data.confirm, api.getSelections().length);
                                }

                                return data.confirm;
                            }
                        });
                    });

                    // 触发插件准备完成事件
                    busyAdmin.helper.triggerPluginReady(me.$element, 'Table', me);
                })

                // 数据初始化
                .on('data-init.bs.table', function (e) {
                    me.api = e.sender;

                    // 通过URL恢复数据
                    var pageNumber = me.resumeByUrl();
                    if (pageNumber > 0) {
                        me.api.options.pageNumber = pageNumber;
                    }
                })

                // 刷新前
                .on('before-refresh.bs.table', function (e) {
                    me.api               = e.sender;
                    me._scrollTop        = me.api.getScrollPosition();
                    me._needResumeScroll = true;
                    me._noRecordRoute    = true; // 不记录路由
                });


            me.options.onAll = function (name) {
                var args = Array.prototype.slice.call(arguments);
                args.shift();
                args.unshift(args.pop());
                busyAdmin.helper.execCallback(null, me.element, args, me.$element, busyAdmin.ee(name.replace('.bs.table', '', name), eventGroup));
            };

            // 语言处理
            var locales = me.options.locale;
            if (me.options.noDataText) {
                locales.noMatches = me.options.noDataText;
            }
            me.options.locale = '';
            for (var localeKey in locales) {
                var localeStr = locales[localeKey];
                if (localeKey === 'showingRowsHasFilter') {
                    continue;
                }

                me.options['format' + localeKey.charAt(0).toUpperCase() + localeKey.slice(1)] = new Function('var args = Array.prototype.slice.call(arguments);' + 'if (args[3] !== undefined && args[2] !== undefined && args[3] > 0 && args[3] > args[2]) {' + '   args.unshift("' + localeStr + locales.showingRowsHasFilter + '"); ' + '} else {' + '   args.unshift("' + localeStr + '"); ' + '}' + 'return busyAdmin.helper.sprintf.apply(null, args);');
            }

            me.$element.bootstrapTable(me.options);

            me.api = me.$element.data('bootstrap.table');
        },

        /**
         * 获取表格状态
         * @return {Object}
         * @private
         */
        _getTableState : function () {
            var data = JSON.parse(localStorage.getItem(this.stateKey) || '{}');
            return data[getStateKey(this.options)] || {};
        },

        /**
         * 保存表格状态
         * @param value
         * @private
         */
        _saveTableState : function (value) {
            var data = JSON.parse(localStorage.getItem(this.stateKey) || '{}');

            data[getStateKey(this.options)] = value;
            localStorage.setItem(this.stateKey, JSON.stringify(data));
        },

        /**
         * 通过URL恢复数据表
         */
        resumeByUrl : function () {
            var me = this;
            if (!me.api || !me.options.route || me.options.model) {
                return 0;
            }

            // 通过URL恢复
            var parse = busyAdmin.helper.parseURL(document.URL);
            var query = parse.params || {};

            // 获取当前页码
            var pageNumber = 1;
            var limit      = busyAdmin.helper.int(query.limit || me.api.options.pageSize || 0);
            var offset     = busyAdmin.helper.int(query.offset || 0);
            if (limit > 0 && offset > 0) {
                pageNumber              = Math.ceil(offset / limit) + 1;
                me.api.options.pageSize = limit;
            }

            // 获取排序方式
            var sort  = $.trim(query.sort || '');
            var order = $.trim(query.order || '');
            if (sort && order) {
                me.api.options.sortName  = sort;
                me.api.options.sortOrder = order;
            }

            // 删除参数
            ['limit', 'offset', 'sort', 'order'].map(function (name) {
                delete query[name];
            });

            // 恢复自定义搜索表单内容
            if (me.api._$toolbarSearchForm && me.api._$toolbarSearchForm.length > 0) {
                me.api._$toolbarSearchForm[0].reset();
                me.api._$toolbarSearchForm.busyAdminFormVal(query);
            }

            me._searchParams = query;

            return pageNumber;
        },

        /**
         * 初始化自定义搜索栏
         */
        _initSearch : function (api) {
            var me = this;
            if (!me.searchSelector) {
                return;
            }

            var $searchBar = $(me.searchSelector);
            if (!$searchBar.length) {
                api._$toolbarSearchBar.hide();
                return;
            }

            api._$toolbarSearchBar.show().append($searchBar);
            api._$toolbarSearchForm = api._$toolbarSearchBar.find('form');

            // 不是异步不处理
            if (!me.options.url) {
                return;
            }

            // 拦截提交
            api._$toolbarSearchForm
                .attr('action', me.options.url)
                .off('submit')
                .on('submit', function (e) {
                    e.preventDefault();

                    me._searchParams     = me._getSearchFormParams();
                    me._needReplaceRoute = true;
                    api.refresh({
                        pageNumber : 1
                    });

                    return false;
                });

            // 重置
            api._$toolbarSearchForm
                .find('[type="reset"]')
                .attr('href', me.options.url)
                .off('click')
                .on('click', function (e) {
                    e.preventDefault();

                    api._$toolbarSearchForm[0].reset();
                    me._searchParams     = {};
                    me._needReplaceRoute = true;
                    api.refresh({
                        pageNumber : 1
                    });

                    return false;
                });
        },

        /**
         * 获取搜索参数
         * @private
         */
        _getSearchFormParams : function () {
            var me = this;
            if (!me.api || !me.api._$toolbarSearchForm || me.api._$toolbarSearchForm.length == 0) {
                return {};
            }

            var query = {};
            me.api._$toolbarSearchForm.serializeArray().map(function (item) {
                // 过滤掉bootstrapTable参数
                if (-1 !== ['offset', 'limit', 'sort', 'order', 'search', 'searchable', 'filter'].indexOf(item.name)) {
                    return;
                }

                query[item.name] = item.value;
            });

            return query;
        },

        /**
         * 加载插件
         * @param {[String]} plugins
         * @param {Function} callback
         */
        _loadPlugin : function (plugins, callback) {
            var me   = this;
            var load = function () {
                var loads = [];
                plugins.map(function (item) {
                    if (me.plugins[item]) {
                        me._initMethod(item);
                        return;
                    }

                    loads.push(item);
                });

                if (loads.length === 0) {
                    callback.call(me);
                } else {
                    require(loads, function () {
                        loads.map(function (item) {
                            me.plugins[item] = true;
                            me._initMethod(item);
                        });

                        callback.call(me);
                    });
                }
            }

            if (me.options.fixedColumns || me.options.stickyHeader) {
                require(['bootstrapTableStickyHeader'], function () {
                    me._initMethod('bootstrapTableStickyHeader');
                    require(['bootstrapTableFixedColumns'], function () {
                        me._initMethod('bootstrapTableFixedColumns');
                        load();
                    });
                });
            } else {
                load();
            }
        },

        /**
         * 初始化插件
         * @param name
         */
        _initMethod : function (name) {
            var method = '_init' + (name.charAt(0).toUpperCase() + name.slice(1));
            typeof this[method] === 'function' && this[method]();
        },

        /**
         * 初始化打印
         */
        _initBootstrapTablePrint : function () {
            if (this.isInitPrint) {
                return;
            }

            this.isInitPrint              = true;
            this.options.icons.print      = 'fa-print';
            this.options.printPageBuilder = function (table) {
                return '<html lang="zh-CN">\
    <head>\
        <title>打印</title>\
        <style type="text/css" media="print">\
            @page {size: auto; margin: 25px 0 25px 0;}\
        </style>\
        <style type="text/css" media="all">\
            table { border-collapse: collapse; font-size: 12px; }\
            table, th, td { border: 1px solid grey; }\
            th, td { text-align: center; vertical-align: middle; }\
            p { font-weight: bold; margin-left:20px; }\
            table { width:94%; margin-left:3%; margin-right:3%; }\
            div.bs-table-print { text-align:center; }\
        </style>\
    </head>\
    <body><div class="bs-table-print">' + table + '</div></body></html>';
            };
        },

        /**
         * 初始化导出
         */
        _initBootstrapTableExport : function () {
            if (this.isInitExport) {
                return;
            }

            this.isInitExport = true;

            var icon = 'fa-download';
            if (this.options.exportTypes.length === 1) {
                switch (this.options.exportTypes[0]) {
                    case 'excel':
                    case 'csv':
                        icon = 'fa-file-excel-o';
                        break;
                    case 'pdf':
                        icon = 'fa-file-pdf-o';
                        break;
                    case 'png':
                        icon = 'fa-file-image-o';
                        break;
                    case 'powerpoint':
                        icon = 'fa-file-powerpoint-o';
                        break;
                    case 'txt':
                        icon = 'fa-file-txt-o';
                        break;
                    case 'word':
                        icon = 'fa-file-word-o';
                        break;
                    case 'xml':
                    case 'json':
                        icon = 'fa-file-code-o';
                        break;
                }
            }

            this.options.icons.export = icon;
        },

        /**
         * 初始化固定表头
         */
        _initBootstrapTableStickyHeader : function () {
            if (this.isInitStickyHeader) {
                return;
            }

            this.isInitStickyHeader = true;
            var frame               = busyAdmin.app.getContentFrame();
            var left                = frame.left + frame.paddingLeft;
            var right               = frame.paddingRight;

            if (!this.options.stickyHeaderOffsetY) {
                this.options.stickyHeaderOffsetY = frame.top - 1;
            }

            if (!this.options.stickyHeaderOffsetLeft) {
                this.options.stickyHeaderOffsetLeft = left;
            }

            if (!this.options.stickyHeaderOffsetRight) {
                this.options.stickyHeaderOffsetRight = right;
            }

            this.options.noFullStickyHeaderOffsetY     = this.options.stickyHeaderOffsetY;
            this.options.noFullStickyHeaderOffsetLeft  = this.options.stickyHeaderOffsetLeft;
            this.options.noFullStickyHeaderOffsetRight = this.options.stickyHeaderOffsetRight;
        },

        /**
         * 初始化冻结窗口
         * @private
         */
        _initBootstrapTableFixedColumns : function () {

            // 修复冻结窗口宽度计算
            if (isInitFixedColumns) {
                return;
            }

            isInitFixedColumns = true;
            var oldMethods     = busyAdmin.helper.extends($.BootstrapTable.prototype, {
                initContainer : function () {
                    var that = this;
                    busyAdmin.helper.override(oldMethods, 'initContainer', that, arguments);

                    // 修复modal弹出后，右侧冻结栏偏移的问题
                    if (!that.options.stickyHeader) {
                        return;
                    }

                    var event     = busyAdmin.e.modalShow;
                    var hideEvent = busyAdmin.e.modalHided;
                    $(document).off(event).on(event, function () {
                        if (that.needFixedColumns && that.options.fixedRightNumber) {
                            var right = that.options.stickyHeaderOffsetRight || 0;
                            right += busyAdmin.helper.getScrollbarWidth();

                            that.$fixedColumnsRight.find('.sticky-header-container').css('right', right + 'px');
                            that.$stickyContainer.css('right', right + 'px');
                        }
                    }).off(hideEvent).on(hideEvent, function () {
                        if (that.needFixedColumns && that.options.fixedRightNumber) {
                            var right = that.options.stickyHeaderOffsetRight || 0;

                            that.$fixedColumnsRight.find('.sticky-header-container').css('right', right + 'px');
                            that.$stickyContainer.css('right', right + 'px');
                        }
                    });
                }
            });
        },

        /**
         * 表格已准备完毕
         * @param callback
         */
        ready : function (callback) {
            var me = this;
            if ($.fn.bootstrapTable && ArtTemplate) {
                me._loadPlugin(me.libs, callback);
            } else {
                require([busyAdmin.lib.bootstrapTable, busyAdmin.lib.artTemplate], function (b, artTemplatePlugin) {
                    ArtTemplate = artTemplatePlugin;

                    initBootstrapTable();

                    // 扩展方法
                    $.fn.bootstrapTable.methods.map(function (method) {
                        if (method === "destroy") {
                            return true;
                        }

                        Table.prototype[method] = function () {
                            if (this.api) {
                                return this.api[method].apply(this.api, Array.prototype.slice.call(arguments));
                            }
                        }
                    });

                    me._loadPlugin(me.libs, callback);
                });
            }
        },

        /**
         * 销毁
         */
        destroy : function () {
            var me = this;

            if (me.api) {
                me.api.destroy();
            }
        }
    };

    Table.DEFAULTS = {
        search                : false,      // 是否显示表格搜索框
        showSearchButton      : true,      // 显示搜索按钮
        showSearchClearButton : true,      // 显示搜索重置按钮
        searchOnEnterKey      : true,      // 搜索框确定
        showColumns           : false,      // 是否显示列筛选
        type                  : 'ajax',    // 数据类型，支持 html、ajax
        resizable             : false,     // 是否开启表格列宽拖拽
        reorderableRows       : false,     // 是否开启行拖拽
        reorderableColumns    : false,     // 是否开启表格列拖拽排序
        showPrint             : false,     // 是否显示打印选项
        showExport            : false,     // 是否显示导出,
        exportTypes           : ['excel'],  // 导出类型，支持 excel,csv,txt,json,xml,
        idField               : 'id',
        selectItemName        : 'id[]',
        parentIdField         : 'parent_id',
        noDataText            : '',
        stateKey              : null,
        state                 : false,
        treeState             : false, // 是否记录树状结构展开状态
        pagination            : true, // 默认显示分页
        pageList              : [10, 20, 30, 40, 50, 100, 200],
        pageSize              : 20,
        route                 : false, // 是否启用路由

        // 模型
        model       : '', // 自动查询模型数据
        modelExtend : false, // 自动模型数据是否包涵扩展数据

        // 图标
        icons : {
            paginationSwitchDown : 'fa-chevron-down',
            paginationSwitchUp   : 'fa-chevron-up',
            refresh              : 'fa-refresh',
            toggleOff            : 'fa-list-alt',
            toggleOn             : 'fa-list-alt',
            columns              : 'fa-th',
            detailOpen           : 'fa-plus',
            detailClose          : 'fa-minus',
            fullscreen           : 'fa-arrows-alt',
            search               : 'fa-search',
            clearSearch          : 'fa-repeat',
        },

        // 事件
        onBeforeRefresh : $.noop,
        onDataInit      : $.noop,

        // 语言支持
        locale : $.extend({
            copyRows                : '复制行',
            print                   : '打印',
            loadingMessage          : '请稍候...',
            recordsPerPage          : '每页%s条',
            showingRows             : '%s-%s/%s条',
            showingRowsHasFilter    : ', (从%s条中过滤)',
            sRPaginationPreText     : '上一页',
            sRPaginationPageText    : '第%s页',
            sRPaginationNextText    : '下一页',
            detailPagination        : '共%s条',
            clearSearch             : '重置',
            search                  : '搜索',
            noMatches               : '暂无相关记录',
            paginationSwitch        : '隐藏/显示分页',
            paginationSwitchDown    : '显示分页',
            paginationSwitchUp      : '隐藏分页',
            refresh                 : '刷新',
            toggle                  : '切换',
            toggleOn                : '显示卡片视图',
            toggleOff               : '隐藏卡片视图',
            columns                 : '列',
            columnsToggleAll        : '切换所有',
            fullscreen              : '全屏',
            allRows                 : '所有',
            autoRefresh             : '自动刷新',
            export                  : '导出',
            jumpTo                  : '跳转',
            advancedSearch          : '高级搜索',
            advancedCloseButton     : '关闭',
            filterControlSwitch     : '隐藏/显示过滤',
            filterControlSwitchHide : '隐藏过滤',
            filterControlSwitchShow : '显示过滤',
        }, ((busyAdmin.locale || {}).plugin || {}).table || {})
    };

    /**
     * @param option
     * @return {jQuery|Table}
     * @constructor
     */
    function Plugin(option) {
        var ret;
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(apiDataKey);

            if (!api) {
                $this.data(apiDataKey, (api = new Table(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === 'string') {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminTable             = Plugin;
    $.fn.busyAdminTable.Constructor = Table;
    busyAdmin.plugins.Table         = Table;
    $.extend(busyAdmin.e, {
        /**
         * 当用选中一行时触发
         */
        tableCheck : busyAdmin.ee('check', eventGroup),
        /**
         * 选中所有行时触发
         */
        tableCheckAll : busyAdmin.ee('check-all', eventGroup),
        /**
         * 选中某些行时触发
         */
        tableCheckSome : busyAdmin.ee('check-some', eventGroup),
        /**
         * 点击单元格时触发
         */
        tableClickCell : busyAdmin.ee('click-cell', eventGroup),
        /**
         * 点击行时触发
         */
        tableClickRow : busyAdmin.ee('click-row', eventGroup),
        /**
         * 单击详细信息图标折叠详细信息视图时触发
         */
        tableCollapseRow : busyAdmin.ee('collapse-row', eventGroup),
        /**
         * 当切换列可见时触发
         */
        tableColumnSwitch : busyAdmin.ee('column-switch', eventGroup),
        /**
         * 双击单元格时触发
         */
        tableDblClickCell : busyAdmin.ee('dbl-click-cell', eventGroup),
        /**
         * 双击行时触发
         */
        tableDblClickRow : busyAdmin.ee('dbl-click-row', eventGroup),
        /**
         * 单击详细信息图标以展开详细信息视图时触发
         */
        tableExpandRow : busyAdmin.ee('expand-row', eventGroup),
        /**
         * 加载远程数据错误时触发
         */
        tableLoadError : busyAdmin.ee('load-error', eventGroup),
        /**
         * 加载远程数据成功时触发
         */
        tableLoadSuccess : busyAdmin.ee('load-success', eventGroup),
        /**
         * 更改页码或页面大小时触发
         */
        tablePageChange : busyAdmin.ee('page-change', eventGroup),
        /**
         * 在表格结构数据初始化完成后触发
         */
        tableDataInit : busyAdmin.ee('data-init', eventGroup),
        /**
         * 在表格主体准备完成后触发
         */
        tableBodyReady : busyAdmin.ee('post-body', eventGroup),
        /**
         * 在表格footer准备完成后触发
         */
        tableFooterReady : busyAdmin.ee('post-footer', eventGroup),
        /**
         * 在表格header准备完成后触发
         */
        tableHeaderReady : busyAdmin.ee('post-header', eventGroup),
        /**
         * 在表格初始化完成之前触发
         */
        tablePreBody : busyAdmin.ee('pre-body', eventGroup),
        /**
         * 刷新表格后触发
         */
        tableRefresh : busyAdmin.ee('refresh', eventGroup),
        /**
         * 刷新选项后初始化表之前触发
         */
        tableRefreshOptions : busyAdmin.ee('refresh-options', eventGroup),
        /**
         * 重置视图后触发
         */
        tableReset : busyAdmin.ee('reset-view', eventGroup),
        /**
         * 搜索表时触发
         */
        tableSearch : busyAdmin.ee('search-view', eventGroup),
        /**
         * 滚动表格时触发
         */
        tableScroll : busyAdmin.ee('scroll-body', eventGroup),
        /**
         * 对列进行排序时触发
         */
        tableSort : busyAdmin.ee('sort-view', eventGroup),
        /**
         * 切换表格视图时触发
         */
        tableToggle : busyAdmin.ee('toggle', eventGroup),
        /**
         * 取消选中时触发
         */
        tableUncheck : busyAdmin.ee('uncheck', eventGroup),
        /**
         * 取消全部选中是触发
         */
        tableUncheckAll : busyAdmin.ee('uncheck-all', eventGroup),
        /**
         * 取消选中某些行时触发
         */
        tableUncheckSome : busyAdmin.ee('uncheck-some', eventGroup),
        /**
         * 表格表尾按钮点击事件
         */
        tableFooterBtnClick : busyAdmin.ee('footer-btn-click', eventGroup),
    });

    /**
     * 通过table内元素找到Table并执行方法
     * @param option
     * @return {jQuery|null|*}
     */
    $.fn.takeBusyAdminTable = function (option) {
        var $table = this.closest('.busy-admin-bs-table').find('> .fixed-table-container > .fixed-table-body > table');
        var api    = $table.data(apiDataKey);

        // 可能不在table标签内
        if (!api || !(api instanceof Table)) {
            return this;
        }

        if (typeof option === "string") {
            var args = Array.prototype.slice.call(arguments);
            args.shift();

            return api[option].apply(api, args);
        }

        return api;
    };

    // 注册语法糖
    busyAdmin.regSugar('table', function (element, method, result, args) {
        if (method === 'reload') {
            method = 'refresh';
        }

        if (method === 'refresh') {
            var modal = $(element).data(busyAdmin.plugins.Modal.KEY);
            if (modal instanceof busyAdmin.plugins.Modal) {
                modal.hide();
            }
        }

        $(element).takeBusyAdminTable(method);
    });

    busyAdmin.autoInit('[data-toggle="busy-table"],[busy-table]', function () {
        Plugin.call(this);
    });

    return Table;
}));
/**
 * 顶部通知
 */
;(function ($, busyAdmin) {
    var Vue;
    var isInit  = false;
    var headers = {'Busy-Admin-Plugin' : 'AppMessage'};

    /**
     * @constructor
     */
    var TopBar = function () {
        var me  = this;
        me.app  = busyAdmin.app;
        me.url  = busyAdmin.getConfig('topBar').url;
        me.root = busyAdmin.root();

        me.messageTimer   = null;
        me.messageLoading = false;
        me.ready(me.init);
    };

    TopBar.prototype = {
        ready : function (callback) {
            var me = this;
            if (Vue) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.vue], function (vueTarget) {
                    Vue = vueTarget;
                    typeof callback === 'function' && callback.call(me);
                })
            }
        },

        init : function () {
            var me   = this;
            var data = me.app.data || {};

            // 启用了通知
            if (data.message_notice) {
                me.$noticeLi    = $('<li><a href="javascript:void(0)"><i class="bicon bicon-bell"></i><span class="badge badge-danger badge-pill hide">0</span></a></li>');
                me.$noticeA     = me.$noticeLi.find('a');
                me.$noticeBadge = me.$noticeLi.find('.badge');
                me.app.$barRefreshWrap.after(me.$noticeLi);
                me._initNotice();
            }

            // 启用了待办
            if (data.message_todo) {
                me.$todoLi    = $('<li><a href="javascript:void(0)"><i class="bicon bicon-wait-handle"></i><span class="badge badge-danger badge-pill hide">0</span></a></li>');
                me.$todoA     = me.$todoLi.find('a');
                me.$todoBadge = me.$todoLi.find('.badge');
                (data.message_notice ? me.$noticeLi : me.app.$barRefreshWrap).after(me.$todoLi);
                me._initTodo();
            }

            // 启动定时查询
            if (data.message_notice || data.message_todo) {
                me.messageTimer = setTimeout(function () {
                    me.refreshUnread();
                }, 1000)
            }

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'TopBar', me);
            isInit = true;
        },

        /**
         * 初始化消息
         */
        _initNotice : function () {
            var that = this;

            that.$noticeA.on('click', function () {
                that.$noticeLi.addClass('active');
                that.dialogPage = busyAdmin.dialog.fullRight(TopBar.NOTICE_TEMPLATE, 'busy-admin-notice-panel', function () {
                    that.vueApp = new Vue({
                        el      : '#busyAdminNoticeVueApp',
                        data    : {
                            list     : [],
                            body     : null,
                            page     : 1,
                            timer    : null,
                            showLast : false,
                            load     : false
                        },
                        created : function () {
                            this.loadList();
                        },
                        methods : {
                            loadList : function () {
                                var me = this;

                                if (me.load) {
                                    return;
                                }

                                me.load = true;
                                busyAdmin
                                    .request(that.url + '?action=list&type=notice&page=' + this.page)
                                    .headers(headers)
                                    .pending(false)
                                    .complete(function () {
                                        me.load = false;
                                    })
                                    .success(function (json) {
                                        var list = json.result.list || [];
                                        list.map(function (item) {
                                            item.url    = item.url || 'javascript:void(0)';
                                            item.target = 0 === item.url.indexOf(that.root) ? '' : '_blank';
                                        });

                                        if (list.length > 0) {
                                            me.page++;
                                            me.list     = me.list.concat(list);
                                            me.showLast = false;
                                        } else {
                                            if (me.list.length > 0) {
                                                me.showLast = true;
                                            }
                                        }

                                        return false;
                                    })
                                    .exec();
                            },

                            onScroll : function () {
                                var me = this;
                                if (this.body == null) {
                                    this.body = $(this.$el).find('.busy-admin-right-panel-body');
                                }

                                if (this.body.scrollTop() + this.body[0].offsetHeight >= this.body[0].scrollHeight) {
                                    clearTimeout(this.timer);
                                    this.timer = setTimeout(function () {
                                        me.loadList();
                                    }, 300);
                                }
                            },

                            onClear : function () {
                                var me = this;

                                busyAdmin
                                    .request(that.url + '?action=clear&type=notice')
                                    .headers(headers)
                                    .success(function () {
                                        me.list = [];

                                        that.refreshUnread();
                                    })
                                    .exec();
                            },

                            onAllRead : function () {
                                var me = this;

                                busyAdmin
                                    .request(that.url + '?action=all_read&type=notice')
                                    .headers(headers)
                                    .success(function () {
                                        me.list.map(function (item) {
                                            item.read = true;
                                        });

                                        that.refreshUnread();
                                    })
                                    .exec();
                            },

                            onItemClick : function (index) {
                                var item = this.list[index];
                                if (!item.read) {
                                    busyAdmin
                                        .request(that.url + '?action=read&type=notice&id=' + item.id)
                                        .pending(false)
                                        .headers(headers)
                                        .success(function () {
                                            that.refreshUnread();

                                            return false;
                                        })
                                        .exec();

                                    this.list[index].read = true;
                                }
                            },

                            onClose : function () {
                                that.close();
                            }
                        }
                    });
                }, function () {
                    that.$noticeLi.removeClass('active');
                });
            });
        },

        /**
         * 初始化待办
         */
        _initTodo : function () {
            var that = this;

            // 待办
            that.$todoA.on('click', function () {
                that.$todoLi.addClass('active');
                that.dialogPage = busyAdmin.dialog.fullRight(TopBar.TODO_TEMPLATE, 'busy-admin-todo-panel', function () {
                    that.vueApp = new Vue({
                        el      : '#busyAdminTodoVueApp',
                        data    : {
                            list : [],
                            load : false,
                        },
                        created : function () {
                            this.loadList();
                        },
                        methods : {
                            loadList    : function () {
                                var me = this;
                                if (me.load) {
                                    return;
                                }

                                me.load = true;
                                busyAdmin
                                    .request(that.url + '?action=list&type=todo')
                                    .headers(headers)
                                    .pending(false)
                                    .complete(function () {
                                        me.load = false;
                                    })
                                    .success(function (json) {
                                        var list = json.result.list || [];
                                        list.map(function (item) {
                                            item.url = item.url || 'javascript:void(0)';
                                        });

                                        me.list = list;
                                        return false;
                                    })
                                    .exec();
                            },
                            onItemClick : function (index) {
                                var item = this.list[index];
                                busyAdmin
                                    .request(that.url + '?action=read&type=todo&id=' + item.id)
                                    .headers(headers)
                                    .pending(false)
                                    .success(function () {
                                        that.refreshUnread();

                                        return false;
                                    })
                                    .exec();
                            },
                            onClose     : function () {
                                that.close();
                            }
                        }
                    });
                }, function () {
                    that.$todoLi.removeClass('active');
                });
            });
        },

        /**
         * 刷新消息红点
         */
        refreshUnread : function () {
            var me = this;
            clearTimeout(me.messageTimer);
            if (me.messageLoading) {
                return;
            }

            me.messageLoading = true;
            me.request        = busyAdmin
                .request(me.url)
                .headers(headers)
                .pending(false)
                .complete(function () {
                    me.messageLoading = false;
                    me.messageTimer   = setTimeout(function () {
                        me.refreshUnread();
                    }, 1000 * 10);
                })
                .error(function (response, type, xhr) {
                    if (me.isAbort) {
                        return false;
                    }
                })
                .success(function (data) {
                    var result       = data.result || {};
                    var notice_total = result.notice_total || 0;
                    var todo_total   = result.todo_total || 0;

                    if (me.$todoBadge) {
                        if (todo_total > 0) {
                            me.$todoBadge.removeClass('hide').text(todo_total >= 100 ? '99+' : todo_total);
                        } else {
                            me.$todoBadge.addClass('hide');
                        }
                    }

                    if (me.$noticeBadge) {
                        if (notice_total > 0) {
                            me.$noticeBadge.removeClass('hide').text(notice_total >= 100 ? '99+' : notice_total);
                        } else {
                            me.$noticeBadge.addClass('hide');
                        }
                    }

                    return false;
                })
                .exec();
        },


        /**
         * 刷新列表
         */
        refreshList : function () {
            if (!this.vueApp) {
                return;
            }

            this.vueApp.loadList();
        },

        /**
         * 关闭对话框
         */
        close : function () {
            if (this.dialogPage) {
                this.dialogPage.close();
                this.dialogPage = null;
            }
        },

        /**
         * 销毁
         */
        destroy : function () {
            clearTimeout(this.messageTimer);
            if (this.request) {
                this.isAbort = true;
                this.request.abort();
                this.request = null;
            }

            this.close();
        }
    };

    TopBar.NOTICE_TEMPLATE = '<div class="busy-admin-right-panel" id="busyAdminNoticeVueApp">\
    <div class="busy-admin-right-panel-head">通知</div>\
    <div class="busy-admin-right-panel-body" v-on:scroll="onScroll">\
        <template v-if="list.length > 0">\
            <a class="media" v-for="(item, index) in list" :class="item.read ? \'read\' : \'\'" :data-index="index" @click="onItemClick(index)" :href="item.url" v-bind="item.attrs">\
                <div class="media-left" v-if="item.icon.length > 0">\
                    <i class="media-object icon" :class="item.icon" :style="{backgroundColor: item.icon_color}" v-if="-1 === item.icon.indexOf(\'/\')"></i>\
                    <img class="media-object" :src="item.icon" v-else>\
                </div>\
                <div class="media-body">\
                    <h5 class="media-heading">\
                        <span v-if="!item.read"></span>\
                        {{item.title}}\
                    </h5>\
                    <p class="text-muted size-14" v-if="item.desc.length > 0">{{item.desc}}</p>\
                    <p class="text-gray size-12">{{item.create_time}}</p>\
                </div>\
            </a>\
            <div class="media text-muted text-center size-12" v-if="showLast">没有消息了</div>\
        </template>\
        <template v-else>\
            <div class="empty-info" v-if="load">\
                <i class="fa fa-spinner fa-spin size-30"></i><br/><br/>加载中...\
            </div>\
            <div class="empty-info" v-else>暂无通知</div>\
        </template>\
    </div>\
    <div class="busy-admin-right-panel-foot">\
        <div class="btn-group">\
            <a class="btn btn-warning" @click="onAllRead"><i class="fa fa-trash"></i> 全部已读</a>\
            <a class="btn btn-danger" @click="onClear"><i class="fa fa-trash"></i> 清空</a>\
            <a class="btn btn-default" @click="onClose"><i class="fa fa-close"></i> 关闭</a>\
        </div>\
    </div>\
</div>';
    TopBar.TODO_TEMPLATE   = '<div class="busy-admin-right-panel" id="busyAdminTodoVueApp">\
    <div class="busy-admin-right-panel-head">待办</div>\
    <div class="busy-admin-right-panel-body">\
        <template v-if="list.length > 0">\
            <a class="media" v-for="(vo, index) in list" :href="vo.url" :data-index="index" @click="onItemClick(index)" v-bind="vo.attrs">\
                <div class="media-body">\
                    <h5 class="media-heading text-bold">\
                        <span class="badge badge-pill badge-danger" v-if="vo.total > 0">{{vo.total}}</span>\
                        {{vo.title}}\
                        <span class="badge badge-outline" :class="\'badge-outline-\' + vo.level_style" v-if="vo.level_name.length > 0">{{vo.level_name}}</span>\
                    </h5>\
                    <p class="text-muted size-14" v-if="vo.desc.length > 0">{{vo.desc}}</p>\
                </div>\
            </a>\
        </template>\
        <template v-else>\
            <div class="empty-info" v-if="load">\
                <i class="fa fa-spinner fa-spin size-30"></i><br/><br/>加载中...\
            </div>\
            <div class="empty-info" v-else>暂无待办</div>\
        </template>\
    </div>\
    <div class="busy-admin-right-panel-foot">\
        <a class="btn btn-default btn-block" @click="onClose"><i class="fa fa-close"></i> 关闭</a>\
    </div>\
</div>';

    $(document).on(busyAdmin.e.appReadies, function () {
        if (!busyAdmin.app.isFrame) {
            isInit = false;

            if (busyAdmin.app._topBar) {
                busyAdmin.app._topBar.destroy();
                busyAdmin.app._topBar = null;
            }
            return;
        }

        if (isInit) {
            return;
        }

        busyAdmin.app._topBar = new TopBar();
    });
})(jQuery, busyAdmin);
/**
 * 树结构
 * @name Tree
 * @todo 块状后默认不显示虚线
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/tree', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    'use strict';

    var pluginIsReady = false;

    /**
     * @class
     * @param element
     * @param options
     * @constructor
     * @lends Tree
     */
    var Tree = function (element, options) {
        var me       = this;
        me.element   = element;
        me.$element  = $(element).addClass('busy-admin-tree');
        me.options   = $.extend(true, {}, Tree.DEFAULTS, me.$element.data() || {}, options || {});
        var opt      = me.options;
        me.jstree    = null;
        me.jstreeOpt = {
            core    : {
                animation              : opt.animation,
                multiple               : opt.multiple,
                expand_selected_onload : opt.expandSelectedOnload,
                force_text             : opt.forceText,
                dblclick_toggle        : false,
                check_callback         : function (operation, node, nodeParent, nodePosition, more) {
                    var args = Array.prototype.slice.call(arguments);
                    if (typeof opt.operate === 'function') {
                        return opt.operate.apply(this, args);
                    }

                    if (typeof opt.operate === 'boolean') {
                        return opt.operate;
                    }

                    if (typeof opt.operate === 'string') {
                        var res = busyAdmin.helper.execCallback(opt.operate, this, args);
                        if (res != null) {
                            return res;
                        }
                    }

                    return -1 !== (opt.operate || []).indexOf(operation);
                },
                themes                 : {
                    dots     : opt.dots,
                    icons    : opt.icons,
                    ellipsis : opt.ellipsis,
                    stripes  : opt.stripes
                },
                strings                : {
                    'Loading ...' : opt.locale.loading,
                    'New node'    : opt.locale.newNode,
                    'nodes'       : opt.locale.nodes,
                }
            },
            types   : {
                default : {
                    // icon: 'fa fa-folder-o'
                }
            },
            plugins : ['types']
        };

        // 叶子节点平铺
        if (opt.leafTile) {
            me.$element.addClass('leaf-tile')
        }

        // 显示外边框
        if (opt.border) {
            me.$element.addClass('show-border')
        }

        // 复选框
        if (opt.checkbox) {
            me.jstreeOpt.plugins.push('checkbox');
            me.jstreeOpt.checkbox = {
                keep_selected_style : opt.checkboxKeepSelectedStyle,
                tie_selection       : opt.checkboxTieSelection,
                three_state         : opt.checkboxRelation,
                cascade             : opt.checkboxRelationDir,
                cascade_to_disabled : opt.checkboxRelationDisabled,
                cascade_to_hidden   : opt.checkboxRelationHidden,
            };
        }

        // 显示行为块
        if (opt.block) {
            me.jstreeOpt.plugins.push('wholerow');
        }

        // 允许拖拽
        if (opt.dnd) {
            me.jstreeOpt.plugins.push('dnd');
        }

        // 右键菜单
        if (opt.contextmenu) {
            var itemsCallback = opt.contextmenuItems;
            me.jstreeOpt.plugins.push('contextmenu');
            me.jstreeOpt.contextmenu = {
                items : function (node) {
                    busyAdmin.dialog.toast('没有配置右键菜单项')
                    return {};
                }
            };

            if (typeof itemsCallback === 'function') {
                me.jstreeOpt.contextmenu.items = itemsCallback;
            } else if (typeof itemsCallback === 'string' && -1 === itemsCallback.indexOf(',') && typeof window[itemsCallback] === 'function') {
                me.jstreeOpt.contextmenu.items = window[itemsCallback];
            }
        }

        // 异步数据
        if (opt.url || opt.model) {
            me.jstreeOpt.core.data = function (node, callback) {
                var api = this;

                var params = {
                    model           : opt.model,
                    extend          : opt.modelExtend ? 1 : 0,
                    id_field        : opt.modelIdField || '',
                    parent_field    : opt.modelParentField || '',
                    name_field      : opt.modelNameField || '',
                    icon_field      : opt.modelIconField || '',
                    disabled_field  : opt.modelDisabledField || '',
                    async_node      : opt.asyncNode ? 1 : 0,
                    async_parent_id : node.id === '#' ? '' : node.id,
                    order           : opt.modelOrder || ''
                };

                if (typeof opt.params === "object") {
                    params = $.extend({}, opt.params, params);
                } else if (opt.params) {
                    var call = opt.params;
                    if (typeof opt.params !== 'function') {
                        call = busyAdmin.helper.scope(opt.params);
                    }

                    if (typeof call === 'function') {
                        var res = call.call();
                        params  = $.extend({}, res || {}, params);
                    }
                }

                busyAdmin
                    .request(opt.model ? busyAdmin.getConfig('tree').url : (typeof opt.url === 'function' ? opt.url() : opt.url))
                    .method(opt.method)
                    .addHeader('Busy-Admin-Plugin', 'Tree')
                    .pending(false)
                    .params(params)
                    .error(function (response, type, xhr) {
                        callback.call(api, []);
                    })
                    .success(function (response, type, xhr) {
                        callback.call(api, response.result.data);

                        return false;
                    }).exec();
            }
        } else if (opt.list && $.isArray(opt.list) && opt.list.length > 0) {
            me.jstreeOpt.core.data = opt.list;
        }

        me.ready(me.init);
    }

    Tree.prototype = {
        /**
         * 准备完成
         * @param callback
         */
        ready : function (callback) {
            var me = this;
            if (pluginIsReady) {
                typeof callback === "function" && callback.call(me);
            } else {
                require([busyAdmin.lib.tree], function () {
                    pluginIsReady = true;

                    typeof callback === "function" && callback.call(me);
                });
            }
        },

        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }

            me.isInit = true;
            // data-属性转jstree
            me.$element.find('[disabled],[data-disabled],[data-icon],[data-opened],[data-selected],[data-jstree]').each(function () {
                var $this = $(this);
                var data  = $this.data();
                $this.removeData();

                if (this.hasAttribute('disabled')) {
                    data.disabled = true;
                }

                if (data.hasOwnProperty('jstree') && typeof data.jstree === 'object') {
                    data = $.extend(data.jstree, data);
                    delete data.jstree;
                }

                $this.data('jstree', data);
            });

            // 事件转换
            var events = '';
            ['init', 'loading', 'loaded', 'ready', 'destroy', 'set_state', 'refresh', 'load_node', 'load_all', 'redraw', 'model', 'before_open', 'open_node', 'after_open', 'close_node', 'after_close', 'open_all', 'close_all', 'enable_node', 'disable_node', 'hide_node', 'show_node', 'hide_all', 'show_all', 'activate_node', 'hover_node', 'dehover_node', 'select_node', 'deselect_node', 'changed', 'select_all', 'deselect_all', 'refresh_node', 'set_id', 'set_text', 'create_node', 'rename_node', 'delete_node', 'move_node', 'copy_node', 'cut', 'copy', 'paste', 'clear_buffer', 'disable_checkbox', 'enable_checkbox', 'check_node', 'uncheck_node', 'check_all', 'uncheck_all'].map(function (event) {
                events += event + '.jstree ';
            })

            me.$element.on(events, function (e, api) {
                var args   = [];
                var target = me.jstree;
                switch (e.type) {
                    case 'load_node':
                        args = [target, api.node, api.status];
                        break;
                    case 'redraw':
                    case 'hide_all':
                    case 'show_all':
                        args = [target, api.nodes];
                        break;
                    case 'model':
                        args   = [target, api.nodes, api.parent]
                        e.type = 'insert';
                        break;
                    case 'load_all':
                    case 'before_open':
                    case 'open_node':
                    case 'after_open':
                    case 'close_node':
                    case 'after_close':
                    case 'open_all':
                    case 'close_all':
                    case 'enable_node':
                    case 'disable_node':
                    case 'hide_node':
                    case 'hover_node':
                    case 'dehover_node':
                    case 'disable_checkbox':
                    case 'enable_checkbox':
                    case 'copy':
                    case 'cut':
                        args = [target, api.node];
                        break;
                    case 'activate_node':
                        args = [target, api.node, api.event];
                        break;
                    case 'select_node':
                    case 'deselect_node':
                    case 'check_node':
                    case 'uncheck_node':
                        args = [target, api.node, api.selected, api.event];
                        break;
                    case 'changed':
                        args = [target, api.node, api.action, api.selected, api.event];
                        break;
                    case 'select_all':
                    case 'check_all':
                        args = [target, api.selected];
                        break;
                    case 'deselect_all':
                    case 'uncheck_all':
                        args = [target, api.node, api.selected];
                        break;
                    case 'refresh_node':
                        args = [target, api.node, api.nodes];
                        break;
                    case 'set_id':
                        args = [target, api.node, api.old];
                        break;
                    case 'set_text':
                        args = [target, api.obj, api.text];
                        break;
                    case 'create_node':
                        args = [target, api.node, api.parent, api.position];
                        break;
                    case 'rename_node':
                        args = [target, api.node, api.text, api.old];
                        break;
                    case 'delete_node':
                        args = [target, api.node, api.parent];
                        break;
                    case 'move_node':
                        args = [target, api.node, api.parent, api.position, api.old_parent, api.old_position, api.is_multi, api.old_instance, api.new_instance];
                        break;
                    case 'copy_node':
                        args = [target, api.node, api.original, api.parent, api.position, api.old_parent, api.old_position, api.is_multi, api.old_instance, api.new_instance];
                        break;
                    case 'paste':
                        args = [target, api.parent, api.node, api.mode];
                        break;
                    default:
                        args = [target];
                }

                // 填充空内容
                switch (e.type) {
                    case 'ready':
                    case 'refresh':
                    case 'delete_node':
                    case 'create_node':
                        var treeData = me.jstree.get_json() || [];
                        if (me.$empty) {
                            me.$empty.remove();
                            me.$empty = null;
                        }
                        if (treeData.length == 0) {
                            me.$empty = $('<div class="busy-admin-tree-empty">' + me.options.emptyText + '</div>');
                            me.$element.append(me.$empty);
                        }
                        break;

                }

                me.$element.triggerHandler(busyAdmin.ee(e.type, 'tree'), args);
            });

            me.$element.jstree(me.jstreeOpt);
            me.jstree = me.$element.jstree(true);

            // 自动填充表单数据
            if (me.options.checkbox) {
                if (me.$element.closest('form').length > 0) {
                    var verifyData    = busyAdmin.helper.parseData(me.options, 'verify');
                    var uncertainName = me.options.uncertainName || '';
                    var name          = me.options.name || '';
                    name              = -1 !== name.indexOf('[]') ? name : name + '[]';
                    uncertainName     = -1 !== uncertainName.indexOf('[]') ? uncertainName : (uncertainName ? uncertainName + '[]' : '');

                    me.$nameHidden      = $('<select name="' + name + '" multiple/>').hide();
                    me.$uncertainHidden = $('<select name="' + uncertainName + '" multiple/>').hide();
                    me.$element.before(me.$nameHidden);
                    me.$element.before(me.$uncertainHidden);

                    for (var key in verifyData) {
                        var value = verifyData[key];
                        switch (key) {
                            case 'maxlength':
                            case 'minlength':
                            case 'required':
                                me.$nameHidden.attr(key, value);
                                break;
                            default:
                                me.$nameHidden.attr('data-' + busyAdmin.helper.snake(key, '-'), value);
                        }
                    }

                    // 必填验证
                    me.$nameHidden.on(busyAdmin.e.verifyErrorPlacement, function (e, error) {
                        me.$element.after(error);

                        return false;
                    });

                    me.$element.on(busyAdmin.e.treeChanged + ' ' + busyAdmin.e.treeReady, function () {
                        me.$nameHidden.html('');
                        me.jstree.get_checked().map(function (item) {
                            me.$nameHidden.append('<option value="' + item + '" selected/>');
                        });
                        me.$nameHidden.trigger('change');

                        if (me.options.uncertainName) {
                            me.$uncertainHidden.html('');
                            me.jstree.get_undetermined().map(function (item) {
                                me.$uncertainHidden.append('<option value="' + item + '" selected/>');
                            });
                            me.$uncertainHidden.trigger('change');
                        }
                    });
                }
            }

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'Tree', me);
        },
    };


    Tree.DEFAULTS = {
        dots                 : true,
        icons                : true,
        ellipsis             : false,
        stripes              : false,
        operate              : false,
        animation            : 200,
        multiple             : true,
        expandSelectedOnload : false,
        forceText            : false,
        leafTile             : false, // 叶子节点是否平铺
        border               : true, // 是否显示外边框

        // ajax
        url       : null,
        method    : 'get',
        params    : null,
        emptyText : '无选项',

        model              : '',
        modelExtend        : false,
        modelIdField       : '',
        modelNameField     : '',
        modelDisabledField : '',
        modelIconField     : '',
        modelParentField   : '',
        asyncNode          : false,
        modelOrder         : '',

        // 数据
        list : [],

        // 表单名称
        name          : 'tree_id[]',
        uncertainName : null,

        // 复选框
        checkbox                  : false, // 是否启用复选框
        checkboxKeepSelectedStyle : false, // 是否保留选中样式
        checkboxTieSelection      : true, // 设置复选框事件绑定到核心事件触发，还是单独触发
        checkboxRelation          : true, // 设置复选框是否关联上下层级
        checkboxRelationDir       : '', // 设置复选框不关联时，关联的方向，支持 up, down, undetermined
        checkboxRelationDisabled  : true, // 设置复选框关联是否影响禁用的复选框
        checkboxRelationHidden    : true, // 设置复选框关联是否影响隐藏的复选框

        // 显示块及
        block : false,

        // 右键菜单
        contextmenu      : false,
        contextmenuItems : null,

        locale : $.extend({}, {
            loading : '请稍后...',
            newNode : '未命名',
            nodes   : '节点'
        }, ((busyAdmin.locale || {}).plugin || {}).tree || {}),
    };


    /**
     * @param option
     * @return {jQuery|Tree|*}
     * @constructor
     */
    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.tree.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        // 初始化
        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Tree(this, typeof option === 'object' && option)));
            }

            if (typeof option === "string") {
                try {
                    ret = api[option].apply(api, args);
                } catch (e) {
                    if (e instanceof TypeError) {
                        ret = api.jstree[option].apply(api.jstree, args);
                    }
                }
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminTree             = Plugin;
    $.fn.busyAdminTree.Constructor = Tree;
    busyAdmin.plugins.Tree         = Tree;

    var eventGroup = 'tree';
    $.extend(busyAdmin.e, {
        /**
         * 所有事件绑定后触发
         */
        treeInit : busyAdmin.ee('init', eventGroup),
        /**
         * 加载开始之前触发
         */
        treeLoading : busyAdmin.ee('loading', eventGroup),
        /**
         * 销毁前触发
         */
        treeDestroy : busyAdmin.ee('destroy', eventGroup),
        /**
         * 首次加载根节点后触发
         */
        treeLoaded : busyAdmin.ee('loaded', eventGroup),
        /**
         * 所有节点加载完毕后触发
         */
        treeReady : busyAdmin.ee('ready', eventGroup),
        /**
         * 加载节点后触发
         */
        treeLoadNode : busyAdmin.ee('load-node', eventGroup),
        /**
         * 加载所有节点完成后触发
         */
        treeLoadAll : busyAdmin.ee('load-all', eventGroup),
        /**
         * 插入新数据时触发
         */
        treeInsert : busyAdmin.ee('insert', eventGroup),
        /**
         * 节点重绘后触发
         */
        treeRedraw : busyAdmin.ee('redraw', eventGroup),
        /**
         * 当一个节点即将被打开时触发
         */
        treeBeforeOpen : busyAdmin.ee('before-open', eventGroup),
        /**
         * 打开节点时触发（如果有动画，则尚未完成）
         */
        treeOpenNode : busyAdmin.ee('open-node', eventGroup),
        /**
         * 当节点打开且动画完成时触发
         */
        treeAfterOpen : busyAdmin.ee('after-open', eventGroup),
        /**
         * 当节点关闭时触发（如果有动画还没有完成）
         */
        treeCloseNode : busyAdmin.ee('close-node', eventGroup),
        /**
         * 当节点关闭且动画完成时触发
         */
        treeAfterClose : busyAdmin.ee('after-close', eventGroup),
        /**
         * 执行openAll方法后触发
         */
        treeOpenAll : busyAdmin.ee('open-all', eventGroup),
        /**
         * 执行closeAll方法后触发
         */
        treeCloseAll : busyAdmin.ee('close-all', eventGroup),
        /**
         * 启用节点时触发
         */
        treeEnableNode : busyAdmin.ee('enable-node', eventGroup),
        /**
         * 节点被禁用时触发
         */
        treeDisableNode : busyAdmin.ee('disable-node', eventGroup),
        /**
         * 隐藏节点时触发
         */
        treeHideNone : busyAdmin.ee('hide-node', eventGroup),
        /**
         * 显示节点时触发
         */
        treeShowNode : busyAdmin.ee('show-node', eventGroup),
        /**
         * 当所有节点都隐藏时触发
         */
        treeHideAll : busyAdmin.ee('hide-all', eventGroup),
        /**
         * 显示所有节点时触发
         */
        treeShowAll : busyAdmin.ee('show-all', eventGroup),
        /**
         * 当用户点击或交互节点时触发
         */
        treeClickNode : busyAdmin.ee('activate-node', eventGroup),
        /**
         * 当节点悬停时触发
         */
        treeHoverNode : busyAdmin.ee('hover-node', eventGroup),
        /**
         * 当节点不再悬停时触发
         */
        treeDeHoverNode : busyAdmin.ee('dehover-node', eventGroup),
        /**
         * 选择节点时触发
         */
        treeSelectNode : busyAdmin.ee('select-node', eventGroup),
        /**
         * 选择更改时触发
         */
        treeChanged : busyAdmin.ee('changed', eventGroup),
        /**
         * 取消选择节点时触发
         */
        treeDeSelectNode : busyAdmin.ee('deselect-node', eventGroup),
        /**
         * 选择所有节点时触发
         */
        treeSelectAll : busyAdmin.ee('select-all', eventGroup),
        /**
         * 取消选择所有节点时触发
         */
        treeDeSelectAll : busyAdmin.ee('deselect-all', eventGroup),
        /**
         * set_state完成时触发
         */
        treeSetState : busyAdmin.ee('set-state', eventGroup),
        /**
         * 刷新完成时触发
         */
        treeRefresh : busyAdmin.ee('refresh', eventGroup),
        /**
         * 节点刷新时触发
         */
        treeRefreshNode : busyAdmin.ee('refresh-node', eventGroup),
        /**
         * 当节点 id 值改变时触发
         */
        treeSetId : busyAdmin.ee('set-id', eventGroup),
        /**
         * 当节点文本值更改时触发
         */
        treeSetText : busyAdmin.ee('set-text', eventGroup),
        /**
         * 创建节点时触发
         */
        treeCreateNode : busyAdmin.ee('create-node', eventGroup),
        /**
         * 重命名节点时触发
         */
        treeRenameNode : busyAdmin.ee('rename-node', eventGroup),
        /**
         * 删除节点时触发
         */
        treeDeleteNode : busyAdmin.ee('delete-node', eventGroup),
        /**
         * 移动节点时触发
         */
        treeMoveNode : busyAdmin.ee('move-node', eventGroup),
        /**
         * 复制节点时触发
         */
        treeCopyNode : busyAdmin.ee('copy-node', eventGroup),
        /**
         * 当节点被添加到缓冲区进行移动时触发
         */
        treeCut : busyAdmin.ee('cut', eventGroup),
        /**
         * 当节点被添加到缓冲区进行复制时触发
         */
        treeCopy : busyAdmin.ee('copy', eventGroup),
        /**
         * 调用粘贴时触发
         */
        treePaste : busyAdmin.ee('paste', eventGroup),
        /**
         * 当复制/剪切缓冲区被清除时触发
         */
        treeClearBuffer : busyAdmin.ee('clear-buffer', eventGroup),
        /**
         * 当节点的复选框被禁用时触发
         */
        treeDisableCheckbox : busyAdmin.ee('disable-checkbox', eventGroup),
        /**
         * 当节点的复选框被禁用时触发
         */
        treeEnableCheckbox : busyAdmin.ee('enable-checkbox', eventGroup),
        /**
         * 选中节点时触发（仅当复选框设置中的 tie_selection 为 false 时）
         */
        treeCheckNode : busyAdmin.ee('check-node', eventGroup),
        /**
         * 取消选中节点时触发（仅当复选框设置中的 tie_selection 为 false 时）
         */
        treeUnCheckNode : busyAdmin.ee('uncheck-node', eventGroup),
        /**
         * 检查所有节点时触发（仅当复选框设置中的 tie_selection 为 false 时）
         */
        treeCheckAll : busyAdmin.ee('check-all', eventGroup),
        /**
         * 取消选中所有节点时触发（仅当复选框设置中的 tie_selection 为 false 时）
         */
        treeUnCheckAll : busyAdmin.ee('uncheck-all', eventGroup),
    });


    // 自动初始化
    busyAdmin.autoInit('[data-toggle="busy-tree"],[busy-tree]', function () {
        Plugin.call(this);
    });

    return Tree;
}));
/**
 * 文件上传
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/upload', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    var config      = {};
    var WebUploader = null;
    var Sortable    = null;
    var SparkMD5    = null;
    var RequireInit = false;
    var unf         = undefined;

    /**
     * @param $el
     * @param id
     * @return {jQuery}
     */
    var getId = function ($el, id) {
        return $el.find('[data-upload-id="' + id + '"]');
    }

    /**
     * 上传组件
     * @param element
     * @param options
     * @constructor
     */
    var Upload = function (element, options) {
        var me        = this;
        me.element    = element;
        me.$element   = $(element);
        me.options    = $.extend(true, {}, Upload.DEFAULTS, me.$element.data(), options || {});
        me.uploader   = null;
        me.fileConfig = {};
        me.headers    = {};
        me.$uploadBtn = null;
        me.$selectBtn = null;
        me.module     = null;
        me.isInput    = me.$element.is(':input');

        me.options.disabled = me.$element.prop('disabled') || me.options.disabled;
        me.callback         = {
            responseSuccess : $.noop, // 上传成功触发
        };

        me.ready(me.init);
    };

    Upload.prototype = {
        /**
         * 准备完成
         * @param callback
         */
        ready : function (callback) {
            var me  = this;
            var lib = busyAdmin.lib;
            require([lib.bootstrap, lib.webUploader, lib.sortable, lib.uploadConfig, lib.sparkMd5], function (bootstrap, uploader, sort, uploadConfig, spark) {
                if (RequireInit) {
                    callback.call(me);
                    return;
                }

                RequireInit  = true;
                WebUploader  = uploader;
                Sortable     = sort;
                SparkMD5     = spark;
                config       = uploadConfig;
                config.disks = config.disks || {};

                WebUploader.Uploader.register({
                    'init'             : 'init',
                    'before-send-file' : 'beforeSendFile',
                    'before-send'      : 'beforeSend',
                    'after-send-file'  : 'afterSendFile'
                }, {
                    init : function (opts) {
                        var busy = opts._busy
                        if (!busy) {
                            return;
                        }

                        // 自定义上传服务
                        if (busy.use) {
                            return busyAdmin.helper.execCallback(busy.asyncInit, busy.el[0], [this.owner, opts], busy.el, busyAdmin.e.uploadAsyncInit, null);
                        }

                        // 直传模式
                        var asyncInit = config.disks[busy.disk].asyncInit;
                        if (typeof asyncInit === 'function') {
                            return asyncInit.call(this, opts);
                        }
                    },

                    // 上传前触发，实现秒传
                    beforeSendFile : function (file) {
                        var me      = this;
                        var options = me.options
                        var busy    = options._busy
                        if (!busy) {
                            return;
                        }

                        // 自定义服务上传
                        if (busy.use) {
                            return busyAdmin.helper.execCallback(busy.asyncBeforeSendFile, busy.el[0], [this.owner, file], busy.el, busyAdmin.e.uploadAsyncBeforeSendFile, null);
                        }

                        // 直传模式
                        file.doneParts = [];
                        var owner      = me.owner;
                        var chunkSize  = options.chunkSize;
                        var chunks     = chunkSize ? Math.ceil(file.source.size / chunkSize) : 1;
                        var deferred   = WebUploader.Deferred();
                        Upload
                            .md5File(file.source.source, chunkSize)
                            .progress(function (progress) {
                                // 获取hash进度占整个进度的5%
                                owner.trigger('uploadProgress', file, 0.049 * progress, 'hash');
                            })
                            .done(function (md5) {
                                // 准备上传
                                busyAdmin
                                    .request(config.prepare)
                                    .method('post')
                                    .pending(false)
                                    .params({
                                        md5         : md5,
                                        mimetype    : file.type || '',
                                        filesize    : file.size,
                                        filename    : file.name,
                                        class_type  : busy.classType,
                                        class_value : busy.classValue,
                                        part        : chunks > 1 ? 1 : 0,
                                        disk        : busy.disk
                                    })
                                    .success(function (response) {
                                        var result         = response.result;
                                        file.prepareResult = result;

                                        // 秒传
                                        if (result.fast) {
                                            owner.skipFile(file);
                                            owner.trigger('uploadProgress', file, 1);
                                        } else {
                                            // 触发异步上传文件前回调
                                            var asyncBeforeSendFile = config.disks[busy.disk].asyncBeforeSendFile;
                                            if (typeof asyncBeforeSendFile === 'function') {
                                                var asyncDeferred = asyncBeforeSendFile.call(me, file, result);
                                                if (WebUploader.isPromise(asyncDeferred)) {
                                                    asyncDeferred
                                                        .done(function () {
                                                            owner.trigger('uploadProgress', file, 0.05, 'hash');
                                                            deferred.resolve();
                                                        })
                                                        .fail(function (asyncRes) {
                                                            deferred.reject(asyncRes);
                                                        });

                                                    return false;
                                                }
                                            }

                                            owner.trigger('uploadProgress', file, 0.05, 'hash');
                                        }

                                        deferred.resolve();

                                        return false;
                                    })
                                    .error(function (response) {
                                        deferred.reject(response.message);

                                        return false;
                                    })
                                    .exec();
                            })
                            .fail(function (res) {
                                deferred.reject('Hash error');
                            });

                        return deferred.promise();
                    },

                    // 分片上传断点续传
                    beforeSend : function (block) {
                        var options = this.options;
                        var busy    = options._busy;
                        if (!busy) {
                            return;
                        }

                        // 自定义服务上传
                        if (busy.use) {
                            return busyAdmin.helper.execCallback(busy.asyncBeforeSend, busy.el[0], [this.owner, block], busy.el, busyAdmin.e.uploadAsyncBeforeSend, null);
                        }

                        // 直传模式
                        // 触发配置异步回调
                        var asyncBeforeSend = config.disks[busy.disk].asyncBeforeSend;
                        if (typeof asyncBeforeSend === 'function') {
                            return asyncBeforeSend.call(this, block);
                        }
                    },

                    // 所有分片上传完成后
                    afterSendFile : function (file, res) {
                        var options = this.options;
                        var busy    = options._busy;
                        if (!busy) {
                            return;
                        }

                        // 自定义服务上传
                        if (busy.use) {
                            return busyAdmin.helper.execCallback(busy.asyncAfterSendFile, busy.el[0], [this.owner, file, res], busy.el, busyAdmin.e.uploadAsyncAfterSendFile, null);
                        }

                        // 直传模式
                        // 远程上传完成后处理
                        var deferred = WebUploader.Deferred();
                        var reject   = function (err) {
                            deferred.reject(err);
                        };
                        var resolve  = function (res) {
                            deferred.resolve(res);
                        };
                        var done     = function () {
                            if (file.prepareResult && !file.prepareResult.fast) {
                                busyAdmin
                                    .request(config.done)
                                    .method('post')
                                    .pending(false)
                                    .params({
                                        file_id   : file.prepareResult.file_id,
                                        upload_id : file.prepareResult.upload_id,
                                        parts     : JSON.stringify(file.doneParts || [])
                                    })
                                    .success(function () {
                                        resolve();
                                        return false;
                                    })
                                    .error(function (response) {
                                        reject(response.message);
                                        return false;
                                    })
                                    .exec();
                            } else {
                                resolve();
                            }
                        }

                        // 触发异步所有分片上传完成后回调
                        var asyncAfterSendFile = config.disks[busy.disk].asyncAfterSendFile;
                        if (typeof asyncAfterSendFile === 'function') {
                            var asyncDeferred = asyncAfterSendFile.call(this, file, res);
                            if (WebUploader.isPromise(asyncDeferred)) {
                                asyncDeferred.done(done).fail(reject);

                                return deferred.promise();
                            }
                        }

                        done();
                        return deferred.promise();
                    }
                });

                callback.call(me);
            });
        },

        /**
         * 初始化
         */
        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }

            me.isInit     = true;
            me.fileConfig = config.config[me.options.classType || 'file'] || {};

            // 默认提示
            if (!me.options.placeholder) {
                me.options.placeholder = busyAdmin.helper.sprintf(me.options.locale.pleaseUploadOrSelect, me.fileConfig.name);
            }

            // 图片填充方式
            if (!me.options.objectFit) {
                me.options.objectFit = 'cover';
            }

            // 如果是input标签
            if (me.isInput) {
                var value       = me.$element.val();
                var name        = me.$element.attr('name');
                var placeholder = me.$element.attr('placeholder');
                if (value) {
                    me.options.value = value;
                }
                if (name) {
                    me.options.name = name;
                }
                if (placeholder) {
                    me.options.placeholder = placeholder;
                }
            }

            switch (me.options.type.toLowerCase()) {
                case 'files':
                    me.module = new FilesUpload(me);
                    break;
                case 'card':
                    me.module = new CardUpload(me);
                    break;
                case 'use':
                    me.module = new UseUpload(me);
                    break;
                default:
                    me.module = new SingleUpload(me);
            }

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'Upload', me);
        },

        /**
         * 初始化上传
         * @param {jQuery} $uploadBtn
         * @param {jQuery} $uploadDnd
         * @param {jQuery} $selectBtn
         * @param {Boolean} multiple
         */
        _initUploader : function ($uploadBtn, $uploadDnd, $selectBtn, multiple) {
            var me             = this;
            var $element       = me.$element;
            var element        = $element[0];
            var opt            = me.options;
            var pasteContainer = opt.pasteContainer;
            var busyEvent      = busyAdmin.e;
            var helper         = busyAdmin.helper;
            if (typeof pasteContainer === "string") {
                pasteContainer = $(pasteContainer);
            }

            if (pasteContainer instanceof jQuery) {
                if (pasteContainer.length > 0) {
                    pasteContainer = pasteContainer[0];
                } else {
                    opt.paste = false;
                }
            }

            // 上传按钮
            me.multiple    = multiple;
            me.$uploadBtn  = $uploadBtn;
            me.$selectBtn  = $selectBtn;
            me.$uploadIcon = $('<i icon/>');
            me.$uploadName = $('<span text/>');
            opt.uploadName = opt.uploadName || helper.sprintf(opt.locale.uploadFile, me.fileConfig.name);
            me._updateUploadBtn();

            // 选择按钮
            me.$selectIcon = $('<i icon/>');
            me.$selectName = $('<span text/>');
            opt.selectName = opt.selectName || helper.sprintf(opt.locale.selectFile, me.fileConfig.name);
            me._updateSelectBtn();

            // 直传模式参数
            var server          = config.url;
            var method          = 'POST';
            var sendAsBinary    = false;
            var withCredentials = false;
            var fileVal         = 'upload';
            var useUpload       = opt.server !== true;
            var params          = {};
            var headers         = {};
            var chunked         = true;
            var classType       = opt.classType || 'file';
            var classValue      = opt.classValue || '';
            var disk            = opt.disk || config.disk;
            var allowTitle      = helper.sprintf(opt.locale.selectFile, opt.allowTitle || me.fileConfig.name || opt.locale.file);

            // 限制扩展名
            var allowExtensions = me.fileConfig.allow_extensions || '';
            if (opt.allowExtensions !== unf && opt.allowExtensions !== null) {
                allowExtensions = opt.allowExtensions;
            }

            // 限制mimetype
            var allowMimetypes = me.fileConfig.allow_mimetypes || '';
            if (opt.allowMimetypes !== unf && opt.allowMimetypes !== null) {
                allowMimetypes = opt.allowMimetypes;
            }

            // 单个文件大小
            var maxSingleSize = me.fileConfig.max_size || unf;
            if ($.isNumeric(opt.maxSingleSize)) {
                maxSingleSize = opt.maxSingleSize;
            }

            // 自定义服务器上传
            if (useUpload) {
                params = busyAdmin.helper.scope(opt.params || {});
                if (typeof params === 'function') {
                    params = params();
                }

                headers = busyAdmin.helper.scope(opt.headers || {});
                if (typeof headers === 'function') {
                    headers = headers();
                }

                method          = opt.method || 'POST';
                sendAsBinary    = opt.binary || false;
                withCredentials = opt.credential || false;
                fileVal         = opt.fileVal || 'file';
                params          = params || {};
                headers         = headers || {};
                chunked         = opt.chunked || false;

                // 内置非直传模式
                if (opt.server === false) {
                    params['class_type']         = classType;
                    params['class_value']        = classValue;
                    params['disk']               = disk;
                    headers['Busy-Admin-Plugin'] = "Upload";
                    fileVal                      = 'upload';
                } else {
                    server = opt.server;
                }
            }

            me.uploader = new WebUploader.Uploader({
                server              : server,
                auto                : opt.auto,
                fileVal             : fileVal,
                method              : method,
                runtimeOrder        : 'html5',
                sendAsBinary        : sendAsBinary, // 是否以二进制方式发送
                withCredentials     : withCredentials, // 跨域时，是否允许携带cookie, 只有html5 runtime才有效
                dnd                 : opt.dnd && $uploadDnd && $uploadDnd.length > 0 ? $uploadDnd[0] : unf,
                paste               : opt.paste ? pasteContainer : unf,
                disableGlobalDnd    : true,
                chunked             : chunked,
                chunkSize           : opt.chunkSize,
                threads             : opt.threads,
                duplicate           : opt.duplicate,
                fileNumLimit        : opt.maxTotal || unf,
                fileSizeLimit       : opt.maxSize || unf,
                fileSingleSizeLimit : maxSingleSize,
                compress            : opt.compress ? {
                    width              : opt.compressWidth,
                    height             : opt.compressHeight,
                    quality            : opt.compressQuality,
                    allowMagnify       : opt.compressZoom,
                    crop               : opt.compressCrop,
                    preserveHeaders    : opt.compressMeta,
                    noCompressIfLarger : opt.compressLarger,
                    compressSize       : opt.compressSize,
                } : false,
                pick                : {
                    id       : $uploadBtn[0],
                    multiple : multiple
                },
                formData            : params,
                headers             : headers,
                accept              : {
                    title      : allowTitle,
                    extensions : allowExtensions,
                    mimeTypes  : allowMimetypes
                },
                _busy               : {
                    use                 : useUpload,
                    el                  : $element,
                    disk                : disk,
                    classType           : classType,
                    classValue          : classValue,
                    asyncInit           : opt.asyncInit,
                    asyncBeforeSendFile : opt.asyncBeforeSendFile,
                    asyncBeforeSend     : opt.asyncBeforeSend,
                    asyncAfterSendFile  : opt.asyncAfterSendFile
                }
            });
            me.uploader
                .on('ready', function () {
                    me.$uploadIcon = me.$uploadBtn.find('[icon]');
                    me.$uploadName = me.$uploadBtn.find('[text]');
                    helper.execCallback(opt.ready, element, [this], $element, busyEvent.uploadReady);
                })

                // 当某个文件的分块在发送前触发，主要用来询问是否要添加附带参数，大文件在开起分片上传的前提下此事件可能会触发多次。
                .on('uploadBeforeSend', function (object, params, headers) {
                    // 移除uploader默认自带的参数
                    ['id', 'lastModifiedDate', 'name', 'size', 'type', 'chunk', 'chunks'].map(function (item) {
                        delete params[item];
                    });

                    // 自定义服务上传
                    if (useUpload) {
                        helper.execCallback(opt.beforeSend, element, [this, object, params, headers], $element, busyEvent.uploadBeforeSend, null);
                    }

                    // 直传模式，触发配置同步回调
                    else {
                        var syncBeforeSend = config.disks[disk].syncBeforeSend;
                        if (typeof syncBeforeSend === 'function') {
                            syncBeforeSend.call(this, object, params, headers)
                        }
                    }

                    object.file._requestHeaders = headers;
                    object.file._requestParams  = params;
                })

                // 校验是否上传成功
                .on('uploadAccept', function (block, res, errorCallback) {
                    var options        = this.options;
                    var resultCallback = function (value) {
                        res._result = value;
                    }

                    // 直传模式
                    if (!useUpload) {
                        var syncUploadAccept = config.disks[disk].syncUploadAccept;
                        if (typeof syncUploadAccept === 'function') {
                            return syncUploadAccept.call(this, block, res, resultCallback, errorCallback) !== false;
                        }
                    }

                    // 自定义服务上传
                    else {
                        var result = helper.execCallback(opt.resultAccept, element, [this, block, res, resultCallback, errorCallback], $element, busyEvent.uploadAccept, null);
                        if (typeof result === 'boolean') {
                            return result;
                        }
                    }

                    var status;
                    busyAdmin.response.parse(res._raw, {
                        url     : options.server,
                        type    : options.method,
                        data    : $.param(block.file._requestParams || {}),
                        headers : block.file._requestHeaders || {}
                    }, function (response) {
                        status = true;
                        resultCallback(response.result);
                    }, function (response) {
                        errorCallback(response.message);
                        status = false;
                    });
                    return status;
                })

                // 当validate不通过时
                .on('error', function (code, arg1, arg2) {
                    var file;
                    if (arg1 instanceof WebUploader.File) {
                        file = arg1;
                    } else if (arg2 instanceof WebUploader.File) {
                        file = arg2;
                    }

                    helper.execCallback(opt.fileError, element, [this, file, me._parseCodeError(code)], $element, busyEvent.uploadFileError);
                })

                // 文件加入列队后触发
                .on('fileQueued', function (file) {
                    helper.execCallback(opt.fileQueued, element, [this, file], $element, busyEvent.uploadFileQueued);
                })

                // 一批文件加入列队后触发
                .on('filesQueued', function (files) {
                    helper.execCallback(opt.filesQueued, element, [this, files], $element, busyEvent.uploadFilesQueued);
                })

                // 当文件被移除队列后触发
                .on('fileDequeued', function (file) {
                    helper.execCallback(opt.fileDequeued, element, [this, file], $element, busyEvent.uploadFileDequeued);
                })

                // 当 uploader 被重置的时候触发
                .on('reset', function () {
                    helper.execCallback(opt.reset, element, [this], $element, busyEvent.uploadReset);
                })

                // 当开始上传流程时触发
                .on('startUpload', function () {
                    helper.execCallback(opt.begin, element, [this], $element, busyEvent.uploadBegin);
                })

                // 当开始上传流程暂停时触发
                .on('stopUpload', function () {
                    helper.execCallback(opt.stop, element, [this], $element, busyEvent.uploadStop);
                })

                // 当所有文件上传结束时触发
                .on('uploadFinished', function () {
                    helper.execCallback(opt.finished, element, [this], $element, busyEvent.uploadFinished);
                })

                // 文件加入列队后触发
                .on('uploadStart', function (file) {
                    helper.execCallback(opt.start, element, [this, file], $element, busyEvent.uploadStart);
                })

                // 上传过程中触发，上传进度
                .on('uploadProgress', function (file, percentage, type) {
                    // 上传进度占整个进度的80%
                    if (type !== 'hash') {
                        percentage = 0.05 + percentage * 0.95;
                    }
                    helper.execCallback(opt.progress, element, [this, file, percentage, type], $element, busyEvent.uploadProgress);
                })

                // 上传完成触发
                .on('uploadComplete', function (file) {
                    helper.execCallback(opt.complete, element, [this, file], $element, busyEvent.uploadComplete);
                })

                // 上传失败触发
                .on('uploadError', function (file, reason) {
                    helper.execCallback(opt.error, element, [this, file, me._parseServerError(reason)], $element, busyEvent.uploadError);
                })

                // 上传成功
                .on('uploadSuccess', function (file, response) {
                    var res = file.prepareResult || response._result;
                    helper.execCallback(opt.success, element, [this, file, res], $element, busyEvent.uploadSuccess);
                    me._triggerResult(res, true);
                });
        },

        _updateSelectBtn : function () {
            var me  = this;
            var opt = this.options;
            if (!me.$selectBtn || !me.$selectBtn.length) {
                return;
            }

            if (!me.$selectBtn.data('init-click')) {
                me.$selectBtn.data('init-click', true).off('click').on('click', function () {
                    $(this).busyAdminFilePicker({
                        classType  : opt.classType,
                        classValue : opt.classValue,
                        title      : busyAdmin.helper.sprintf(opt.locale.selectFile, me.fileConfig.name),
                        multiple   : me.multiple,
                        count      : me.multiple ? 0 : 1,
                        extensions : me.fileConfig.suffix,
                        success    : function (files) {
                            typeof me.module.setSelectFiles === 'function' && me.module.setSelectFiles(files);
                        }
                    });
                });
            }

            if (opt.type == 'use') {
                return;
            }

            if (!me.$selectBtn.data('init-icon')) {
                me.$selectBtn.data('init-icon', true).addClass(opt.selectClass).append(me.$selectIcon).append(' ');
            }
            if (!me.$selectBtn.data('init-name') && opt.type !== 'card') {
                me.$selectBtn.data('init-name', true).append(me.$selectName);
            }

            if (opt.select) {
                me.$selectBtn.removeClass('hide').parent().removeClass('no-select');
            } else {
                me.$selectBtn.addClass('hide').parent().addClass('no-select');
            }

            if (opt.selectIcon) {
                me.$selectIcon.removeAttr('class').addClass(opt.selectIcon);
            } else {
                me.$selectIcon.addClass('hide');
            }

            if (opt.selectName) {
                me.$selectName.removeAttr('class').html(opt.selectName);
            } else {
                me.$selectName.addClass('hide');
            }
        },

        _updateUploadBtn : function () {
            var me      = this;
            var options = this.options;
            if (options.type == 'use' || !me.$uploadBtn || !me.$uploadBtn.length) {
                return;
            }

            if (!me.$uploadBtn.data('init-icon')) {
                me.$uploadBtn.data('init-icon', true).addClass(me.options.uploadClass).append(me.$uploadIcon).append(' ');
            }
            if (!me.$uploadBtn.data('init-name') && options.type !== 'card') {
                me.$uploadBtn.data('init-name', true).append(me.$uploadName);
            }


            if (options.upload) {
                me.$uploadBtn.removeClass('hide').parent().removeClass('no-upload');
            } else {
                me.$uploadBtn.addClass('hide').parent().addClass('no-upload');
            }

            if (options.uploadIcon) {
                me.$uploadIcon.removeAttr('class').addClass(options.uploadIcon);
            } else {
                me.$uploadIcon.addClass('hide');
            }

            if (options.uploadName) {
                me.$uploadName.removeAttr('class').html(options.uploadName);
            } else {
                me.$uploadName.addClass('hide');
            }

            if (me.uploader) {
                me.uploader.refresh();
            }
        },

        showUpload : function (show) {
            this.options.upload = show;
            this._updateUploadBtn();
        },

        setUploadName : function (name) {
            this.options.uploadName = name;
            this._updateUploadBtn();
        },

        setUploadIcon : function (icon) {
            this.options.uploadIcon = icon;
            this._updateUploadBtn();
        },

        showSelect : function (show) {
            this.options.select = show;
            this._updateSelectBtn();
        },

        setSelectName : function (name) {
            this.options.selectName = name;
            this._updateSelectBtn();
        },

        setSelectIcon : function (icon) {
            this.options.selectIcon = icon;
            this._updateSelectBtn();
        },

        /**
         * 解析文件验证错误
         * @param {string} code
         * @return {string}
         */
        _parseCodeError : function (code) {
            var local = this.options.locale;
            var opt   = this.uploader.options;

            switch (code) {
                case 'Q_EXCEED_NUM_LIMIT' :
                    code = busyAdmin.helper.sprintf(local.uploadExceedNumLimit, opt.fileNumLimit);
                    break;
                case 'Q_EXCEED_SIZE_LIMIT' :
                    code = busyAdmin.helper.sprintf(local.uploadExceedSizeLimit, this.formatSize(opt.fileSizeLimit));
                    break;
                case 'Q_TYPE_DENIED' :
                    var accept     = opt.accept[0] || {};
                    var extensions = accept.extensions || '';
                    if (extensions) {
                        code = busyAdmin.helper.sprintf(local.uploadTypeDeniedDetail, extensions);
                    } else {
                        code = local.uploadTypeDenied;
                    }
                    break;
                case 'F_EXCEED_SIZE' :
                case 'exceed_size' :
                    code = busyAdmin.helper.sprintf(local.uploadExceedSize, this.formatSize(opt.fileSingleSizeLimit));
                    break;
                case 'F_DUPLICATE' :
                    code = local.uploadDuplicate;
                    break;
                default:
                    code = local.unknownError + ': ' + code;
            }

            return code;
        },

        /**
         * 格式化字节
         * @param {Number} size
         * @return {String}
         */
        formatSize : function (size) {
            return WebUploader.Base.formatSize(size, 1, ['B', 'KB', 'MB', 'GB', 'TB']);
        },

        /**
         * 解析HTTP错误
         * @param {string} reason
         * @return {string}
         */
        _parseServerError : function (reason) {
            var local = this.options.locale;
            switch (reason) {
                case 'server':
                    reason = local.serverError;
                    break;
                case 'http' :
                    reason = local.httpError;
                    break;
                case 'abort' :
                    reason = local.httpAbort;
                    break;
                case 'timeout' :
                    reason = local.httpTimeout;
                    break;
            }

            return reason;
        },

        /**
         * 启用/禁用按钮
         * @param status
         */
        _changeDisabled : function (status) {
            var me       = this;
            var uploader = me.uploader;
            if (status) {
                if (uploader) {
                    uploader.disable();
                }
                if (me.$selectBtn) {
                    me.$selectBtn.addClass('disabled').prop('disabled', true);
                }
                if (me.$uploadBtn) {
                    me.$uploadBtn.addClass('disabled').prop('disabled', true);
                }
            } else {
                if (uploader) {
                    uploader.enable();
                }
                if (me.$selectBtn) {
                    me.$selectBtn.removeClass('disabled').prop('disabled', false);
                }
                if (me.$uploadBtn) {
                    me.$uploadBtn.removeClass('disabled').prop('disabled', false);
                }
            }
        },

        /**
         * 预览处理
         */
        _previewHandler : function (url, image, video, audio, file) {
            var me = this;
            busyAdmin.helper.urlPreviewHandler({
                url   : url,
                image : image,
                video : video,
                audio : audio,
                file  : function () {
                    switch (me.fileConfig.type) {
                        case 'image':
                            typeof image === 'function' && image();
                            break;
                        case 'video':
                            typeof video === 'function' && video();
                            break;
                        case 'audio':
                            typeof audio === 'function' && audio();
                            break;
                        default:
                            typeof file === 'function' && file();
                    }
                }
            })
        },

        /**
         * 触发结果事件
         * @param {Object} response
         * @param {Boolean} isUpload
         */
        _triggerResult : function (response, isUpload) {
            var file = null;
            if (response) {
                if (isUpload) {
                    file = {
                        id        : response.file_id,
                        url       : response.file_url,
                        size      : response.size || 0,
                        name      : response.name,
                        extension : response.extension
                    }
                } else {
                    file = {
                        id        : response.id,
                        url       : response.url,
                        size      : response.size,
                        name      : response.name,
                        extension : response.extension
                    }
                }
            }

            busyAdmin.helper.execCallback(this.options.result, this.$element[0], [file], this.$element, busyAdmin.e.uploadResult);
        },

        _triggerChange(val) {
            busyAdmin.helper.execCallback(this.options.change, this.$element[0], [val], this.$element, busyAdmin.e.uploadChange);
            this.options.value = val;
        },

        /**
         * 销毁
         */
        destroy : function () {
            var me = this;
            if (!me.isInit) {
                return;
            }

            me.isInit = false;
            me.uploader.destroy();
            me.module.destroy();
        }
    };

    /**
     * 分片获取md5值
     * @param {File} file 文件对象
     * @param {?Number} chunkSize 分片大小
     * @returns
     */
    Upload.md5File = function (file, chunkSize) {
        chunkSize     = chunkSize || file.size;
        var deferred  = WebUploader.Deferred();
        var blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;
        if (!blobSlice) {
            deferred.reject();
            return deferred.promise();
        }

        var chunks         = Math.ceil(file.size / chunkSize);
        var currentChunk   = 0;
        var spark          = new SparkMD5.ArrayBuffer();
        var fileReader     = new FileReader();
        fileReader.onerror = function (e) {
            deferred.reject(e);
        };
        fileReader.onload  = function (e) {
            spark.append(e.target.result)
            currentChunk++;
            deferred.notify(currentChunk / chunks);
            if (currentChunk < chunks) {
                loadNext();
            } else {
                deferred.resolve(spark.end());
            }
        };

        function loadNext() {
            let start = currentChunk * chunkSize;
            let end   = start + chunkSize >= file.size ? file.size : start + chunkSize;
            fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));
        }

        loadNext();

        return deferred.promise();
    };

    /**
     * 卡片上传模板
     * @type {string}
     */
    Upload.CARD_TEMPLATE = '<div class="busy-admin-upload-card">\
        <div class="upload-container">\
            <div class="block" data-upload-id="block"></div>\
            <div class="upload-btn" data-upload-id="upload-btn2"><i data-upload-id="icon"></i><span data-upload-id="placeholder"></span><span data-upload-id="desc"></span></div>\
            <div class="preview" data-upload-id="preview"></div>\
            <div class="pending" data-upload-id="progress"><div><i class="busy-admin-pending-icon"></i><span data-upload-id="speed"></span></div></div>\
            <div class="toolbar" data-upload-id="toolbar">\
                <div class="tool-upload" data-upload-id="upload-btn"><i class="fa fa-cloud-upload"></i></div>\
                <div class="tool-select" data-upload-id="select-btn"></div>\
                <div class="tool-remove" data-upload-id="remove-btn"><i class="fa fa-remove"></i></div>\
            </div>\
        </div>\
    </div>';

    /**
     * 单文件上传模板
     * @type {string}
     */
    Upload.SINGLE_TEMPLATE = '<div class="busy-admin-upload-single">\
        <div class="input-group" data-upload-id="input-group">\
            <i data-upload-id="input"></i>\
            <div class="input-group-btn">\
                <button class="btn" data-upload-id="upload-btn" type="button"></button>\
                <button class="btn" data-upload-id="select-btn" type="button"></button>\
            </div>\
        </div>\
        <div class="upload-wait" style="display: none" data-upload-id="wait">\
            <div class="media" data-upload-id="item">\
                <a class="close" data-upload-id="close">&times;</a>\
                <div class="media-left" data-upload-id="thumb-box">\
                    <img class="media-object" src="" data-upload-id="thumb-img"/>\
                </div>\
                <div class="media-body">\
                    <div class="media-heading size-13 text-bold" data-upload-id="title"></div>\
                    <div class="progress">\
                        <div class="progress-bar progress-bar-success progress-bar-striped active" data-upload-id="progress" style="width: 0%">\
                            <span class="progress-number" data-upload-id="speed">0%</span>\
                        </div>\
                    </div>\
                    <div class="media-foot size-12 clearfix">\
                        <div class="pull-right" data-upload-id="file-size"></div>\
                        <div class="pull-left" data-upload-id="status"></div>\
                    </div>\
                    <div class="media-toolbar clearfix" data-upload-id="toolbar">\
                        <button class="btn btn-success btn-sm pull-right" data-upload-id="operate-btn"></button>\
                    </div>\
                </div>\
            </div>\
        </div>\
        <div class="clearfix"></div>\
        <div class="upload-preview" style="display: none;" data-upload-id="preview"></div>\
    </div>';

    /**
     * 多文件上传模板
     * @type {string}
     */
    Upload.FILES_TEMPLATE = '<div class="busy-admin-upload-files">\
        <div class="panel panel-default no-margin-bottom">\
            <div class="panel-heading">\
                <button class="btn btn-sm" data-upload-id="upload-btn" type="button"></button>\
                <button class="btn btn-sm" data-upload-id="select-btn" type="button"></button>\
            </div>\
            <div class="table-responsive file-queue-list" data-upload-id="file-queue-container">\
                <table class="table table-hover table-bordered table-striped">\
                    <thead>\
                        <tr>\
                            <th class="text-center size-12" data-upload-id="locale-filename"></th>\
                            <th class="text-center size-12" data-upload-id="locale-fileSize" width="80"></th>\
                            <th class="text-center size-12" data-upload-id="locale-progress" width="150"></th>\
                            <th class="text-center size-12" data-upload-id="locale-operate" width="100"></th>\
                        </tr>\
                    </thead>\
                    <tfoot data-upload-id="toolbar">\
                        <tr>\
                            <td colspan="4">\
                                <button class="btn btn-sm btn-success pull-right" data-upload-id="operate-btn"></button>\
                                <div class="text-gray size-12" data-upload-id="tip"></div>\
                            </td>\
                        </tr>\
                    </tfoot>\
                    <tbody data-upload-id="queue-list"></tbody>\
                </table>\
            </div>\
            <div class="table-responsive image-queue-list" data-upload-id="image-queue-container">\
                <table class="table table-hover table-bordered table-striped">\
                    <tfoot data-upload-id="toolbar">\
                        <tr>\
                            <td colspan="4">\
                                <button class="btn btn-sm btn-success pull-right" data-upload-id="operate-btn"></button>\
                                <div class="text-gray size-12" data-upload-id="tip"></div>\
                            </td>\
                        </tr>\
                    </tfoot>\
                    <tbody><tr><td data-upload-id="queue-list"></td></tr></tbody>\
                </table>\
            </div>\
            <div class="table-responsive file-result-list" data-upload-id="file-result-container">\
                <table class="table table-hover table-bordered table-striped">\
                    <tbody data-upload-id="result-list"></tbody>\
                </table>\
            </div>\
            <div class="table-responsive image-result-list" data-upload-id="image-result-container">\
                <table class="table table-hover table-bordered table-striped">\
                    <tbody><tr><td data-upload-id="result-list"></td></tr></tbody>\
                </table>\
            </div>\
        </div>\
    </div>';

    /**
     * 待上传文件区域为空提示
     * @type {string}
     */
    Upload.FILES_TEMPLATE_FILE_QUEUE_EMPTY = '<tr>\
        <td class="text-center empty" colspan="4">\
            <div data-upload-id="message" class="text-gray"></div>\
            <div data-upload-id="desc" class="text-gray"></div>\
        </td>\
    </tr>';

    /**
     * 待上传的文件Item模板
     * @type {string}
     */
    Upload.FILES_TEMPLATE_FILE_QUEUE_ITEM = '<tr>\
        <td data-upload-id="name" class="text-vcenter text-left text-bold"></td>\
        <td data-upload-id="size" class="text-vcenter text-center text-gray"></td>\
        <td class="text-vcenter text-center">\
            <div class="progress no-margin height-10" data-upload-id="progress-bar">\
                <div class="progress-bar progress-bar-success progress-bar-striped active" data-upload-id="progress" style="width: 0%"></div>\
            </div>\
            <div class="status" data-upload-id="status"></div>\
        </td>\
        <td class="text-center text-vcenter">\
            <a class="btn btn-danger btn-xs" data-upload-id="delete"><i class="fa fa-trash"></i></a>\
        </td>\
    </tr>';

    /**
     * 上传成功的文件Item模板
     * @type {string}
     */
    Upload.FILES_TEMPLATE_FILE_RESULT_ITEM = '<tr>\
        <td data-upload-id="content" class="text-vcenter">\
            <a href="javascript:void(0)" class="name" data-upload-id="name"></a>\
            <code data-upload-id="size"></code>\
        </td>\
        <td class="text-center" width="100">\
            <a class="btn btn-default btn-xs" data-upload-id="preview"><i class="fa fa-search-plus"></i></a>\
            <a class="btn btn-success btn-xs" data-upload-id="replace"><i class="fa fa-folder-open"></i></a>\
            <a class="btn btn-danger btn-xs" data-upload-id="delete"><i class="fa fa-trash"></i></a>\
        </td>\
    </tr>';

    /**
     * 待上传的图片区域为空提示
     * @type {string}
     */
    Upload.FILES_TEMPLATE_IMAGE_QUEUE_EMPTY = '<div class="text-center empty">\
         <div data-upload-id="message" class="text-gray"></div>\
        <div data-upload-id="desc" class="text-gray"></div>\
    </div>';

    /**
     * 待上传的图片Item模板
     * @type {string}
     */
    Upload.FILES_TEMPLATE_IMAGE_QUEUE_ITEM = '<div class="item">\
        <div>\
            <div class="name" data-upload-id="name"></div>\
            <div class="thumb"><img data-upload-id="thumb"/></div>\
            <div class="item-content">\
                <div class="toolbar" data-upload-id="toolbar">\
                    <a href="javascript:void(0)" class="fa fa-trash" data-upload-id="delete"></a>\
                </div>\
                <div class="progress no-margin" data-upload-id="progress-bar">\
                    <div class="progress-bar progress-bar-success progress-bar-striped active" data-upload-id="progress" style="width: 0%"></div>\
                </div>\
                <div class="status" data-upload-id="status"></div>\
            </div>\
        </div>\
    </div>';

    /**
     * 上传成功的图片Item模板
     * @type {string}
     */
    Upload.FILES_TEMPLATE_IMAGE_RESULT_ITEM = '<div class="item">\
        <div>\
            <div class="thumb"><img src="" data-upload-id="thumb"/></div>\
            <div class="item-content">\
                <div class="toolbar" data-upload-id="toolbar">\
                    <a href="javascript:void(0)" class="fa fa-search-plus" data-upload-id="preview"></a>\
                    <a href="javascript:void(0)" class="fa fa-folder-open" data-upload-id="replace"></a>\
                    <a href="javascript:void(0)" class="fa fa-trash" data-upload-id="delete"></a>\
                </div>\
                <a href="javascript:void(0)" class="fa fa-edit name" data-upload-id="name"></a>\
            </div>\
        </div>\
    </div>';

    Upload.DEFAULTS = {
        // 基本
        type           : 'single',
        name           : '',
        classType      : '',
        classValue     : '',
        value          : '',
        dnd            : false,
        paste          : false,
        pasteContainer : document.body,
        chunked        : false,
        chunkSize      : 5242880,
        threads        : 3,
        duplicate      : false,
        className      : '',
        placeholder    : '',
        auto           : true,
        disabled       : false,

        // 服务相关
        disk       : unf,
        server     : true,
        fileVal    : 'file',
        method     : 'post',
        binary     : false,
        credential : false,
        params     : {},
        headers    : {},

        // 限制类型
        allowExtensions : unf,
        allowMimetypes  : unf,
        allowTitle      : unf,

        // 文件库
        select      : true,
        selectName  : '',
        selectIcon  : 'fa fa-folder-open',
        selectClass : 'btn-default',

        // 本地上传
        upload      : true,
        uploadName  : '',
        uploadIcon  : 'fa fa-cloud-upload',
        uploadClass : 'btn-primary',

        // 压缩
        compress        : false,
        compressWidth   : 1600,
        compressHeight  : 1600,
        compressQuality : 90,
        compressZoom    : false,
        compressCrop    : false,
        compressMeta    : true,
        compressLarger  : false,
        compressSize    : 0,

        objectFit : '',

        // 单文件上传
        singleInput       : true,
        singlePreview     : true,
        singlePreviewSize : '',
        singleSize        : '',

        // 多文件上传
        filesEditFilename : true, // 是否允许编辑文件名
        filesUi           : 'all', // UI模式
        filesImageWidth   : null, // 图片宽度

        // 卡片上传
        cardType : '',
        cardIcon : 'fa fa-cloud-upload',

        // 自定义上传
        useSelect   : '', // 系统库按钮选择器
        useDnd      : '', // 拖住选择器
        useProgress : false, // 是否自定义上传进度UI
        useError    : false, // 是否自定义错误提示UI

        // 大小数量
        maxSize       : unf,
        maxSingleSize : unf,
        maxTotal      : unf,

        // 事件
        result       : unf,
        fileError    : unf,
        fileQueued   : unf,
        filesQueued  : unf,
        fileDequeued : unf,
        reset        : unf,
        begin        : unf,
        stop         : unf,
        finished     : unf,
        start        : unf,
        progress     : unf,
        complete     : unf,
        error        : unf,
        success      : unf,

        resultAccept        : unf,
        beforeSend          : unf,
        asyncInit           : unf,
        asyncBeforeSendFile : unf,
        asyncBeforeSend     : unf,
        asyncAfterSendFile  : unf,

        // 语言
        locale : $.extend({
            uploadFile           : '上传%s',
            selectFile           : '选择%s',
            replaceFile          : '替换%s',
            pleaseUploadOrSelect : '请上传或选择%s',
            uploadSuccess        : '上传成功',
            uploadLoading        : '上传中...',
            uploadWait           : '等待上传',
            uploadCanceled       : '已取消上传',
            file                 : '文件',
            filename             : '文件名',
            fileSize             : '文件大小',
            progress             : '进度',
            operate              : '操作',
            uploadStart          : '开始上传',
            uploadPause          : '暂停上传',
            uploadContinue       : '继续上传',
            uploadPaused         : '暂停中',

            preview             : '预览',
            replace             : '替换',
            delete              : '删除',
            modifyFileName      : '修改文件名',
            pleaseInputFileName : '请输入文件名',
            confirmDeleteThat   : '确认要删除%s吗？',

            uploadExceedSizeLimit  : '所有文件总大小超过%s',
            uploadTypeDenied       : '请选择有效的文件',
            uploadTypeDeniedDetail : '仅支持格式为%s的文件',
            uploadExceedSize       : '文件大小超过%s',
            uploadDuplicate        : '选择的文件重复',
            uploadExceedNumLimit   : '单次最多允许选择%s个文件',
            unknownError           : '未知错误',

            serverError : '服务器错误',
            httpError   : 'HTTP请求错误',
            httpTimeout : '请求超时',
            httpAbort   : '请求被中断',


            uploadTipSelected : '共%s个文件，合计%s',
            uploadTipSuccess  : '共%s个文件，已上传%s个文件',
            uploadTipComplete : '共%s个文件，已上传%s个，失败%s个',
        }, ((busyAdmin.locale || {}).plugin || {}).upload || {})
    };

    /**
     * 默认单文件上传
     * @param {Upload} api
     * @constructor
     */
    var SingleUpload = function (api) {
        this.isInit    = false;
        this.api       = api;
        this.$template = null;
        this.$input    = null;
        this.init();
    };

    SingleUpload.prototype = {
        /**
         * 初始化
         */
        init : function () {
            var me     = this;
            var api    = me.api;
            var apiOpt = api.options;
            if (me.isInit) {
                return;
            }
            me.isInit    = true;
            me.$template = $(Upload.SINGLE_TEMPLATE).addClass(apiOpt.className);

            var $i = getId(me.$template, 'input');

            // 输入框
            if (api.isInput) {
                me.$input = api.$element;
                api.$element.after(me.$template);
            }

            // 普通容器
            else {
                me.$input = $('<input type="text"/>');
                api.$element.html(me.$template);
            }


            me.$input.val(apiOpt.value).attr('name', apiOpt.name || '').addClass('form-control');
            me.setPlaceholder(apiOpt.placeholder);
            $i.after(me.$input);
            $i.remove();


            me.$inputGroup = getId(me.$template, 'input-group');
            me.$uploadBtn  = getId(me.$template, 'upload-btn');
            me.$selectBtn  = getId(me.$template, 'select-btn');
            me.$wait       = getId(me.$template, 'wait');
            me.$close      = getId(me.$template, 'close');
            me.$item       = getId(me.$template, 'item');
            me.$thumbBox   = getId(me.$template, 'thumb-box');
            me.$thumbImg   = getId(me.$template, 'thumb-img');
            me.$title      = getId(me.$template, 'title');
            me.$progress   = getId(me.$template, 'progress');
            me.$speed      = getId(me.$template, 'speed');
            me.$fileSize   = getId(me.$template, 'file-size');
            me.$status     = getId(me.$template, 'status');
            me.$preview    = getId(me.$template, 'preview');
            me.$toolbar    = getId(me.$template, 'toolbar');
            me.$operateBtn = getId(me.$template, 'operate-btn').html(apiOpt.locale.uploadStart);
            me.closeTimer  = null;

            // 尺寸
            if (apiOpt.singleSize) {
                me.setSize(apiOpt.singleSize);
            }

            // 不显示输入框
            if (!apiOpt.singleInput) {
                me.showInput(false);
            }

            // 开始上传按钮绑定
            me.$operateBtn.on('click', function () {
                if ($(this).hasClass('disabled')) {
                    return;
                }

                me.setOperateDisabled(true);
                api.uploader.upload();
            });

            // 初始化
            api._initUploader(me.$uploadBtn, me.$template, me.$selectBtn, false);

            api.$element
                // 文件校验失败触发
                .on(busyAdmin.e.uploadFileError, function (e, uploader, file, code) {
                    uploader.reset();
                    busyAdmin.dialog.tipError(code);
                })

                // 重置时触发
                .on(busyAdmin.e.uploadReset, function () {
                    me.setDisabled(false);
                })

                // 加入列队触发
                .on(busyAdmin.e.uploadFileQueued, function (e, uploader, file) {
                    // 生成缩略图
                    me.$thumbImg.attr('src', '');
                    uploader.makeThumb(file, function (error, src) {
                        if (error) {
                            me.$thumbBox.hide();
                        } else {
                            me.$thumbImg.attr('src', src);
                            me.$thumbBox.show();
                        }
                    }, 60, 60);

                    // 取消上传
                    me.$close.show().off('click').on('click', function () {
                        uploader.removeFile(file, true);
                    });

                    me.$title.html(file.name);
                    me.$speed.html('0%');
                    me.$fileSize.html(api.formatSize(file.size))
                    me.$progress.removeClass('progress-bar-danger').addClass('progress-bar-success').css('width', '0%');
                    me.setStatus(apiOpt.locale.uploadWait, 'gray', true, false);
                    me.setOperateDisabled(false);
                    apiOpt.auto ? me.$toolbar.hide() : me.$toolbar.show();
                    me.$wait.show();
                })

                // 列队被移除触发
                .on(busyAdmin.e.uploadFileDequeued, function (e, uploader) {
                    uploader.reset();
                    me.setStatus(apiOpt.locale.uploadCanceled, 'gray', false);
                    me.setOperateDisabled(true);
                })


                // 上传过程中触发，上传进度
                .on(busyAdmin.e.uploadProgress, function (e, uploader, file, percentage) {
                    var speed = ((percentage * 100).toFixed(2)) + '%';
                    me.$progress.css('width', speed);
                    me.$speed.text(speed);
                    me.setStatus(apiOpt.locale.uploadLoading, 'gray', true, false)
                })

                // 上传完成触发
                .on(busyAdmin.e.uploadComplete, function (e, uploader) {
                    uploader.reset();
                })

                // 上传失败触发
                .on(busyAdmin.e.uploadError, function (e, uploader, file, reason) {
                    me.setStatus(api._parseServerError(reason), 'danger', false);
                })

                // 上传成功触发
                .on(busyAdmin.e.uploadSuccess, function (e, uploader, file, response) {
                    me.setStatus(apiOpt.locale.uploadSuccess, 'success', true);
                    me.setValue(response.file_url);
                });

            // 加入列队前触发
            api.uploader.on('beforeFileQueued', function (file) {
                me.setDisabled(true);
                return true;
            });

            // 预览
            me.inputTimer = null;
            me.$input.off('input').on('input', function (e) {
                var val = me.$input.val();
                api._triggerChange(val);

                clearTimeout(me.inputTimer);
                if (e.mustPreview) {
                    me.showPreview(val);
                } else {
                    me.inputTimer = setTimeout(function () {
                        me.showPreview(val);
                    }, 500);
                }
            }).trigger($.Event('input', {mustPreview : true}));

            me.$input.on(busyAdmin.e.verifyErrorPlacement, function (e, error) {
                me.$template.after(error);

                return false;
            });

            me.setDisabled(apiOpt.disabled);
        },

        setValue : function (value) {
            this.api.options.value = value;
            this.$input.val(value).trigger($.Event('input', {mustPreview : true})).busyAdminEventInput(true, false);
        },

        showInput : function (show) {
            if (!show) {
                this.$template.addClass('no-input');
                this.$input.hide();
            } else {
                this.$template.removeClass('no-input');
                this.$input.show();
            }
        },

        setSize : function (size) {
            if (size) {
                this.setSize('');
                this.$inputGroup.addClass('input-group-' + size);
            } else {
                this.$inputGroup.removeClass('input-group-xs input-group-sm input-group-lg');
            }

            if (this.api.uploader) {
                this.api.uploader.refresh();
            }
        },

        setPlaceholder : function (placeholder) {
            this.$input.attr('placeholder', placeholder);
        },

        /**
         * 设置选中的文件
         * @param files
         */
        setSelectFiles : function (files) {
            files = files || [];
            if (files.length <= 0) {
                return;
            }

            var file = files[0];
            this.setValue(file.url);
            this.api._triggerResult(file, false);
        },

        setPreview : function (status) {
            this.api.options.singlePreview = status;
            this.showPreview(this.api.options.value);
        },

        setPreviewSize : function (size) {
            this.api.options.singlePreviewSize = size;
            this.showPreview(this.api.options.value);
        },

        /**
         * 显示预览
         */
        showPreview : function (url) {
            var me  = this;
            var api = me.api;

            url = (url || '').trim();
            if (url.length === 0 || !api.options.singlePreview) {
                me.$preview.empty().hide();
                return;
            }

            var size = api.options.singlePreviewSize || '';
            var width, height, $prevElement;
            if (!$.isArray(size)) {
                size = size.split(',');
            }
            width  = size[0] || '';
            height = size[1] || '';
            if (width && $.isNumeric(width) && width > 0) {
                width += 'px';
            }
            if (height && $.isNumeric(height) && width > 0) {
                height += 'px';
            }

            me.$delete = $('<a class="trash">&times;</a>');
            me.$delete.on('click', function () {
                me.$input.val('').trigger($.Event('input', {mustPreview : true})).busyAdminEventInput(true, false);
                me.api._triggerResult(null);
            });

            me.$preview.removeClass('upload-preview-image upload-preview-video upload-preview-audio upload-preview-file');
            api._previewHandler(url, function () {
                me.$preview.addClass('upload-preview-image').html(($prevElement = $('<img src="' + url + '" class="img-thumbnail cursor-zoom-in" data-title="false"/>')));
                if (width) {
                    $prevElement.width(width);
                } else {
                    $prevElement.width(100);
                }
                if (height) {
                    $prevElement.height(height);
                }
                $prevElement.css('object-fit', api.options.objectFit);
                $prevElement.busyAdminImageViewer();
                me.$preview.append(me.$delete);
                me.$preview.show();
            }, function () {
                me.$preview.addClass('upload-preview-video').html(($prevElement = $('<video><source src="' + url + '"/></video>')));
                if (width) {
                    $prevElement.width(width);
                } else {
                    $prevElement.width(100);
                }
                if (height) {
                    $prevElement.height(height);
                } else {
                    $prevElement.height(100);
                }
                $prevElement.css('object-fit', api.options.objectFit)
                $prevElement.busyAdminVideoViewer();
                me.$preview.append(me.$delete);
                me.$preview.show();
            }, function () {
                me.$preview.addClass('upload-preview-audio').html(($prevElement = $('<audio src="' + url + '" preload="auto"></audio>')));
                $prevElement.busyAdminAudio();
                me.$preview.append(me.$delete);
                me.$preview.show();
            }, function () {
                var urls = busyAdmin.helper.parseURL(url);
                me.$preview.addClass('upload-preview-file').html(($prevElement = $('<div class="text-line-1"><i class="fa fa-file-o"></i><a href="' + url + '" target="_blank">' + urls.filename + '</a></div>')));
                $prevElement.append(me.$delete);
                me.$preview.show();
            });

        },

        /**
         * 设置上传状态
         * @param {string} message 状态消息
         * @param {string} className css类名
         * @param {boolean} status 是否上传成功
         * @param {boolean} close 是否可以自动关闭
         */
        setStatus : function (message, className, status, close) {
            var me = this;
            clearTimeout(me.closeTimer);
            me.$status.html('<span class="text-' + className + '">' + message + '</span>');

            var timeout;
            if (!status) {
                me.$progress.removeClass('progress-bar-success').addClass('progress-bar-danger');
                timeout = 3000;
            } else {
                timeout = 1500;
            }

            close = close === unf ? true : close;
            if (close) {
                me.$close.hide();
                me.closeTimer = setTimeout(function () {
                    me.$wait.fadeOut();
                }, timeout);
            } else {
                me.$close.show();
            }
        },

        /**
         * 启用/禁用按钮
         * @param status
         */
        setDisabled : function (status) {
            var me = this;
            me.api._changeDisabled(status);
            me.$input.prop('readonly', status);
            me.$preview.toggleClass('disabled', status);
        },

        /**
         * 设置上传按钮状态
         * @param {Boolean} status
         */
        setOperateDisabled : function (status) {
            if (status) {
                this.$operateBtn.prop('disabled', true).removeClass('btn-success').addClass('disabled btn-default');
            } else {
                this.$operateBtn.prop('disabled', false).removeClass('disabled btn-default').addClass('btn-success');
            }
        },

        /**
         * 销毁
         */
        destroy : function () {
            var me = this;
            if (me.api.$element[0].tagName === 'INPUT') {
                me.$template.before(me.api.$element);
                me.$template.remove();
            } else {
                me.api.$element.empty();
            }

            me.isInit = false;
        }
    }

    /**
     * 多文件上传
     * @param {Upload} api
     * @constructor
     */
    var FilesUpload = function (api) {
        this.api                 = api;
        this.uploadInProgress    = false;
        this.fileTotal           = 0;
        this.fileSize            = 0;
        this.successIndex        = 0;
        this.successList         = {};
        this.sortable            = null;
        this.addSuccessFileTimer = null;
        this.init();
    }

    FilesUpload.prototype = {
        init : function () {
            var me     = this;
            var api    = me.api;
            var apiOpt = api.options;

            me.$template             = $(Upload.FILES_TEMPLATE).addClass(apiOpt.className);
            me.$uploadBtn            = getId(me.$template, 'upload-btn').addClass(apiOpt.uploadClass);
            me.$selectBtn            = getId(me.$template, 'select-btn').addClass(apiOpt.selectClass);
            me.$fileQueueContainer   = getId(me.$template, 'file-queue-container').hide();
            me.$fileResultContainer  = getId(me.$template, 'file-result-container').hide();
            me.$imageQueueContainer  = getId(me.$template, 'image-queue-container').hide();
            me.$imageResultContainer = getId(me.$template, 'image-result-container').hide();
            me.$queueContainer       = null;
            me.$resultContainer      = null;

            // 图片
            if (api.fileConfig.type === 'image') {
                me.$waitEmpty       = $(Upload.FILES_TEMPLATE_IMAGE_QUEUE_EMPTY);
                me.$queueContainer  = me.$imageQueueContainer.show();
                me.$resultContainer = me.$imageResultContainer;
            }

            // 文件/视频
            else {
                me.$waitEmpty       = $(Upload.FILES_TEMPLATE_FILE_QUEUE_EMPTY);
                me.$queueContainer  = me.$fileQueueContainer.show();
                me.$resultContainer = me.$fileResultContainer;

                // 语言
                getId(me.$template, 'locale-filename').html(apiOpt.locale.filename);
                getId(me.$template, 'locale-fileSize').html(apiOpt.locale.fileSize);
                getId(me.$template, 'locale-progress').html(apiOpt.locale.progress);
                getId(me.$template, 'locale-operate').html(apiOpt.locale.operate);
            }

            me.$queueList   = getId(me.$queueContainer, 'queue-list').addClass('no-list');
            me.$toolbar     = getId(me.$queueContainer, 'toolbar');
            me.$operateBtn  = getId(me.$queueContainer, 'operate-btn').html(apiOpt.locale.uploadStart);
            me.$tip         = getId(me.$queueContainer, 'tip');
            me.$resultList  = getId(me.$resultContainer, 'result-list').addClass('no-list');
            me.$waitMessage = getId(me.$waitEmpty, 'message');

            if (api.isInput) {
                me.$input = api.$element;
                api.$element.after(me.$template);
            } else {
                me.$input = $('<input type="text" name="' + apiOpt.name + '"/>');
                api.$element.html(me.$template).append(me.$input);
            }
            me.$input.addClass('input-hidden');


            // 自动上传则隐藏按钮
            if (apiOpt.auto) {
                me.$toolbar.hide();
            }

            // 初始化上传按钮
            api._initUploader(me.$uploadBtn, me.$template, me.$selectBtn, true);

            // 开始上传按钮绑定
            me.setOperateDisabled(true);
            me.$operateBtn.on('click', function () {
                if ($(this).hasClass('disabled')) {
                    return;
                }

                if (me.uploadInProgress) {
                    me.uploadInProgress = false;
                    api.uploader.stop();
                } else {
                    me.uploadInProgress = true;
                    api.uploader.upload();
                }
            });

            api.$element

                // 文件校验失败触发
                .on(busyAdmin.e.uploadFileError, function (e, uploader, file, code) {
                    if (file) {
                        me.addFile(file);
                        me.setFileStatus(file, code, 'danger', false, false, true);
                    } else {
                        busyAdmin.dialog.tipError(code);
                    }
                })

                // 重置时触发
                .on(busyAdmin.e.uploadReset, function () {
                    me.setDisabled(false);
                    me.uploadInProgress = false;
                    me.$operateBtn.html(apiOpt.locale.uploadStart);
                    me.setOperateDisabled(true);
                    me.setTip(true);
                })

                // 加入列队触发
                .on(busyAdmin.e.uploadFileQueued, function (e, uploader, file) {
                    me.fileSize += file.size;
                    me.fileTotal += 1;
                    me.addFile(file);
                    me.setFileStatus(file, me.api.options.locale.uploadWait, 'gray', false, true, false);
                    me.setOperateDisabled(false);
                    me.setTip(false);
                })

                // 当开始上传流程时触发
                .on(busyAdmin.e.uploadBegin, function () {
                    me.setDisabled(true);
                    me.$operateBtn.html(apiOpt.locale.uploadPause).removeClass('btn-warning btn-default').addClass('btn-success');
                })

                // 当开始上传流程暂停时触发
                .on(busyAdmin.e.uploadStop, function () {
                    me.$operateBtn.html(apiOpt.locale.uploadContinue).removeClass('btn-success btn-default').addClass('btn-warning');
                })

                // 单个文件开始上传前触发
                .on(busyAdmin.e.uploadStart, function (e, uploader, file) {
                    file.$status.hide();
                    file.$progressBar.show();
                })

                // 所有文件上传完毕触发
                .on(busyAdmin.e.uploadFinished, function (e, uploader) {
                    uploader.reset();
                })

                // 上传过程中触发，上传进度
                .on(busyAdmin.e.uploadProgress, function (e, uploader, file, percentage) {
                    file.$progress.css('width', ((percentage * 100).toFixed(2)) + '%');
                })

                // 上传失败触发
                .on(busyAdmin.e.uploadError, function (e, uploader, file, reason) {
                    me.setTip(false);
                    me.setFileStatus(file, api._parseServerError(reason), 'danger', false, false, true);
                })

                // 上传成功触发
                .on(busyAdmin.e.uploadSuccess, function (e, uploader, file, response) {
                    me.setTip(false);
                    me.setFileStatus(file, api.options.locale.uploadSuccess, 'success', true, false, true);
                    me.addSuccessFile(response.file_url, response.name, response.file_size || 0, response.file_id);
                });

            me.$input.on(busyAdmin.e.verifyErrorPlacement, function (e, error) {
                me.$template.after(error);

                return false;
            });

            // 初始化源数据
            me.setUi(apiOpt.filesUi);
            me.setPlaceholder(apiOpt.placeholder);
            me.setDisabled(apiOpt.disabled);
        },

        /**
         * 解析值
         * @param value
         * @return {*[]}
         */
        parseValue : function (value) {
            var sourceList = [];
            if ($.isArray(value)) {
                sourceList = value;
            } else if (typeof value === 'string') {
                try {
                    sourceList = JSON.parse(value);
                    if (!$.isArray(sourceList)) {
                        throw new Error('');
                    }
                } catch (e) {
                    sourceList = [];
                    value.split(',').map(function (item, index) {
                        item = item.trim();
                        if (item.length > 0) {
                            sourceList.push({
                                url : item
                            })
                        }
                    });
                }
            }

            return sourceList;
        },

        setPlaceholder : function (placeholder) {
            this.$waitMessage.html(placeholder);
        },

        setUi : function (ui) {
            let me         = this;
            let apiOpt     = me.api.options;
            apiOpt.filesUi = ui;

            // 只显示结果
            me.$resultList.empty();
            me.$queueList.empty();
            if (ui == 'result') {
                me.$resultList.html(me.$waitEmpty);
            } else {
                me.$queueList.html(me.$waitEmpty);
            }

            me.successList  = {};
            me.successIndex = 0;
            me.parseValue(apiOpt.value).map(function (item) {
                me.addSuccessFile(item.url, item.name, item.size, item.id)
            });

            me.displayWaitEmpty();
        },

        setValue(value) {
            this.api.options.value = value;
            this.setUi(this.api.options.filesUi);
        },

        /**
         * 设置选中的文件
         * @param files
         */
        setSelectFiles : function (files) {
            files = files || [];
            if (files.length <= 0) {
                return;
            }

            var me = this;
            $.map(files, function (file) {
                me.addSuccessFile(file.url, file.name, file.size, file.id);
                me.api._triggerResult(file, false);
            });
        },

        /**
         * 添加上传成功的文件
         */
        addSuccessFile : function (fileUrl, fileName, fileSize, fileId, sort) {
            var me     = this;
            var api    = me.api;
            var apiOpt = api.options;
            var local  = apiOpt.locale;
            var obj    = {};

            // 构建数据
            var build = function () {
                var list = [];
                for (var index in me.successList) {
                    list.push(me.successList[index].data);
                }

                list.sort(function (a, b) {
                    return a.sort - b.sort;
                });

                var val = list.length == 0 ? '' : JSON.stringify(list);
                me.$input.val(val).busyAdminEventInput(true);
                api._triggerChange(val);
                me.displayWaitEmpty();
            };

            // 预览
            var preview = function () {
                if (obj.previewType) {
                    switch (obj.previewType) {
                        case "image":
                            obj.$preview.busyAdminImageViewer('destroy');
                            break;
                        case "video":
                            obj.$preview.busyAdminVideoViewer('destroy');
                            break;
                        case "audio":
                            obj.$preview.busyAdminAudioViewer('destroy');
                            break;
                        case "file":
                            obj.$preview.removeAttr('href').removeAttr('target');
                            break;
                    }
                }

                // 预览文件
                me.api._previewHandler(obj.data.url, function () {
                    obj.previewType = 'image';
                    obj.$preview.busyAdminImageViewer({
                        src : obj.data.url,
                        alt : obj.data.name
                    });
                }, function () {
                    obj.previewType = 'video';
                    obj.$preview.busyAdminVideoViewer({
                        src : obj.data.url
                    });
                }, function () {
                    obj.previewType = 'audio';
                    obj.$preview.busyAdminAudioViewer({
                        src : obj.data.url
                    });
                }, function () {
                    obj.previewType = 'file';
                    obj.$preview.attr('href', obj.data.url).attr('target', '_blank');
                });
            };

            // 获取文件名
            fileName = (fileName || '').trim();
            if (fileName.length === 0) {
                fileName = fileUrl.substring(fileUrl.lastIndexOf('/') + 1);
            }

            obj.data = {
                url  : fileUrl || '',
                name : fileName,
                size : fileSize || 0,
                id   : fileId || '',
                sort : sort || me.successIndex
            };

            switch (api.fileConfig.type) {
                case 'image':
                    obj.$item = $(Upload.FILES_TEMPLATE_IMAGE_RESULT_ITEM);
                    if (apiOpt.filesImageWidth > 0) {
                        obj.$item.width(apiOpt.filesImageWidth);
                    }

                    obj.$thumb = getId(obj.$item, 'thumb')
                        .attr('src', fileUrl)
                        .attr('data-src', fileUrl)
                        .attr('alt', fileName)
                        .css('background-image', 'url(' + fileUrl + ')')
                        .css('background-size', apiOpt.objectFit)
                        .on('error', function () {
                            $(this).addClass('error');
                        });
                    break;
                default:
                    obj.$item = $(Upload.FILES_TEMPLATE_FILE_RESULT_ITEM);
            }

            obj.$item.attr('data-index', me.successIndex).attr('data-upload-id', 'item');
            obj.$delete  = getId(obj.$item, 'delete').attr('title', local.delete).attr('data-index', me.successIndex);
            obj.$preview = getId(obj.$item, 'preview').attr('title', local.preview).attr('data-index', me.successIndex);
            obj.$replace = getId(obj.$item, 'replace').attr('title', local.replace).attr('data-index', me.successIndex);
            obj.$name    = getId(obj.$item, 'name').attr('title', local.modifyFileName).attr('data-index', me.successIndex).html(fileName);
            obj.$size    = getId(obj.$item, 'size').attr('data-index', me.successIndex).html(api.formatSize(fileSize));
            obj.index    = me.successIndex;

            me.successList[me.successIndex] = obj;
            me.successIndex++;

            // 修改文件名
            if (apiOpt.filesEditFilename) {
                obj.$name.on('click', function () {
                    busyAdmin.dialog.prompt(local.modifyFileName, obj.data.name, 'text', function (value) {
                        value = (value || '').trim();
                        if (value.length === 0) {
                            busyAdmin.dialog.toast(local.pleaseInputFileName);
                            return false;
                        }

                        obj.data.name = value;
                        obj.$name.html(value);
                        build();
                    });
                });
            }

            // 删除文件
            obj.$delete.on('click', function () {
                busyAdmin.dialog.confirm(busyAdmin.helper.sprintf(local.confirmDeleteThat, '<code>' + obj.data.name + '</code>'), function () {
                    obj.$item.remove();
                    delete me.successList[obj.index];
                    build();
                });
            });

            // 替换文件
            obj.$replace.on('click', function () {
                $(this).busyAdminFilePicker({
                    classType  : apiOpt.classType,
                    classValue : apiOpt.classValue,
                    title      : busyAdmin.helper.sprintf(local.replaceFile, api.fileConfig.name),
                    multiple   : false,
                    extensions : api.fileConfig.suffix,
                    success    : function (files) {
                        if (files.length <= 0) {
                            return;
                        }

                        var file = files[0];
                        obj.$name.html(file.name);
                        obj.$size.html(api.formatSize(fileSize));
                        if (obj.$thumb) {
                            obj.$thumb
                                .removeClass('error')
                                .attr('src', file.url)
                                .attr('data-src', file.url)
                                .attr('alt', file.name)
                                .css('background-image', 'url(' + file.url + ')');
                        }

                        obj.data.url  = file.url;
                        obj.data.name = file.name;
                        obj.data.size = file.size;
                        obj.data.id   = file.id;
                        preview();
                        build();
                    }
                });
            });

            preview();

            // 提示
            var tipList = [obj.$delete, obj.$preview, obj.$replace];
            if (apiOpt.filesEditFilename) {
                tipList.push(obj.$name);
            }
            $(tipList).tooltip({
                container : me.$template,
                trigger   : 'hover'
            });

            fileSize > 0 ? obj.$size.show() : obj.$size.hide();
            me.$resultList.append(obj.$item);

            // 延迟执行
            clearTimeout(me.addSuccessFileTimer);
            me.addSuccessFileTimer = setTimeout(function () {
                build();

                // 拖拽排序
                if (this.sortable) {
                    this.sortable.destroy();
                }
                me.sortable = new Sortable(me.$resultList[0], {
                    animation : 150,
                    onEnd     : function () {
                        getId(me.$resultList, 'item').each(function (sort) {
                            me.successList[$(this).data('index')].data.sort = sort;
                        });

                        build();
                    }
                });
            }, 10);
        },

        setImageWidth : function (width) {
            this.api.options.filesImageWidth = width;
            this.setUi(this.api.options.filesUi);
        },

        /**
         * 添加文件
         * @param {Object} file
         */
        addFile : function (file) {
            var me    = this;
            var api   = me.api;
            var local = me.api.options.locale;

            if (api.fileConfig.type === 'image') {
                file.$item = $(Upload.FILES_TEMPLATE_IMAGE_QUEUE_ITEM);
                if (api.options.filesImageWidth > 0) {
                    file.$item.width(api.options.filesImageWidth);
                }

                file.$thumb   = getId(file.$item, 'thumb');
                file.$toolbar = getId(file.$item, 'toolbar');
                file.rotation = 0;


                // 生成缩略图
                file.$thumb.attr('src', '');
                api.uploader.makeThumb(file, function (error, src) {
                    if (error) {
                    } else {
                        file.$thumb.attr('src', src);
                    }
                }, 150, 150);
            } else {
                file.$item = $(Upload.FILES_TEMPLATE_FILE_QUEUE_ITEM);
            }

            file.$item.attr('data-upload-id', 'wait-item');
            file.$name        = getId(file.$item, 'name');
            file.$size        = getId(file.$item, 'size');
            file.$progressBar = getId(file.$item, 'progress-bar');
            file.$progress    = getId(file.$item, 'progress');
            file.$delete      = getId(file.$item, 'delete');
            file.$status      = getId(file.$item, 'status');

            file.$name.html(file.name);
            file.$size.html(me.api.formatSize(file.size));
            file.$progress.css('width', '0%');

            // 取消上传
            file.$delete.on('click', function () {
                file.isDelete = true;
                api.uploader.removeFile(file, true);
            });

            // 监听文件状态
            file.on('statuschange', function (status, beforeStatus) {
                switch (status) {
                    // 上传出错，可重试
                    case 'error':
                        me.setFileStatus(this, api._parseServerError(this.statusText), 'danger', false, false, true);
                        break;

                    // 文件不合格，不能重试上传。会自动从队列中移除
                    case 'invalid':
                        me.setFileStatus(this, api._parseCodeError(this.statusText), 'danger', false, false, true);
                        break;

                    // 上传中断，可续传
                    case 'interrupt':
                        me.setFileStatus(this, local.uploadPaused, 'warning', false, true, false);
                        break;

                    // 文件被移除
                    case 'cancelled':
                        me.fileTotal -= 1;
                        me.fileSize -= file.size;
                        me.setTip(false);
                        me.setFileStatus(this, local.uploadCanceled, 'danger', false, false, true);
                        break;
                }
            });

            me.$queueList.append(file.$item);
            me.displayWaitEmpty();
        },

        /**
         * 设置状态
         * @param {Object} file 文件
         * @param {String} message 消息
         * @param {String} className css类名
         * @param {Boolean} status 是否上传成功
         * @param {Boolean} canDelete 是否显示删除按钮
         * @param {Boolean} remove 是否可以删除
         */
        setFileStatus : function (file, message, className, status, canDelete, remove) {
            var me = this;
            file.$progressBar.hide();
            file.$status.html('<span class="text-' + className + '">' + message + '</span>').show();
            canDelete ? file.$delete.show() : file.$delete.hide();

            clearTimeout(file.closeTimer);
            if (remove) {
                file.closeTimer = setTimeout(function () {
                    file.$item.fadeOut(function () {
                        file.$item.remove();
                        me.displayWaitEmpty();
                    });
                }, status ? 1500 : 2500);
            }
        },

        /**
         * 显示等待选择提示
         */
        displayWaitEmpty : function () {
            var me    = this;
            var ui    = me.api.options.filesUi;
            var count = 0;
            for (var key in me.successList) {
                count++;
            }

            me.$resultContainer.removeClass('only-result').show();
            me.$resultList.removeClass('no-list');
            me.$queueList.removeClass('no-list');
            me.$queueContainer.show();
            switch (ui) {
                case 'result':
                    if (getId(me.$queueList, 'wait-item').length === 0) {
                        me.$queueContainer.hide();
                        me.$resultContainer.addClass('only-result');
                    } else {
                        me.$queueContainer.show();
                        me.$resultContainer.removeClass('only-result');
                    }

                    if (count == 0) {
                        me.$waitEmpty.show();
                        me.$resultList.addClass('no-list');
                        me.$resultContainer.show();
                    } else {
                        me.$waitEmpty.hide();
                        me.$resultList.removeClass('no-list');
                        me.$resultContainer.show();
                    }
                    break;
                default:
                    if (ui == 'queue') {
                        me.$resultContainer.hide();
                    } else {
                        if (count == 0) {
                            me.$resultContainer.hide();
                        } else {
                            me.$resultContainer.show();
                        }
                    }

                    if (getId(me.$queueList, 'wait-item').length === 0) {
                        me.$waitEmpty.show();
                        me.$queueList.addClass('no-list');
                    } else {
                        me.$waitEmpty.hide();
                        me.$queueList.removeClass('no-list');
                    }
            }
        },

        /**
         * 设置提示
         * @param {Boolean} isClear 是否清理
         */
        setTip : function (isClear) {
            var me     = this;
            var api    = me.api;
            var locale = api.options.locale;

            clearTimeout(me.tipTimer)
            if (isClear) {
                me.tipTimer  = setTimeout(function () {
                    me.$tip.fadeOut();
                }, 2500);
                me.fileTotal = 0;
                me.fileSize  = 0;
            } else {
                var stats = api.uploader.getStats();
                if (stats.uploadFailNum > 0) {
                    me.$tip.html(busyAdmin.helper.sprintf(locale.uploadTipComplete, '<code>' + me.fileTotal + '</code>', '<code>' + stats.successNum + '</code>', '<code>' + stats.uploadFailNum + '</code>'))
                } else if (stats.successNum > 0) {
                    me.$tip.html(busyAdmin.helper.sprintf(locale.uploadTipSuccess, '<code>' + me.fileTotal + '</code>', '<code>' + stats.successNum + '</code>'))
                } else {
                    me.$tip.html(busyAdmin.helper.sprintf(locale.uploadTipSelected, '<code>' + me.fileTotal + '</code>', '<code>' + api.formatSize(me.fileSize) + '</code>')).show();
                }

                if (me.fileTotal === 0) {
                    me.setOperateDisabled(true);
                    me.setTip(true);
                }
            }
        },

        /**
         * 设置上传按钮状态
         * @param {Boolean} status
         */
        setOperateDisabled : function (status) {
            if (status) {
                this.$operateBtn.prop('disabled', true).removeClass('btn-success btn-warning').addClass('disabled btn-default');
            } else {
                this.$operateBtn.prop('disabled', false).removeClass('disabled btn-default').addClass('btn-success');
            }
        },

        setDisabled(status) {
            this.$resultList.toggleClass('disabled', status);
            this.api._changeDisabled(status);
        },

        /**
         * 销毁
         */
        destroy : function () {
            var me = this;
            me.$template.remove();

            if (me.api.isInput) {
                me.api.$element.removeClass('input-hidden');
            } else {
                me.$input.remove();
            }
        }
    };

    /**
     * 卡片上传
     * @param {Upload} api
     * @constructor
     */
    var CardUpload = function (api) {
        this.api = api;
        this.init();
    }

    CardUpload.prototype = {
        init : function () {
            var me     = this;
            var api    = me.api;
            var apiOpt = api.options;
            var width  = api.$element.outerWidth();
            var height = api.$element.outerHeight();

            me.$template   = $(Upload.CARD_TEMPLATE).addClass(apiOpt.className);
            me.$toolbar    = getId(me.$template, 'toolbar');
            me.$uploadBtn  = getId(me.$template, 'upload-btn').addClass(apiOpt.uploadClass);
            me.$uploadBtn2 = getId(me.$template, 'upload-btn2');
            me.$selectBtn  = getId(me.$template, 'select-btn').addClass(apiOpt.selectClass);
            me.$block      = getId(me.$template, 'block');
            me.$icon       = getId(me.$template, 'icon').addClass(apiOpt.cardIcon);
            me.$preview    = getId(me.$template, 'preview').hide();
            me.$progress   = getId(me.$template, 'progress').hide();
            me.$speed      = getId(me.$template, 'speed');
            me.$delete     = getId(me.$template, 'remove-btn');

            // 圆形卡片
            if (api.options.cardType === 'circle') {
                me.$template.addClass('upload-card-type-circle');
            }

            if (api.isInput) {
                me.$input = api.$element;
                api.$element.after(me.$template);
            } else {
                me.$input = $('<input type="text" name="' + apiOpt.name + '"/>');
                api.$element.html(me.$template).append(me.$input);
            }

            me.$input.addClass('input-hidden').on(busyAdmin.e.verifyErrorPlacement, function (e, error) {
                me.$template.after(error);
                return false;
            });

            // 删除
            me.$delete.on('click', function () {
                me.showPreview('');
            });
            me.setSize(width, height);

            apiOpt.auto = true;
            api._initUploader(me.$uploadBtn, me.$template, me.$selectBtn, false);
            me.$toolbar.hide();

            // 添加点击区域
            api.uploader.addButton({
                id       : me.$uploadBtn2,
                multiple : false
            }).then(function () {
                me.$placeholder = getId(me.$template, 'placeholder');
                me.$icon        = getId(me.$template, 'icon');
                me.setPlaceholder(apiOpt.placeholder);
            });

            api.$element
                // 文件校验失败触发
                .on(busyAdmin.e.uploadFileError, function (e, uploader, file, code) {
                    uploader.reset();
                    busyAdmin.dialog.tipError(code);
                })

                // 重置时触发
                .on(busyAdmin.e.uploadReset, function () {
                    me.setDisabled(false);
                    me.$progress.hide();
                })

                // 文件加入列队后触发
                .on(busyAdmin.e.uploadFileQueued, function () {
                    me.$speed.html('0%');
                    me.$progress.show();
                })

                // 上传过程中触发，上传进度
                .on(busyAdmin.e.uploadProgress, function (e, uploader, file, percentage) {
                    me.$speed.html(((percentage * 100).toFixed(2)) + '%');

                })

                // 上传完成触发
                .on(busyAdmin.e.uploadComplete, function (e, uploader) {
                    uploader.reset();
                })

                // 上传失败触发
                .on(busyAdmin.e.uploadError, function (e, uploader, file, reason) {
                    busyAdmin.dialog.tipError(reason);
                })

                // 上传成功触发
                .on(busyAdmin.e.uploadSuccess, function (e, uploader, file, response) {
                    busyAdmin.dialog.tipSuccess(apiOpt.locale.uploadSuccess);
                    me.setValue(response.file_url);
                });

            // 加入列队前触发
            api.uploader.on('beforeFileQueued', function (file) {
                me.setDisabled(true);
                return true;
            });

            // 显示预览
            me.setValue(apiOpt.value);
            me.setDisabled(apiOpt.disabled);
        },

        setSize : function (width, height) {
            height    = height <= 0 ? width : height;
            var ratio = height / width * 100;
            this.api.$element.outerWidth(width).outerWidth(height);
            this.$template.outerWidth(width).outerHeight(height);
            this.$block.css({
                width         : '100%',
                paddingBottom : ratio + '%'
            });

            if (this.api.uploader) {
                this.api.uploader.refresh();
            }
        },

        setIcon : function (icon) {
            this.$icon.removeAttr('class').addClass(icon);
        },

        setValue : function (value) {
            this.api.options.value = value;
            this.showPreview(value);
        },

        setPlaceholder : function (placeholder) {
            this.$placeholder.html(placeholder);
        },

        /**
         * 设置选中的文件
         * @param files
         */
        setSelectFiles : function (files) {
            files = files || [];
            if (files.length <= 0) {
                return;
            }

            var file = files[0];
            this.showPreview(file.url);
            this.api._triggerResult(file, false);
        },

        /**
         * 显示预览
         * @param url
         */
        showPreview : function (url) {
            var me  = this;
            var api = me.api;
            var $prevElement;

            url = (url || '').trim();
            me.$input.val(url).busyAdminEventInput(true);
            api._triggerChange(url);
            if (url.length === 0) {
                me.$preview.empty().hide();
                me.$delete.hide();
                return;
            }

            api._previewHandler(url, function () {
                me.$preview.html(($prevElement = $('<img src="' + url + '" data-title="false" class="cursor-zoom-in"/>'))).show();
                $prevElement.busyAdminImageViewer();
            }, function () {
                me.$preview.html(($prevElement = $('<video><source src="' + url + '"/></video>'))).show();
                $prevElement.busyAdminVideoViewer({size : false});
            });

            if ($prevElement) {
                $prevElement.css('object-fit', api.options.objectFit)
            }
            me.$delete.show();
        },

        /**
         * @param status
         */
        setDisabled(status) {
            this.api._changeDisabled(status);
            this.$template.toggleClass('disabled', status);
        },

        /**
         * 销毁
         */
        destroy : function () {
            var me = this;
            me.$template.remove();
            if (me.api.isInput) {
                me.$input.removeClass('input-hidden');
            } else {
                me.$input.remove();
            }
        }
    };

    /**
     * 自定义上传
     * @param {Upload} api
     * @constructor
     */
    var UseUpload = function (api) {
        this.api     = api;
        this.pending = null;
        this.init();
    };

    UseUpload.prototype = {
        init : function () {
            var me        = this;
            var api       = me.api;
            var apiOpt    = api.options;
            apiOpt.upload = true;
            apiOpt.select = true;

            me.$uploadBtn = $(api.element);
            me.$selectBtn = null;
            if (apiOpt.useSelect) {
                me.$selectBtn = $(apiOpt.useSelect);
            }

            me.$dnd = null;
            if (apiOpt.useDnd) {
                me.$dnd    = $(apiOpt.useDnd);
                apiOpt.dnd = true;
            }

            api._initUploader(me.$uploadBtn, me.$dnd, me.$selectBtn, false);
            api.$element
                // 文件校验失败触发
                .on(busyAdmin.e.uploadFileError, function (e, uploader, file, code) {
                    uploader.reset();
                    if (!apiOpt.useError) {
                        busyAdmin.dialog.tipError(code);
                    }
                })

                // 重置时触发
                .on(busyAdmin.e.uploadReset, function () {
                    me.setDisabled(false);
                    if (me.pending) {
                        me.pending.close();
                    }
                })

                // 文件加入列队后触发
                .on(busyAdmin.e.uploadFileQueued, function () {
                    if (!apiOpt.useProgress) {
                        me.pending = busyAdmin.dialog.pending('0%');
                    }
                })

                // 上传过程中触发，上传进度
                .on(busyAdmin.e.uploadProgress, function (e, uploader, file, percentage) {
                    if (me.pending) {
                        me.pending.update(((percentage * 100).toFixed(2)) + '%');
                    }
                })

                // 上传完成触发
                .on(busyAdmin.e.uploadComplete, function (e, uploader) {
                    uploader.reset();
                })

                // 上传失败触发
                .on(busyAdmin.e.uploadError, function (e, uploader, file, reason) {
                    if (!apiOpt.useError) {
                        busyAdmin.dialog.tipError(reason);
                    }
                })

                // 上传成功触发
                .on(busyAdmin.e.uploadSuccess, function (e, uploader, file, response) {
                    api._triggerResult(response, true);
                    api._triggerChange(response.file_url)
                });

            // 加入列队前触发
            api.uploader.on('beforeFileQueued', function (file) {
                me.setDisabled(true);
                return true;
            });

            me.setDisabled(apiOpt.disabled);
        },

        /**
         * 设置选中的文件
         * @param files
         */
        setSelectFiles : function (files) {
            files = files || [];
            if (files.length <= 0) {
                return;
            }

            this.api._triggerResult(files[0], false);
            this.api._triggerChange(files[0].url)
        },

        setDisabled(status) {
            this.api._changeDisabled(status);
        },

        /**
         * 销毁
         */
        destroy : function () {
        }
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.upload.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new Upload(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                if (option === 'destroy') {
                    $this.removeAttr('data-toggle');
                    $this.removeAttr('busy-upload');
                    $this.removeData(key);
                }

                if (typeof api[option] === 'function') {
                    ret = api[option].apply(api, args);
                } else if (typeof api.module[option] === 'function') {
                    ret = api.module[option].apply(api.module, args);
                }
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminUpload             = Plugin;
    $.fn.busyAdminUpload.Constructor = Upload;
    busyAdmin.plugins.Upload         = Upload;
    $.extend(busyAdmin.e, {
        /**
         * 异步初始化触发
         */
        uploadAsyncInit : busyAdmin.ee('init', 'upload'),
        /**
         * 上传初始化后触发
         */
        uploadReady : busyAdmin.ee('ready', 'upload'),
        /**
         * 文件校验不通过时触发
         */
        uploadFileError : busyAdmin.ee('file-error', 'upload'),
        /**
         * 文件加入列队触发
         */
        uploadFileQueued : busyAdmin.ee('file-queued', 'upload'),
        /**
         * 一批文件加入列队触发
         */
        uploadFilesQueued : busyAdmin.ee('files-queued', 'upload'),
        /**
         * 文件被移除队列后触发
         */
        uploadFileDequeued : busyAdmin.ee('files-dequeued', 'upload'),
        /**
         * 异步上传文件前回调(还没有切割分块)
         */
        uploadAsyncBeforeSendFile : busyAdmin.ee('async-before-send-file', 'upload'),
        /**
         * 同步文件发送前回调(如果有分块，此时可以处理了)
         */
        uploadBeforeSend : busyAdmin.ee('before-send', 'upload'),
        /**
         * 异步文件发送前回调(如果有分块，此时可以处理了)
         */
        uploadAsyncBeforeSend : busyAdmin.ee('async-before-send', 'upload'),
        /**
         * 每一个分块或文件上传结果解析，返回false代表上传失败
         */
        uploadAccept : busyAdmin.ee('accept', 'upload'),
        /**
         * 异步所有文件上传完毕回调
         */
        uploadAsyncAfterSendFile : busyAdmin.ee('async-after-send-file', 'upload'),
        /**
         * 上传流程开始时触发
         */
        uploadBegin : busyAdmin.ee('begin', 'upload'),
        /**
         * 上传流程被暂停时触发
         */
        uploadStop : busyAdmin.ee('stop', 'upload'),
        /**
         * 所有文件上传完毕时触发
         */
        uploadFinished : busyAdmin.ee('finished', 'upload'),
        /**
         * 一个文件开始上传触发
         */
        uploadStart : busyAdmin.ee('start', 'upload'),
        /**
         * 上传完成触发
         */
        uploadComplete : busyAdmin.ee('complete', 'upload'),
        /**
         * 上传进度触发
         */
        uploadProgress : busyAdmin.ee('progress', 'upload'),
        /**
         * 上传成功触发
         */
        uploadSuccess : busyAdmin.ee('success', 'upload'),
        /**
         * 上传失败触发
         */
        uploadError : busyAdmin.ee('error', 'upload'),
        /**
         * 当uploader被重置的时候触发
         */
        uploadReset : busyAdmin.ee('reset', 'upload'),
        /**
         * 文件上传成功或文件库选择后触发
         */
        uploadResult : busyAdmin.ee('result', 'upload'),
        /**
         * 内容发生改变
         */
        uploadChange : busyAdmin.ee('change', 'upload'),
    });

    busyAdmin.autoInit('[data-toggle="busy-upload"],[busy-upload]', function () {
        Plugin.call(this);
    });

    return Upload;
}));
/**
 * 视频预览
 */
;(function (factory) {
    var core = busyAdmin;
    define('./busyAdmin/plugins/videoViewer', [core.sys.core, core.sys.jquery], factory);
}(function (busyAdmin, $) {
    var VideoJs = null;

    var VideoViewer = function (element, options) {
        var me       = this;
        me.element   = element;
        me.$element  = $(element);
        me.$template = null;
        me.options   = $.extend(true, {}, VideoViewer.DEFAULTS, me.$element.data() || {}, options || {});
        me.api       = null;
        me.sources   = {};
        me.ready(me.init);
    };

    VideoViewer.prototype = {
        ready : function (callback) {
            var me = this;
            if (VideoJs) {
                callback.call(me);
            } else {
                require([busyAdmin.lib.video], function (videojs) {
                    VideoJs = videojs;
                    callback.call(me);
                });
            }
        },

        /**
         * 初始化
         */
        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }

            me.isInit  = true;
            me.isVideo = false;
            if (me.element.tagName.toLowerCase() === 'video') {
                var src    = me.$element.attr('src');
                var mime   = me.$element.attr('type');
                var poster = me.$element.attr('poster');
                mime       = mime ? mime : '-';
                if (src) {
                    me.sources[mime] = src;
                }

                me.isVideo = true;
                me.$element.find('source').each(function () {
                    var $this = $(this);
                    var src   = $this.attr('src');
                    var mime  = $this.attr('mime');
                    mime      = mime ? mime : '-';
                    if (src) {
                        me.sources[mime] = src;
                    }
                });

                var $temp = $('<div class="busy-video-viewer"/>');
                if (me.options.size) {
                    $temp.css({
                        width  : me.$element.outerWidth(true),
                        height : me.$element.outerHeight(true),
                    });
                }

                me.$element.wrap($temp);
                me.$template = me.$element.parent();
                me.$template.append('<div class="player fa fa-play-circle fa-3x"/>');
                me.$template.off('click').on('click', function () {
                    me.show();
                });
            } else {
                if (me.options.clickHandler) {
                    me.$element.off('click').on('click', function () {
                        me.show();
                    });
                }
            }

            if (me.options.mp4) {
                me.sources['video/mp4'] = me.options.mp4;
            }
            if (me.options.webm) {
                me.sources['video/webm'] = me.options.webm;
            }
            if (me.options.ogv) {
                me.sources['video/ogg'] = me.options.webm;
            }
            if (me.options.src) {
                me.sources['-'] = me.options.src;
            }
            if (!me.options.poster && poster) {
                me.options.poster = poster;
            }

            // 触发插件准备完成事件
            busyAdmin.helper.triggerPluginReady(me.$element, 'VideoViewer', me);
        },

        /**
         * 显示预览
         */
        show : function () {
            var me        = this;
            var videoHtml = '<div class="busy-video-viewer-dialog-content">\
                    <video class="video-js">_source_</video>\
                </div>';

            var source = '';
            for (var mime in me.sources) {
                source += '<source src="' + me.sources[mime] + '" type="' + (mime === '-' ? '' : mime) + '" />';
            }
            videoHtml = videoHtml.replace('_source_', source);

            var layerIndex = layer.open({
                title     : false,
                type      : 1,
                skin      : 'busy-video-viewer-dialog',
                scrollbar : false,
                content   : videoHtml,
                success   : function ($dialog, index) {
                    var $content = $dialog.find('.busy-video-viewer-dialog-content');
                    layer.area(index, $content.width(), $content.height());
                    this.offset();

                    var $video = $dialog.find('video');
                    VideoJs($video[0], {
                        controls : true,
                        preload  : true,
                        muted    : me.options.muted,
                        poster   : me.options.poster
                    }, function () {
                        if (me.options.autoplay) {
                            this.play();
                        }
                    });
                }
            });

            $(document).on(busyAdmin.e.appRenderBefore, function () {
                layer.close(layerIndex);
            });
        },

        /**
         * 销毁
         */
        destroy : function () {
            var me = this;
            if (!me.isInit) {
                return;
            }

            me.isInit = true;
            if (me.isVideo) {
                me.$template.off('click');
                me.$template.after(me.$element);
                me.$template.remove();
            } else {
                if (me.options.clickHandler) {
                    me.$element.off('click');
                }
            }
        }
    }

    VideoViewer.DEFAULTS = {
        src          : '',
        mp4          : '',
        webm         : '',
        ogv          : '',
        autoplay     : true,
        muted        : false,
        poster       : '',
        size         : true,
        clickHandler : true
    };

    function Plugin(option) {
        var ret;
        var key  = 'busy.admin.video-viewer.api';
        var args = Array.prototype.slice.call(arguments);
        args.shift();

        this.each(function () {
            var $this = $(this);
            var api   = $this.data(key);

            if (!api) {
                $this.data(key, (api = new VideoViewer(this, typeof option === 'object' && option)));
            }

            if (typeof option === 'string') {
                ret = api[option].apply(api, args);
            }
        });

        if (typeof option === "string") {
            return ret;
        }

        return this;
    }

    $.fn.busyAdminVideoViewer             = Plugin;
    $.fn.busyAdminVideoViewer.Constructor = VideoViewer;
    busyAdmin.plugins.VideoViewer         = VideoViewer;

    busyAdmin.autoInit('[data-toggle="busy-video-viewer"],[busy-video-viewer]', function () {
        Plugin.call(this);
    });

    return VideoViewer;
}));
/**
 * 顶部通知
 */
;(function ($, busyAdmin) {
    var Gwm;
    var Moment;
    var Int       = busyAdmin.helper.int;
    var Float     = busyAdmin.helper.float;
    var getConfig = function () {
        return busyAdmin.getConfig('watermark', {});
    }

    /**
     * @constructor
     */
    var Watermark = function () {
        var me     = this;
        me.options = getConfig();
        me.ready(me.init);
    };

    Watermark.prototype = {
        ready : function (callback) {
            var me = this;
            if (Gwm && Moment) {
                typeof callback === 'function' && callback.call(me);
            } else {
                require([busyAdmin.lib.gwm, busyAdmin.lib.moment], function (gwmTarget, momentTarget) {
                    Gwm    = gwmTarget;
                    Moment = momentTarget;
                    typeof callback === 'function' && callback.call(me);
                })
            }
        },

        init : function () {

        },

        create : function (options) {
            var opt = $.extend({}, this.options, options || {});
            opt.txt = (opt.txt || '').replace(/\{username\}/g, busyAdmin.app.getUsername());
            opt.txt = opt.txt.replace(/\{time\}/g, Moment().format(opt.timeFormat || 'YYYY-MM-DD HH:ii:ss'));
            Gwm.creation({
                mode        : 'svg',
                watch       : true,
                fontSize    : opt.fontSize,
                color       : opt.color,
                font        : opt.font || 'sans-serif',
                alpha       : Float(opt.alpha || 0),
                angle       : Int(opt.angle || 0),
                imageWidth  : Int(opt.imageWidth || 0),
                imageHeight : Int(opt.imageHeight || 0),
                imageX      : Int(opt.imageX || 0),
                imageY      : Int(opt.imageY || 0),
                image       : opt.image || '',
                width       : Int(opt.width || 0),
                height      : Int(opt.height || 0),
                x           : Int(opt.x || 0),
                y           : Int(opt.y || 0),
                txt         : opt.txt
            });
        },

        cancel : function () {
            Gwm.cancel();
        },
    };

    function createWatermark(options) {
        options = options || {};
        var app = busyAdmin.app;
        if (app.isLogin() && options.status) {
            if (!app.watermark) {
                app.watermark = new Watermark();
            }

            app.watermark.ready(function () {
                this.create(options);
            });
        } else {
            if (app.watermark) {
                app.watermark.ready(function () {
                    this.cancel();
                });
            }
        }
    }

    Watermark.create = createWatermark;


    $(document).on(busyAdmin.e.appReadies, function () {
        busyAdmin.plugins.Watermark = Watermark;
        createWatermark(getConfig());
    }).on(busyAdmin.e.appReqSuccess, function () {
        createWatermark(getConfig());
    });
})(jQuery, busyAdmin);
/**
 * 应用
 * TODO 移动和PC尺寸拉升的时候，$barControl 图标异常
 * TODO IE10 以下路由功能未测试，BUG可能性非常高
 */
;(function ($, busyAdmin) {
    'use strict';

    /**
     * 查找data-busy-id元素
     * @param $element
     * @param name
     * @return {*|jQuery|HTMLElement}
     */
    function getElement($element, name) {
        return $element.find('[data-busy-id="' + name + '"]');
    }

    function findElement(elems, id) {
        return elems.filter('[data-busy-id="' + id + '"]').add(elems.find('[data-busy-id="' + id + '"]'));
    }

    function findAll(elems, selector) {
        return elems.filter(selector).add(elems.find(selector))
    }

    /**
     * 解析HTML
     * @param html
     * @return {jQuery|HTMLElement}
     */
    function parseHTML(html) {
        return $.parseHTML(html, document, true)
    }

    /**
     * APP
     * @constructor
     */
    var App = function () {
        var me  = this;
        me.$doc = $(document);
        me.$win = $(window);
    };

    App.prototype = {
        /**
         * 启动
         */
        start : function () {
            var me = this;

            me.options = $.extend({}, App.DEFAULTS, busyAdmin.getConfig('app') || {});
            me._initResponse();
            me._initSinglePage();
            me.$doc.ready($.proxy(me.init, me));
        },

        /**
         * 准备完成
         * @param callback
         */
        ready : function (callback) {
            var me = this;
            if (me.isInit) {
                if (typeof callback === 'function') {
                    callback.call(me);
                }
            } else {
                clearTimeout(me._readyTimer);
                me._readyTimer = setTimeout(function () {
                    me.ready(callback);
                });
            }
        },

        /**
         * 初始化
         */
        init : function () {
            var me = this;
            if (me.isInit) {
                return;
            }

            // 查找应用结构
            me.$head = $(document.head);
            me.$body = $(document.body);
            me.$app  = getElement(me.$body, 'app');
            me._initApp();

            // 触发运行时
            if (typeof me.options.runtime === 'function') {
                me.options.runtime.call(this);
            }

            // 注册工具栏提示
            busyAdmin.autoInit('[data-toggle="tooltip"],[busy-tooltip]', function () {
                this.tooltip();
            });

            // 注册弹出框
            busyAdmin.autoInit('[data-toggle="popover"],[busy-popover]', function () {
                this.popover();
            });

            // 自动初始化插件
            busyAdmin.helper.onDomChange(function () {
                busyAdmin.autoInitList.map(function (item) {
                    item.callback.call($(item.selector));
                });
            });

            // 全局图片处理
            document.addEventListener('error', function (e) {
                if (e.target.tagName === 'IMG') {
                    if (e._handleError) {
                        return;
                    }

                    e._handleError = true;
                    e.target.src   = me.options.errorImgUrl;
                }
            }, true);

            // 页面刷新或关闭前事件触发
            window.addEventListener("beforeunload", function (event) {
                me.trigger(busyAdmin.e.appBeforeDestroy, [false, event]);
            }, false);

            // 监听Pace
            Pace.on('start', function () {
                if (!me.isFrame) {
                    return;
                }

                clearTimeout(me._paceStartTimer);
                me._paceStartTimer = setTimeout(function () {
                    me.$barRefreshIcon.addClass('busy-admin-anim-rotate');
                });
            });
            Pace.on('done', function () {
                if (!me.isFrame) {
                    return;
                }

                clearTimeout(me._paceStopTimer);
                me._paceStopTimer = setTimeout(function () {
                    me.$barRefreshIcon.removeClass('busy-admin-anim-rotate');
                });
            });

            // 监听Resize
            me.$win.on('resize', function () {
                clearTimeout(me._resizeTimer);
                me._resizeTimer = setTimeout(function () {
                    me._computeMenu();
                }, 50);
            });

            me.isInit = true;
        },

        /**
         * 关闭侧边栏
         */
        closeSideNav : function () {
            var me = this;
            if (!me.isMobileSize()) {
                return;
            }

            me.$frame.removeClass('busy-admin-nav-open');
            me._changeBarControlIcon(true);
            me.triggerResize();
        },

        /**
         * 打开侧边栏
         */
        openSideNav : function () {
            var me = this;
            if (!me.isMobileSize()) {
                return;
            }

            me.$frame.addClass('busy-admin-nav-open');
            me._changeBarControlIcon(false);
            me.scrollToNav();

            me.triggerResize();
        },

        /**
         * 设为迷你菜单
         * @param {?Boolean} once
         */
        setToMiniNav : function (once) {
            var me = this;
            if (me.isMobileSize() || me.isMiniNav()) {
                return;
            }


            me.$app.addClass('busy-admin-mini-nav');
            me.$left.removeClass('busy-admin-left-open');
            me._changeBarControlIcon(true);

            me.triggerResize();
            me.$left.busyAdminOnTransEnd(true, function () {
                me.triggerResize();
            });

            // TODO 因为setNavActive方法比这个先执行，所以这里延迟1秒记录零时状态，有好的办法在解决
            clearTimeout(me._onceMiniNavTimer);
            me._onceMiniNavTimer = setTimeout(function () {
                me._onceMiniNav = once;
            }, 1000);
        },

        /**
         * 设为默认菜单
         */
        setToDefaultNav : function () {
            var me = this;
            if (me.isMobileSize() || !me.isMiniNav()) {
                return;
            }

            me.$app.removeClass('busy-admin-mini-nav');
            me.$left.removeClass('busy-admin-left-open');
            me._changeBarControlIcon(false);
            me.scrollToNav();

            me.triggerResize();
            me.$left.busyAdminOnTransEnd(true, function () {
                me.triggerResize();
            });
        },

        /**
         * 触发Resize
         */
        triggerResize : function () {
            this.$win && this.$win.trigger('resize');
        },

        /**
         * 切换菜单控制按钮样式
         * @param open
         * @private
         */
        _changeBarControlIcon : function (open) {
            var me = this;
            if (open) {
                me.$barControlIcon.removeClass('bicon-menu-close').addClass('bicon-menu-open');
            } else {
                me.$barControlIcon.removeClass('bicon-menu-open').addClass('bicon-menu-close');
            }
        },

        /**
         * 是否移动设备尺寸
         */
        isMobileSize : function () {
            return this.$win && this.$win.width() <= 767;
        },

        /**
         * 保存菜单展开状态
         */
        _saveNavState : function (path, state) {
            var me = this;
            if (me.options.navSingleHold) {
                return;
            }

            var list   = me._getNavState();
            list[path] = state;

            localStorage.setItem('busy.admin.app.nav', JSON.stringify(list));
        },

        /**
         * 获取菜单状态
         */
        _getNavState : function () {
            return JSON.parse(localStorage.getItem('busy.admin.app.nav') || "{}");
        },

        /**
         * 保存滚动条位置
         * @private
         */
        _saveScrollState : function (value) {
            var list = JSON.parse(sessionStorage.getItem('busy.admin.app.scroll') || '{}') || {};
            var keys = Object.keys(list);
            while (keys.length > this.options.scrollCacheLength) {
                delete list[keys.shift()];
            }

            list[document.URL] = value;
            sessionStorage.setItem('busy.admin.app.scroll', JSON.stringify(list));
        },

        /**
         * 获取滚动条位置
         * @private
         */
        _getScrollState : function () {
            var list = JSON.parse(sessionStorage.getItem('busy.admin.app.scroll') || '{}') || {};
            return list[document.URL] || 0;
        },

        /**
         * 初始化单页
         */
        _initSinglePage : function () {
            var me = this;

            me.$doc
                // 页面销毁前监听
                .on(busyAdmin.e.appBeforeDestroy, function () {
                    me._saveScrollState(me.$win.scrollTop());
                })

                // 路由离开事件监听
                .on(busyAdmin.e.routeBeforeLeave, function () {
                    // 来自点击才记录
                    if (me._byClick) {
                        me._saveScrollState(me.$win.scrollTop());
                        $('body,html').animate({scrollTop : 0});
                    }
                })

                // 监听应用准备完成事件
                .on(busyAdmin.e.appComplete, function (e) {
                    // 来自点击不恢复滚动条
                    if (me._byClick) {
                        me._byClick = false;
                        return;
                    }

                    var scrollTo = me._getScrollState();
                    var hash     = window.location.hash;
                    if (hash) {
                        var name   = decodeURIComponent(hash.slice(1))
                        var target = document.getElementById(name) || document.getElementsByName(name)[0]
                        if (target) {
                            //$(target).trigger('click');
                            scrollTo = $(target).offset().top
                        }
                    }

                    if (typeof scrollTo == 'number' && scrollTo > 0) {
                        me.$win.scrollTop(scrollTo)
                    }
                })


                // 拦截 form get
                .on('submit', 'form:not([data-toggle])', function (e) {
                    var $this  = $(this);
                    var method = ($this.attr('method') || '').trim().toLowerCase();
                    var action = ($this.attr('action') || '').trim();
                    if (method === 'post') {
                        return true;
                    }

                    var ignore = busyAdmin.formSubmitIgnore || [];
                    for (var i = 0; i < ignore.length; i++) {
                        var ig = ignore[i];
                        if (typeof ig === 'function' && ig.call(this, e)) {
                            return;
                        }
                    }

                    if (!action) {
                        action = document.URL;
                    }

                    busyAdmin.route.show(busyAdmin.helper.parseURL(action).path + '?' + $this.serialize());
                    return false;
                })

                // 拦截连接
                .on('click', 'a:not([data-toggle])', function (e) {
                    var ignore = busyAdmin.linkClickIgnore || [];
                    var $this  = $(this);
                    var data   = $this.data();
                    if (e.isDefaultPrevented()) {
                        return;
                    }

                    for (var i = 0; i < ignore.length; i++) {
                        var ig = ignore[i];
                        if (typeof ig === 'function' && ig.call(this, e)) {
                            return;
                        }
                    }

                    var href = $this.attr('href') || '';
                    if (!href || href === '#' || 0 === href.indexOf('javascript:')) {
                        return;
                    }

                    var path = busyAdmin.route.clickHandler(e, false);
                    if (path !== false) {
                        me._byClick = true;
                        busyAdmin.route.show(path);
                        return false;
                    }
                });

            busyAdmin.route.base(busyAdmin.root());
            busyAdmin.route('*', function (ctx, next) {
                // 取消上次未完成请求
                if (me._singleTask) {
                    me._singleAbort = true;
                    me._singleTask.abort();
                    me._singleTask = null;
                }

                // 初始化
                if (ctx.init) {
                    return;
                }

                // 关闭导航
                me.closeSideNav();

                // 恢复iframe
                if (ctx.hash && 0 === ctx.hash.indexOf('frames!')) {
                    me.setNavActive(ctx.hash.substr(7), 'resumeFrames');
                    return;
                }

                // 请求页面内容
                me.$contentMask.addClass('active');
                me._singleTask = busyAdmin
                    .request(busyAdmin.root() + busyAdmin.helper.ltrim(ctx.path, '/'))
                    .parse('html')
                    .cache(false)
                    .addHeader('Busy-Admin-Plugin', 'SinglePage')
                    .pending(false)
                    .before(function (jQueryXhr, ajaxSettings) {
                        // 触发请求前事件
                        if (false === busyAdmin.helper.execCallback(null, document, [jQueryXhr, ajaxSettings], me.$doc, busyAdmin.e.appReqBefore, true, false)) {
                            return false;
                        }
                    })
                    .complete(function (response, type, xhr) {
                        me._singleTask = null;
                        me.$contentMask.removeClass('active');

                        // 触发请求完成事件
                        if (false === busyAdmin.helper.execCallback(null, document, [response, type, xhr], me.$doc, busyAdmin.e.appReqComplete, true, false)) {
                            return false;
                        }
                    })
                    .error(function (response, type, xhr) {
                        if (me._singleAbort) {
                            me._singleAbort = false;
                            return false;
                        }

                        // 触发请求失败事件
                        if (false === busyAdmin.helper.execCallback(null, document, [response, type, xhr], me.$doc, busyAdmin.e.appReqError, true, false)) {
                            return false;
                        }

                        var $iframeBox = $('<div class="iframe-content"/>');
                        var $iframe    = $('<iframe src="about:blank"/>');
                        $iframeBox.html($iframe);

                        me._renderSinglePage({content : $iframeBox}, ctx.path);

                        var iframe = $iframe.contents()[0];
                        iframe.open();
                        iframe.write(xhr.responseText || response.message);
                        iframe.close();
                        document.title = iframe.title;
                    })
                    .success(function (response, type, xhr) {
                        me.responseToHtml(response, function (html) {
                            next();

                            // 触发请求成功事件
                            if (false === busyAdmin.helper.execCallback(null, document, [response, type, xhr], me.$doc, busyAdmin.e.appReqSuccess, true, false)) {
                                return false;
                            }

                            me._renderSinglePage(me.extractContainer(html, true), ctx.path);
                        });

                        return false;
                    })
                    .exec();
            });
            busyAdmin.route({click : false});

            // 监听插件准备情况
            me._oncePluginReadyEvent();
        },

        /**
         * 在插入新页面内容之前，监听插件准备情况
         * 这个是为了解决插件未加载成功，高度可能不固定导致无法滚动到对应的位置
         * 所以，所有插件准备完成后都要触发这个事件
         * @private
         */
        _oncePluginReadyEvent : function () {
            var me         = this;
            var readyEvent = busyAdmin.e.appPluginReady + '.busy.single';
            var plugins    = [];
            me.$doc.off(readyEvent).on(readyEvent, function (e, $element, pluginName, pluginTarget) {
                plugins.push({
                    element : $element,
                    name    : pluginName,
                    target  : pluginTarget
                });
                clearTimeout(me._pluginReadyTimer);
                me._pluginReadyTimer = setTimeout(function () {
                    // 卸载掉，为了保证不会重复执行该事件
                    me.$doc.off(readyEvent);

                    me.trigger(busyAdmin.e.appComplete, [plugins]);
                }, 500);
            });
        },

        /**
         * 渲染单页内容
         * @param data
         * @param url
         * @private
         */
        _renderSinglePage : function (data, url) {
            var me        = this;
            var path      = me.getPath(url);
            var eventArgs = [data, url, path];

            // 触发渲染前事件
            if (false === busyAdmin.helper.execCallback(null, document, eventArgs, me.$doc, busyAdmin.e.appRenderBefore, true, false)) {
                return;
            }

            // 在插入新页面内容之前，清除所有聚焦控件。
            var blurFocus = $.contains(me.$contentBody, document.activeElement)
            if (blurFocus) {
                try {
                    document.activeElement.blur()
                } catch (e) {
                }
            }

            // 监听插件准备情况
            me._oncePluginReadyEvent();

            // 清理自定义数据
            busyAdmin.data = {};

            // 设置页面标题
            document.title = data.title || '';

            me.$contentIframes.removeClass('active');
            me.$contentBody.removeClass('hide');

            // 初始化
            if (data.init) {
                me.$app.html(data.init);
                me._initApp();

                if (me.isFrame) {
                    // 触发菜单点击
                    me.setNavActive(path, 'renderPage');
                }
            } else {
                // 非多标签设置面包屑
                if (!me.options.multiPage) {
                    me.$contentHeader.html(data.contentHeader || '');
                }

                // 设置页面内容
                me.$contentBody.html(data.content || '');

                // 触发菜单点击
                me.setNavActive(path, 'renderPage');
            }

            // 还原焦点
            var autofocusEl = me.$contentBody.find('input[autofocus], textarea[autofocus]').last()[0]
            if (autofocusEl && document.activeElement !== autofocusEl) {
                autofocusEl.focus()
            }

            // 触发页面渲染完成事件
            me.trigger(busyAdmin.e.appRenderSuccess, eventArgs);
            busyAdmin.helper.triggerPluginReady(me.$element, 'App', me);
        },

        /**
         * 获取PATH
         * @param {?String} url
         */
        getPath : function (url) {
            url = url || document.URL;
            if (-1 === url.indexOf('://')) {
                url = '/' + busyAdmin.helper.ltrim(url, '/');
            }

            var root  = busyAdmin.root();
            var parse = busyAdmin.helper.parseURL(url);
            var path  = 0 === parse.pathNoSuffix.indexOf(root) ? parse.pathNoSuffix.substring(root.length) : parse.pathNoSuffix;
            return busyAdmin.helper.snake(busyAdmin.helper.ltrim(path, '/'));
        },

        /**
         * 将nav设为高亮
         * @param {String} path
         * @param {String} triggerFrom
         */
        setNavActive : function (path, triggerFrom) {
            var me = this;

            // 清理只展示一次的mini菜单
            if (me.isMiniNav() && me._onceMiniNav) {
                me.setToDefaultNav();
            }
            me._onceMiniNav = false;

            // 先找正常的菜单
            var $target = me.$nav.find('[data-path="' + path + '"]');

            // 正常菜单不存在，用隐藏的菜单触发
            if ($target.length === 0) {
                $target = me.$nav.find('[data-hide-path="' + path + '"]').parent();
            }

            if ($target.length > 0) {
                $target.trigger($.Event('click', {triggerFrom : triggerFrom || 'setNavActive'}));
                me.scrollToNav();
                return;
            } else {
                me.$nav.find('.active').removeClass('active');
            }

            // 设为默认导航高亮
            if (me.data) {
                me.$headerMenu.find('[data-path="' + me.data.menu_default + '"]').trigger('click');
            }
        },

        /**
         * 滚动到高亮的导航栏位置
         */
        scrollToNav : function () {
            var me      = this;
            var $target = me.$nav.find('.is-action.active');
            if (!$target.length) {
                return;
            }

            var top    = $target.offset().top - me.$nav.offset().top + me.$nav.scrollTop();
            var height = (me.$nav.height() - $target.height()) / 2;
            me.$nav.stop().animate({
                scrollTop : top - height
            });
        },

        /**
         * 初始化框架
         * @private
         */
        _initApp : function () {
            var me = this;

            me.currentPath     = me.getPath(document.URL);
            me.$frame          = getElement(me.$app, 'frame');
            me.$loader         = getElement(me.$app, 'loader');
            me.$header         = getElement(me.$app, 'header');
            me.$headerLeft     = getElement(me.$header, 'header-left');
            me.$headerRight    = getElement(me.$header, 'header-right');
            me.$headerMenu     = getElement(me.$headerRight, 'menu');
            me.$headerBarLeft  = getElement(me.$headerRight, 'bar-left');
            me.$headerBarRight = getElement(me.$headerRight, 'bar-right');

            me.$left             = getElement(me.$app, 'left');
            me.$nav              = getElement(me.$app, 'nav');
            me.$navChild         = getElement(me.$app, 'nav-child');
            me.$content          = getElement(me.$app, 'content');
            me.$contentHeader    = getElement(me.$app, 'content-header');
            me.$contentBody      = getElement(me.$app, 'content-body');
            me.$contentIframes   = getElement(me.$app, 'content-iframes');
            me.$contentMask      = getElement(me.$app, 'content-mask');
            me.$barUsername      = getElement(me.$headerRight, 'bar-username');
            me.$barUserDropdowns = getElement(me.$headerRight, 'bar-user-dropdowns');

            // 全屏
            me.$barFullscreen     = getElement(me.$headerRight, 'bar-fullscreen');
            me.$barFullscreenWrap = me.$barFullscreen.parent('li');
            me.$barFullscreenIcon = me.$barFullscreen.find('i');

            // 刷新
            me.$barRefresh     = getElement(me.$headerRight, 'bar-refresh');
            me.$barRefreshWrap = me.$barRefresh.parent('li');
            me.$barRefreshIcon = me.$barRefresh.find('i');

            // 导航展开关闭
            me.$barControl     = getElement(me.$headerRight, 'bar-control');
            me.$barControlWrap = me.$barControl.parent('li');
            me.$barControlIcon = me.$barControl.find('i');

            me.isFrame = me.$contentBody.length > 0;
            if (!me.isFrame) {
                // 在iframe中
                if (window.self != window.top && !me.options.multiPage) {
                    var $contentHeader = getElement(me.$app, 'content-header');
                    if ($contentHeader.is('script') && window.top.busyAdmin.app) {
                        window.top.busyAdmin.app.$contentHeader.html($contentHeader.html());
                        window.top.document.title = document.title;
                    }
                }

                me.trigger(busyAdmin.e.appReady);
                me.trigger(busyAdmin.e.appReadies);
                return;
            }

            // 拦截面包屑
            me.$contentHeader.on('click', 'a', function () {
                var $this = $(this);
                var href  = $this.attr('href') || '';
                var path  = -1 !== href.indexOf('://') ? href : me.getPath(href);
                var $link = me.$nav.find('[data-path="' + path + '"]');
                if (0 === ($link.attr('target') || '').indexOf('busy_admin_iframe_')) {
                    me.setNavActive(path, 'resumeFrames');
                    return false;
                }
            });

            me.$nav
                // 导航点击
                .on('click', 'a', function (e) {
                    var $this   = $(this);
                    var isLink  = $this.hasClass('is-action');
                    var isTop   = $this.hasClass('is-top');
                    var $parent = $this.parent('li');
                    var $arrow  = $this.find('> .nav-arrow');
                    var $child  = $this.next('ul');

                    // 是连接
                    if (isLink) {
                        // 移除上一个选中
                        me.$nav.find('.active').removeClass('active');
                        $this.addClass('active');

                        // 如果上级没有展开则将其展开
                        $this.parents('ul').each(function () {
                            var $target = $(this).prev('a');
                            $target.parent('li').addClass('active');
                            if ($target.length && !$target.hasClass('open')) {
                                $target.trigger('click');
                            }
                        });

                        // 触发菜单栏高亮
                        me.$headerMenu.find('[data-id="' + $this.parents('li').last().data('id') + '"]').trigger($.Event('click', {_byNav : true}));

                        me.closeSideNav();

                        var status = me._handleIframe($this, e, false);

                        // 顶级菜单
                        if (isTop) {
                            me.$app.addClass('busy-admin-hide-nav');
                        } else {
                            me.$app.removeClass('busy-admin-hide-nav');
                        }

                        return status;
                    }

                    // 是分组
                    else {
                        e.preventDefault();

                        var path   = $this.data('path');
                        var isOpen = $this.hasClass('open');
                        if (isOpen) {
                            // 恢复的时候不往下执行
                            if (e.triggerFrom === 'resumeNav') {
                                return false;
                            }

                            $child.hide();
                            $arrow.removeClass('fa-rotate-180');
                            $this.removeClass('open');
                            $this.parents('li').each(function () {
                                if ($(this).find('> a').hasClass('open')) {
                                    return true;
                                }
                                $(this).removeClass('opened');
                            });
                            me._saveNavState(path, false);
                        } else {
                            // 保持同一个层级只有一个展开
                            if (me.options.navSingleHold && e.triggerFrom !== 'resumeNav') {
                                if (me.isMobileSize()) {
                                    $parent.parent('ul').find('> li > a.open').trigger('click');
                                } else {
                                    $parent.parent('ul').find('> li:not(.busy-admin-nav-li-1) > a.open').trigger('click');
                                }
                            }

                            $child.show();
                            $arrow.addClass('fa-rotate-180');
                            $this.addClass('open');

                            // 给上级加样式
                            $this.parents('li').each(function () {
                                if (!$(this).find('> a').hasClass('open')) {
                                    return true;
                                }
                                $(this).addClass('opened');
                            });
                            e.triggerFrom !== 'resumeNav' && me._saveNavState(path, true);
                        }
                    }

                    return false;
                })

                // 鼠标划入
                .on('mouseenter', function () {
                    if (me.isMiniNav()) {
                        clearTimeout(me._navHoverTimer);
                        me._navHoverTimer = setTimeout(function () {
                            me.$left.addClass('busy-admin-left-open');
                        }, 100);
                    }
                })

                // 鼠标划出
                .on('mouseleave', function () {
                    if (me.isMiniNav()) {
                        clearTimeout(me._navHoverTimer);
                        me._navHoverTimer = setTimeout(function () {
                            me.$left.removeClass('busy-admin-left-open');
                        }, 100);
                    }
                });

            // 移动端点击遮罩关闭侧边栏
            me.$contentMask.on('click', function () {
                me.closeSideNav();
            });

            // 全屏切换
            me.$barFullscreen.on('click', function () {
                me.isFullscreen() ? me.exitFullscreen() : me.requestFullscreen();
            });

            // 刷新
            me.$barRefresh.on('click', function () {
                busyAdmin.route.reload();
            });

            // 展开关闭切换
            me.$barControl.on('click', function () {
                if (!me.isMobileSize()) {
                    if (me.isMiniNav()) {
                        me.setToDefaultNav();
                    } else {
                        me.setToMiniNav();
                    }
                } else {
                    if (me.sideIsOpen()) {
                        me.closeSideNav();
                    } else {
                        me.openSideNav();
                    }
                }
            });

            // TODO 多标签页
            if (me.options.multiPage) {
                me.tabList       = [];
                me.$multiTabsRow = $('<div class="row"/>');
                me.$multiTabs    = $('<ul class="nav nav-tabs"/>').append('<li class="active"><a href="' + busyAdmin.root() + '">首页</a></li>');
                me.$contentHeader.html(me.$multiTabs);
            }

            me.loadInfo();

            // 触发应用准备完成事件
            me.trigger(busyAdmin.e.appReady);
        },

        /**
         * 处理Iframe层
         * @param $this
         * @param e
         * @param menu
         * @return {boolean}
         * @private
         */
        _handleIframe : function ($this, e, menu) {
            var me = this;

            // 打开iframe
            var target = $this.attr('target') || '';
            var href   = $this.attr('href') || '';
            if (0 === target.indexOf('busy_admin_iframe_') && href) {
                // 隐藏所有已激活的iframe
                me.$contentIframes.find('.active').removeClass('active');

                // 创建iframe
                var $iframe    = $('<iframe id="' + target + '" src="' + href + '"/>');
                var isExternal = -1 !== href.indexOf('://');
                me.$contentIframes.find('#' + target).remove();
                me.$contentIframes.append($iframe);

                // 激活当前iframe
                $iframe.addClass('active');
                me.$contentIframes.addClass('active');
                me.$contentBody.addClass('hide');

                // 外部连接面包屑和标题
                if (isExternal && !me.options.multiPage) {
                    var breadcrumb = '<ul class="breadcrumb"><li><i class="fa fa-home"></i> <a href="' + busyAdmin.root() + '">首页</a></li>';
                    var title;
                    if (menu) {
                        title = $this.find('> span').text();
                        breadcrumb += '<li><a href="' + $this.attr('href') + '">' + title + '</a></li>';
                    } else {
                        title = $this.find('> .nav-name').text();
                        $($this.parents('li').get().reverse()).each(function () {
                            var $that    = $(this);
                            var $thatA   = $that.find('> a');
                            var thatName = $thatA.find('> .nav-name').text();
                            breadcrumb += '<li>';
                            if ($thatA.hasClass('is-action')) {
                                breadcrumb += '<a href="' + $thatA.attr('href') + '">' + thatName + '</a>';
                            } else {
                                breadcrumb += '<span>' + thatName + '</span>';
                            }
                            breadcrumb += '</li>';
                        });
                    }
                    breadcrumb += '</ul>';
                    document.title = title + me.options.pageTitleSuffix;
                    me.$contentHeader.html(breadcrumb);
                }

                // 不是恢复状态，
                // 则写入浏览器历史记录
                if (e.triggerFrom !== 'resumeFrames') {
                    // 计算hash
                    var frameHash = href;
                    if (!isExternal) {
                        frameHash = me.getPath(href);
                    }

                    busyAdmin.route.show(busyAdmin.root() + '#frames!' + frameHash, null, false);
                }

                return false;
            }

            return true;
        },

        /**
         * 加载应用信息
         */
        loadInfo : function () {
            var me  = this;
            me.data = null;
            busyAdmin
                .request(me.options.url)
                .addHeader('Busy-Admin-Plugin', 'AppInfo')
                .pending(false)
                .error(function () {
                    return false;
                })
                .success(function (response, type, xhr) {
                    var res     = response.result || {};
                    me.data     = res;
                    me.username = res.username || 'User';
                    me.userId   = res.user_id || '0';

                    me.$barUsername.text(me.username);

                    me._renderMenu(res.menu_list || []);
                    me._renderNav(res.menu_list || []);
                    me._renderUserDropdowns(res.user_dropdowns || []);

                    var state = me.options.navSingleHold ? {} : me._getNavState() || {};
                    for (var stateKey in state) {
                        if (!state[stateKey]) {
                            continue;
                        }

                        me.$nav.find('[data-path="' + stateKey + '"]').not('.open').trigger($.Event('click', {triggerFrom : 'resumeNav'}));
                    }

                    // 恢复iframe
                    var parse = busyAdmin.helper.parseURL(document.URL);
                    if (parse.hash && 0 === parse.hash.indexOf('frames!')) {
                        me.setNavActive(parse.hash.substr(7), 'resumeFrames');
                    } else {
                        me.setNavActive(me.getPath(document.URL), 'loadInfo');
                    }

                    if (me.options.navMode) {
                        me.setToMiniNav();
                    } else {
                        me.setToDefaultNav();
                    }

                    me.trigger(busyAdmin.e.appReadies);
                    me.hideLoader();

                    return false;
                })
                .exec();
        },

        showLoader : function () {
            this.$loader.fadeIn();
        },

        hideLoader : function () {
            this.$loader.fadeOut();
        },

        /**
         * 是否缩小菜单
         * @return {jQuery}
         */
        isMiniNav : function () {
            return this.$app && this.$app.hasClass('busy-admin-mini-nav');
        },

        /**
         * 导航栏是否打开
         */
        sideIsOpen : function () {
            return this.$frame.hasClass('busy-admin-nav-open');
        },

        /**
         * 解析响应结果
         * @private
         */
        _parseResult : function (result) {
            if (typeof result === 'string') {
                try {
                    result = JSON.parse(result);
                } catch (e) {
                    console.error('解析数据失败', e);

                    return {
                        message : '解析数据失败',
                        status  : false,
                        code    : 0,
                        result  : {},
                        url     : ''
                    };
                }
            }

            result.status = result.code === 1;
            if (result.hasOwnProperty('traces')) {
                var params;
                if (this.type !== 'POST') {
                    params = busyAdmin.helper.parseURL(this.url).params;
                } else {
                    params = busyAdmin.helper.parseURL('?' + this.data).params;
                }

                /*console.groupCollapsed('TRACE ' + this.type + ' - ' + this.url);
                 console.log('请求网址: ', this.url);
                 console.log('请求方式: ', this.type);
                 console.log('请求头:　 ', this.headers);
                 console.log('请求参数: ', params);
                 console.log('响应结果: ', result);
                 console.log('解析结果: ', data);
                 console.groupEnd();*/
            }

            return result;
        },

        /**
         * 初始化响应
         */
        _initResponse : function () {
            var me = this;

            // 未登录错误代码
            busyAdmin.response.bindCode(me.options.needLoginCode, function (result) {
                busyAdmin.dialog.tipError(result.message);
                busyAdmin.route.show(result.url);

                return false;
            });

            // 设置数据解析器
            busyAdmin.response.setParse(function (result) {
                return me._parseResult(result);
            });
        },

        /**
         * 渲染大菜单
         * @param {[Object]} data
         */
        _renderMenu : function (data) {
            var me   = this;
            var html = '';

            data.map(function (item) {
                var parse = me._parseNavItem(item);
                html += '<li class="' + (item.path === me.data.menu_default && !me.currentPath ? 'active' : '') + '"><a href="' + parse.url + '" data-id="' + item.id + '" data-path="' + parse.path + '" target="' + parse.target + '" class="' + (item.child.length > 0 ? '' : 'is-top') + '"><i class="' + item.icon + '"></i> <span>' + item.name + '</span></a></li>';
            });

            me.$headerMenuNav    = $('<ul class="nav navbar-nav"/>').html(html);
            me.$headerMenuLeft   = $('<a class="left-arrow" href="javascript:void(0)"/>').append('<i class="fa fa-angle-double-left" />').hide();
            me.$headerMenuRight  = $('<a class="right-arrow" href="javascript:void(0)"/>').append('<i class="fa fa-angle-double-right" />').hide();
            me.$headerMenuScroll = $('<div class="nav-scroll"/>').append(me.$headerMenuLeft).append(me.$headerMenuNav).append(me.$headerMenuRight);
            me.$headerMenu.html(me.$headerMenuScroll);

            // 菜单切换
            me.$headerMenuNav.on('click', 'a', function (e) {
                var $this = $(this);
                var id    = $this.data('id');
                var $li   = $this.closest('li');

                me.$headerMenuNav.find('li.active').removeClass('active');
                $li.addClass('active');

                me.$nav.find('> ul > li').addClass('hide');
                me.$nav.find('[data-id="' + id + '"]').removeClass('hide');

                // 居中当前项
                var offsetWidth = me.$headerMenuScroll.outerWidth(false);
                var offsetLeft  = $li.position().left;
                me.$headerMenuScroll.stop().animate({
                    scrollLeft : offsetLeft - (offsetWidth / 2) + $li.outerWidth(true) / 2
                });

                // 通过nav触发则不处理
                if (e._byNav) {
                    return false;
                }

                if ($this.hasClass('is-top')) {
                    me.$app.addClass('busy-admin-hide-nav');
                } else {
                    me.$app.removeClass('busy-admin-hide-nav');
                }

                return me._handleIframe($this, e, true);
            });

            me.$headerMenuLeft.on('click', function () {
                if ($(this).hasClass('disabled')) {
                    return;
                }

                var offset = me.$headerMenuScroll[0].clientWidth / 2;
                me.$headerMenuScroll.stop().animate({
                    scrollLeft : me.$headerMenuScroll.scrollLeft() - offset
                });
            });

            me.$headerMenuRight.on('click', function () {
                if ($(this).hasClass('disabled')) {
                    return;
                }

                var offset = me.$headerMenuScroll[0].clientWidth / 2;
                me.$headerMenuScroll.stop().animate({
                    scrollLeft : me.$headerMenuScroll.scrollLeft() + offset
                });
            });

            me.$headerMenuScroll.on('scroll', function () {
                var that  = this;
                var $this = $(this);
                clearTimeout(me._headerMenuScrollTimer);
                me._headerMenuScrollTimer = setTimeout(function () {
                    var value = $this.scrollLeft();
                    if (value <= 0) {
                        me.$headerMenuLeft.addClass('disabled');
                    } else {
                        me.$headerMenuLeft.removeClass('disabled');
                    }

                    if (value + that.clientWidth >= that.scrollWidth) {
                        me.$headerMenuRight.addClass('disabled');
                    } else {
                        me.$headerMenuRight.removeClass('disabled');
                    }
                }, 20);
            });

            me._menuReady = true;
            me._computeMenu();
        },

        /**
         * 计算菜单
         */
        _computeMenu : function () {
            var me = this;
            if (!me.isFrame || !me._menuReady) {
                return;
            }

            var width = me.$win.width();

            // 左侧品牌宽度
            var leftWidth       = me.$headerLeft.outerWidth(false);
            var leftMarginLeft  = Math.abs(busyAdmin.helper.float(me.$headerLeft.css('margin-left').replace('px', '')));
            var leftMarginRight = Math.abs(busyAdmin.helper.float(me.$headerLeft.css('margin-right').replace('px', '')));
            leftWidth           = leftWidth + leftMarginLeft + leftMarginRight;

            // 左侧工具栏宽度
            var barLeftWidth       = me.$headerBarLeft.outerWidth(false);
            var barLeftMarginLeft  = Math.abs(busyAdmin.helper.float(me.$headerBarLeft.css('margin-left').replace('px', '')));
            var barLeftMarginRight = Math.abs(busyAdmin.helper.float(me.$headerBarLeft.css('margin-right').replace('px', '')));
            barLeftWidth           = barLeftWidth + barLeftMarginLeft + barLeftMarginRight;

            // 右侧工具栏宽度
            var barRightWidth  = me.$headerBarRight.outerWidth(false);
            var barMarginLeft  = Math.abs(busyAdmin.helper.float(me.$headerBarRight.css('margin-left').replace('px', '')));
            var barMarginRight = Math.abs(busyAdmin.helper.float(me.$headerBarRight.css('margin-right').replace('px', '')));
            barRightWidth      = barRightWidth + barMarginLeft + barMarginRight;

            // 菜单栏内容宽度
            var scrollWidth = width - barLeftWidth - barRightWidth - leftWidth;
            var navWidth    = me.$headerMenuNav.outerWidth(true);
            if (navWidth > scrollWidth) {
                me.$headerMenuLeft.show();
                me.$headerMenuRight.show();
                me.$headerMenuScroll.addClass('show-scroll');
            } else {
                me.$headerMenuLeft.hide();
                me.$headerMenuRight.hide();
                me.$headerMenuScroll.removeClass('show-scroll');
            }

            me.$headerMenu.css('max-width', scrollWidth + 'px');
            me.$headerMenuScroll.trigger('scroll');
        },

        /**
         * 渲染用户下拉菜单
         * @param data
         * @private
         */
        _renderUserDropdowns : function (data) {
            var me   = this;
            var html = '';
            data.map(function (item) {
                if (item.type === 'divider') {
                    html += '<li class="divider"></li>';
                } else {
                    var attr  = item.attr || {};
                    var attrs = '';
                    for (var attrKey in attr) {
                        attrs += attrKey + "='" + attr[attrKey] + "' ";
                    }
                    html += '<li><a href="' + (item.href || 'javascript:void(0);') + '"' + attrs + '><i class="' + (item.icon || '') + '"></i> ' + (item.text || '') + '</a></li>';
                }
            });
            me.$barUserDropdowns.html(html);
        },

        /**
         * 渲染菜单
         * @param {[Object]} data 数据
         * @param {number} level 层级
         */
        _renderNav : function (data, level) {
            level    = level || 1;
            var me   = this;
            var html = '<ul class="busy-admin-nav-ul-' + level + '">';

            data.map(function (item) {
                var child     = item.child || [];
                var parse     = me._parseNavItem(item);
                var hasChild  = child.length > 0;
                var liClasses = ['busy-admin-nav-li-' + level];
                var aClasses  = [];
                var hiddens   = '';

                // 标记第一级菜单
                if (level == 1) {
                    // 是否显示该分组
                    if (me.data.menu_default !== item.path) {
                        liClasses.push('hide')
                    }
                    aClasses.push('is-top');
                }

                // 菜单类型
                aClasses.push(hasChild ? 'has-child' : 'is-action');

                // 菜单高亮
                if (item.path === me.currentPath) {
                    aClasses.push('active');
                }

                // 隐藏的下级菜单，用于高亮使用
                (item.hides || []).map(function (vo) {
                    hiddens += '<abbr data-hide-path="' + busyAdmin.helper.snake(vo.path) + '" class="hide"></abbr>'
                });

                html += '<li class="' + liClasses.join(' ') + '" data-id="' + item.id + '">';
                html += '<a class="' + aClasses.join(' ') + '" data-path="' + parse.path + '" href="' + parse.url + '" target="' + parse.target + '"><i class="nav-arrow fa fa-angle-down"></i> <i class="nav-icon ' + item.icon + '"></i> <span class="nav-name">' + item.name + '</span>' + hiddens + '</a>';
                if (hasChild) {
                    html += me._renderNav(child, level + 1);
                }
                html += '</li>';
            });
            html += '</ul>';

            if (level > 1) {
                return html;
            } else {
                me.$nav.html(html);
                me.$nav.css({
                    marginRight : -busyAdmin.helper.getScrollbarWidth() + 'px'
                });
            }
        },

        /**
         * 处理导航数据
         * @param item
         * @return {{url: string, target: string, path: string}}
         * @private
         */
        _parseNavItem : function (item) {
            var url    = -1 === item.url.indexOf('://') ? busyAdmin.root() + busyAdmin.helper.ltrim(item.url, '/') : item.url;
            var target = item.target;
            var path   = busyAdmin.helper.snake(item.path);
            if (target === '_blank') {
                return {
                    url    : url,
                    target : target
                };
            }

            if (!item.url || (item.child || []).length > 0) {
                url = 'javascript:void(0)';
            }

            // 顶级菜单默认访问连接
            if (item.top_url && !item.parent_path) {
                url = busyAdmin.root() + busyAdmin.helper.ltrim(item.top_url, '/');
            }

            if (target === 'iframe') {
                target = 'busy_admin_iframe_' + item.id;
            }

            return {
                url    : url,
                target : target,
                path   : path
            };
        },

        /**
         * 获取内容区域距离顶部的高度
         * @return {{target: jQuery, width: number, top: number, left: number, height: number, paddingLeft: number, paddingRight: number, paddingTop: number, paddingBottom: number}}
         */
        getContentFrame : function () {
            var me            = this;
            var $content      = me.isFrame ? me.$contentBody : me.$app;
            var paddingTop    = busyAdmin.helper.float($content.css('paddingTop').replace('px', ''));
            var paddingBottom = busyAdmin.helper.float($content.css('paddingBottom').replace('px', ''));
            var paddingLeft   = busyAdmin.helper.float($content.css('paddingLeft').replace('px', ''));
            var paddingRight  = busyAdmin.helper.float($content.css('paddingRight').replace('px', ''));
            var offset        = $content.offset();
            var height        = me.$win.height() - offset.top - paddingTop - paddingBottom;
            var width         = $content.outerWidth(true) - paddingLeft - paddingRight;

            return {
                target        : $content,
                height        : height,
                width         : width,
                top           : offset.top - (me.isMobileSize() && me.$contentHeader.length > 0 ? me.$contentHeader.outerHeight() : 0),
                left          : offset.left,
                paddingLeft   : paddingLeft,
                paddingRight  : paddingRight,
                paddingTop    : paddingTop,
                paddingBottom : paddingBottom
            }
        },

        /**
         * 验证jQuery节点是否在content下
         * @param {jQuery} $element
         * @return {boolean}
         */
        isInContent : function ($element) {
            return $element.closest('[data-busy-id="' + this.$contentBody.attr('data-busy-id') + '"]').length > 0;
        },

        /**
         * 分析页面内容
         * @param data
         * @param isSystem
         * @return {{title: string, appTitle: string, frame: boolean, content: $, contentHeader: $, init: $}}
         */
        extractContainer : function (data, isSystem) {
            var me    = this;
            var obj   = {};
            var $body = $(parseHTML(data.match(/<body[^>]*>([\s\S.]*)<\/body>/i)[0]))
            var head  = data.match(/<head[^>]*>([\s\S.]*)<\/head>/i)
            var $head = head != null ? $(parseHTML(head[0])) : $body

            if ($body.length === 0) {
                return obj;
            }

            if (isSystem) {
                // 判断请求内容是单页还是框架
                if (findElement($body, 'content-body').length > 0) {
                    // 当前不是框架则变为框架
                    if (!me.isFrame) {
                        obj.init  = findElement($body, 'app').first().children();
                        obj.frame = true;
                    }
                } else {
                    // 当前是框架则变为页面
                    obj.init  = findElement($body, 'app').first().children();
                    obj.frame = false;
                }
            }

            var $title   = findAll($head, 'title').last();
            obj.title    = $.trim($title.text() || '');
            obj.appTitle = $.trim($title.data('title') || '');

            // 内容包涵title
            var $bodyTitle = $body.find('title').last();
            if ($bodyTitle.length) {
                obj.appTitle = $.trim($bodyTitle.text() || '');
            }

            obj.content       = findElement($body, 'content-body').first().children();
            obj.contentHeader = findElement($body, 'content-header').first().children();
            if (obj.content.length > 0) {
                // 删除title标签
                obj.content = obj.content.not(function () {
                    return $(this).is('title')
                })
                obj.content.find('title').remove();
            }

            return obj
        },

        /**
         * 响应结果转HTML
         * @param {busyAdmin.BusyAdminResponseResult} response
         * @param {Function} callback
         */
        responseToHtml : function (response, callback) {
            var me = this;
            try {
                // 尝试内容转JSON
                busyAdmin.response.parse(me._parseResult(JSON.parse(response.result)), null, function (json, type) {
                    busyAdmin.dialog.tipError('返回内容异常');
                    console.warn('返回内容不是HTML格式，请检查服务端代码');
                }, function (json, type) {
                    busyAdmin.dialog.tipError(json.message);
                });
            } catch (e) {
                callback.call(me, response.result);
            }
        },

        /**
         * 进入全屏
         */
        requestFullscreen : function () {
            var el  = document.documentElement;
            var rfs = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullScreen;
            if (rfs) {
                rfs.call(el);
                this._changeFullState(true);
            } else if (typeof window.ActiveXObject !== "undefined") {
                //IE浏览器，模拟按下F11全屏
                var wscript = new ActiveXObject("WScript.Shell");
                if (wscript != null) {
                    wscript.SendKeys("{F11}");
                    this._changeFullState(true);
                }
            }
        },

        /**
         * 退出全屏
         */
        exitFullscreen : function () {
            var el  = document;
            var cfs = el.cancelFullScreen || el.webkitCancelFullScreen || el.mozCancelFullScreen || el.exitFullScreen;
            if (cfs) {
                cfs.call(el);
                this._changeFullState(false);
            } else if (typeof window.ActiveXObject !== "undefined") {
                //IE浏览器，模拟按下F11键退出全屏
                var wscript = new ActiveXObject("WScript.Shell");
                if (wscript != null) {
                    wscript.SendKeys("{F11}");
                    this._changeFullState(false);
                }
            }
        },

        /**
         * 判断是否全屏
         */
        isFullscreen : function () {
            return this.$barFullscreenWrap.hasClass('active');
        },

        /**
         * 切换全屏状态
         * @private
         */
        _changeFullState : function (status) {
            if (status) {
                this.$barFullscreenWrap.addClass('active');
                this.$barFullscreenIcon.removeClass('bicon-full-screen').addClass('bicon-shrink-screen');
            } else {
                this.$barFullscreenWrap.removeClass('active');
                this.$barFullscreenIcon.addClass('bicon-full-screen').removeClass('bicon-shrink-screen');
            }
        },

        /**
         * 获取用户ID
         * @return {number}
         */
        getUserId : function () {
            return this.getData().user_id || 0;
        },

        /**
         * 获取用户名
         * @return {string}
         */
        getUsername : function () {
            return this.getData().username || '';
        },

        /**
         * 获取用户信息
         * @return {{}}
         */
        getUserInfo : function () {
            return this.getData().user || {};
        },

        /**
         * 获取全局数据
         * @return {{}}
         */
        getData : function () {
            return this.data || {};
        },

        /**
         * 获取自定义全局数据
         * @return {{}}
         */
        getUseData : function () {
            return this.getData().data || {};
        },

        /**
         * 触发全局事件
         * @param {string} event
         * @param {?[]} args
         * @return {App}
         */
        trigger : function (event, args) {
            busyAdmin.helper.execCallback(null, document, args || [], this.$doc, event);
            return this;
        },

        /**
         * 监听全局事件
         * @param {string} event
         * @param {Function} callback
         * @return {App}
         */
        on : function (event, callback) {
            this.$doc.on(event, callback);
            return this;
        },

        /**
         * 监听一次全局事件
         * @param event
         * @param callback
         * @return {App}
         */
        once : function (event, callback) {
            this.$doc.one(event, callback);
            return this;
        },

        /**
         * 卸载监听全局事件
         * @param event
         * @return {App}
         */
        off : function (event) {
            this.$doc.off(event);
            return this;
        },

        /**
         * 退出登录
         * @private
         * @param {{}} response
         */
        _outLogin : function (response) {
            busyAdmin.app.data = null;
            busyAdmin.app.trigger(busyAdmin.e.appLoginOuted, [response]);
            busyAdmin.route.show(response.url);
        },

        /**
         * 登录成功
         * @param response
         * @private
         */
        _loginSuccess : function (response) {
            busyAdmin.app.trigger(busyAdmin.e.appLoginSucceed, [response]);
            busyAdmin.route.show(response.url);
        },

        /**
         * 是否登录
         * @return {boolean}
         */
        isLogin : function () {
            return this.data != null;
        },

        /**
         * 清理缓存
         */
        clearCache : function () {
            for (var key in localStorage) {
                if (0 === key.indexOf('busy.admin.')) {
                    localStorage.removeItem(key);
                }
            }
            for (key in sessionStorage) {
                if (0 === key.indexOf('busy.admin.')) {
                    sessionStorage.removeItem(key);
                }
            }

            busyAdmin.app.trigger(busyAdmin.e.appClearCache);
        },
    };

    App.DEFAULTS = {
        navSingleHold     : false, // 是否保持同级导航只有一个展开
        navMode           : false, // 是否默认为mini菜单
        errorImgUrl       : '', // 错误占位图地址
        multiPage         : false, // TODO 是否启用多标签页面
        scrollCacheLength : 50, // 滚动记录长度
        url               : '', // 框架信息地址
        pageTitleSuffix   : '', // 页面标题后缀
        needLoginCode     : 3020001, // 需要登录错误代码
        runtime           : null, // 自定义APP运行时回调
    };

    busyAdmin.app = new App();

    busyAdmin.regSugar('app', function (element, method, result, args) {
        busyAdmin.app[method].apply(busyAdmin.app, args);
    });
})(jQuery, busyAdmin);