<?php
declare (strict_types = 1);

namespace BusyPHP\command;

use BusyPHP\App;
use BusyPHP\helper\FileHelper;
use BusyPHP\interfaces\PluginCommandInitializeInterface;
use think\console\Command;
use think\console\Input;
use think\console\input\Option;
use think\console\Output;
use think\Container;
use think\exception\ClassNotFoundException;
use think\exception\FileException;
use Throwable;
use ZipArchive;

/**
 * Composer安装指令
 * @author busy^life <busy.life@qq.com>
 * @copyright (c) 2015--2021 ShanXi Han Tuo Technology Co.,Ltd. All rights reserved.
 * @version $Id: 2020/6/6 下午9:49 下午 Install.php $
 * @property App $app
 */
class InstallCommand extends Command
{
    /**
     * @var array
     */
    protected $list;
    
    
    protected function configure()
    {
        // 指令配置
        $this->setName('bp:install')
            ->addOption('dev', 'd', Option::VALUE_OPTIONAL, 'composer.json path', null)
            ->setDescription('BusyPHP Framework composer install command');
    }
    
    
    protected function execute(Input $input, Output $output)
    {
        // 初始化
        if (!$this->init()) {
            return;
        }
        
        // 解压文件
        if (!$this->extract()) {
            return;
        }
        
        
        // 初始化插件
        if (!$this->pluginInitialize()) {
            return;
        }
        
        $output->info("BusyPHP V{$this->app->getFrameworkVersion()} init complete.");
    }
    
    
    /**
     * 初始化
     * @return bool
     */
    protected function init()
    {
        $serviceFile = $this->app->getRootPath() . 'vendor' . DIRECTORY_SEPARATOR . 'busyphp_services.php';
        $services    = [];
        
        // 将BusyPHP框架支持的扩展 services 放进去
        $packages = $this->getPackages();
        foreach ($packages as $package) {
            foreach ($package['services'] ?? [] as $service) {
                $services[] = $service;
            }
        }
        
        $header  = '// This file is automatically generated at:' . date('Y-m-d H:i:s') . PHP_EOL . 'declare (strict_types = 1);' . PHP_EOL;
        $content = '<?php ' . PHP_EOL . $header . "return " . var_export($services, true) . ';';
        FileHelper::write($serviceFile, $content);
        
        return true;
    }
    
    
    /**
     * 解压文件
     * @return bool
     */
    protected function extract() : bool
    {
        $packages = $this->getPackages();
        $extracts = [];
        foreach ($packages as $package) {
            foreach ($package['extract'] ?? [] as $source => $to) {
                $extracts[] = [
                    'name'   => $package['name'],
                    'source' => $source,
                    'to'     => $to
                ];
            }
        }
        
        foreach ($extracts as $r) {
            if (!$this->doExtract($r['name'] . DIRECTORY_SEPARATOR . $r['source'], $r['to'])) {
                return false;
            }
        }
        
        return true;
    }
    
    
    /**
     * 执行解压
     * @param string $source
     * @param string $toDir
     * @return bool
     */
    private function doExtract($source, $toDir) : bool
    {
        $sourceFile = $this->app->getRootPath() . 'vendor/' . $source;
        $toDir      = trim($toDir, '/');
        $lockFile   = $toDir . DIRECTORY_SEPARATOR . md5(str_replace('\\', '/', $source)) . '.lock';
        if (is_file($lockFile)) {
            return true;
        }
        
        try {
            if (!class_exists('ZipArchive')) {
                throw new ClassNotFoundException('You need to enable the "ZipArchive" extension to continue the installation');
            }
            
            $this->output->info(sprintf('To start unpacking the file: %s to %s', $source, $toDir));
            $zip = new ZipArchive();
            $res = $zip->open($sourceFile);
            if (true !== $res) {
                throw new FileException(sprintf('Failed to open file is %s', $source));
            }
            
            if (!$res = $zip->extractTo($this->app->getRootPath() . $toDir)) {
                $zip->close();
                
                throw new FileException(sprintf('Failed to decompress the file is %s', $source));
            }
            $zip->close();
            
            FileHelper::write($lockFile, "本文件为系统解压文件 {$source} 至 {$toDir} 后自动生成的防止重复解压锁，删除后重新执行Composer将会覆盖 {$toDir} 下的文件");
            
            $this->output->info(sprintf('Unzip file to %s succeeded!', $toDir));
            
            return true;
        } catch (Throwable $e) {
            $this->output->error($e->getMessage());
            
            return false;
        }
    }
    
    
    /**
     * 初始化插件
     */
    protected function pluginInitialize() : bool
    {
        $packages    = $this->getPackages();
        $initializes = [];
        foreach ($packages as $package) {
            foreach ($package['initializes'] ?? [] as $initialize) {
                $initializes[] = $initialize;
            }
        }
        
        foreach ($initializes as $initialize) {
            if (!$initialize || !class_exists($initialize)) {
                continue;
            }
            
            try {
                $obj = Container::getInstance()->make($initialize, [], true);
                if ($obj instanceof PluginCommandInitializeInterface) {
                    $obj->onPluginCommandInitialize($this->output);
                }
            } catch (Throwable $e) {
                $this->output->error(sprintf('Failed to initialize plugin "%s", %s', $initialize, $e->getMessage()));
                
                return false;
            }
        }
        
        return true;
    }
    
    
    /**
     * 获取Composer项目列表
     * @return array
     */
    private function getPackages() : array
    {
        if (isset($this->list)) {
            return $this->list;
        }
        
        $this->list = self::packages($this->input->getOption('dev') ?: '');
        
        return $this->list;
    }
    
    
    /**
     * 获取busyphp插件列表
     * @param string|null $devComposerFile 开发文件
     * @return array
     */
    public static function packages(?string $devComposerFile = null) : array
    {
        $app      = App::getInstance();
        $packages = [];
        if (is_file($path = $app->getRootPath() . 'vendor/composer/installed.json')) {
            $packages = json_decode(@file_get_contents($path) ?: '', true) ?: [];
        }
        
        // Compatibility with Composer 2.0
        if (isset($packages['packages'])) {
            $packages = $packages['packages'];
        }
        
        if ($devComposerFile) {
            if (!is_file($devComposerFile)) {
                $devComposerFile = $app->getRootPath() . $devComposerFile;
            }
            
            $packages[] = json_decode(@file_get_contents($devComposerFile) ?: '', true) ?: [];
        }
        
        $list = [];
        foreach ($packages as $package) {
            if (!isset($package['extra']['busyphp'])) {
                continue;
            }
            
            $item                = $package['extra']['busyphp'];
            $item['services']    = $item['services'] ?? [];
            $item['initializes'] = $item['initializes'] ?? [];
            $item['extract']     = $item['extract'] ?? [];
            $item['config']      = $item['config'] ?? [];
            $item['manager']     = $item['manager'] ?? [];
            $item['name']        = $package['name'] ?? '';
            $item['description'] = $package['description'] ?? '';
            $item['authors']     = $package['authors'] ?? [];
            $item['keywords']    = $package['keywords'] ?? [];
            $item['homepage']    = $package['homepage'] ?? '';
            $list[]              = $item;
        }
        
        return $list;
    }
}
