<?php
declare (strict_types = 1);

namespace BusyPHP\command;

use BusyPHP\helper\file\File;
use think\console\Command;
use think\console\Input;
use think\console\Output;
use think\Exception;
use ZipArchive;

/**
 * Composer安装指令
 * @author busy^life <busy.life@qq.com>
 * @copyright (c) 2015--2019 ShanXi Han Tuo Technology Co.,Ltd. All rights reserved.
 * @version $Id: 2020/6/6 下午9:49 下午 Install.php $
 */
class Install extends Command
{
    protected function configure()
    {
        // 指令配置
        $this->setName('busyphp_install')->setDescription('BusyPHP Framework composer install command');
    }
    
    
    protected function execute(Input $input, Output $output)
    {
        // 初始化
        if (!$this->init()) {
            return;
        }
        
        // 解压文件
        if (!$this->extract()) {
            return;
        }
        
        // 安装配置文件
        if (!$this->moveConfig()) {
            return;
        }
        
        $message = '';
        if (!is_file($this->app->getRootPath() . DIRECTORY_SEPARATOR . 'public' . DIRECTORY_SEPARATOR . 'install' . DIRECTORY_SEPARATOR . 'install.lock')) {
            $message = '，请访问: http://您的域名/general/install/index.html 按照提示安装数据库.';
        }
        
        $output->writeln("<info>安装完成{$message}</info>");
    }
    
    
    /**
     * 初始化
     * @return bool
     */
    protected function init()
    {
        $this->output->writeln('<info>开始初始化 BusyPHP...</info>');
        $serviceFile = $this->app->getRootPath() . 'vendor/busyphp_services.php';
        $services[]  = [];
        
        // 将BusyPHP框架支持的扩展 services 放进去
        $packages = $this->getPackages();
        foreach ($packages as $package) {
            if (!empty($package['extra']['busyphp']['services'])) {
                $mServices = is_array($package['extra']['busyphp']['services']) ? $package['extra']['busyphp']['services'] : [];
                foreach ($mServices as $service) {
                    $services[] = $services;
                }
            }
        }
        
        $header  = '// This file is automatically generated at:' . date('Y-m-d H:i:s') . PHP_EOL . 'declare (strict_types = 1);' . PHP_EOL;
        $content = '<?php ' . PHP_EOL . $header . "return " . var_export($services, true) . ';';
        file_put_contents($serviceFile, $content);
        $this->output->writeln('<info>初始化 BusyPHP 完成.</info>');
        
        return true;
    }
    
    
    /**
     * 解压文件
     * @return bool
     */
    protected function extract()
    {
        $packages = $this->getPackages();
        $extracts = [];
        foreach ($packages as $package) {
            if (!empty($package['extra']['busyphp']['extract'])) {
                $mExtracts = is_array($package['extra']['busyphp']['extract']) ? $package['extra']['busyphp']['extract'] : [];
                foreach ($mExtracts as $source => $to) {
                    $extracts[] = [
                        'name'   => $package['name'],
                        'source' => $source,
                        'to'     => $to
                    ];
                }
            }
        }
        
        foreach ($extracts as $r) {
            if (!$this->doExtract($r['name'] . DIRECTORY_SEPARATOR . $r['source'], $r['to'])) {
                return false;
            }
        }
        
        return true;
    }
    
    
    /**
     * 执行解压
     * @param string $source
     * @param string $toDir
     * @return bool
     */
    private function doExtract($source, $toDir)
    {
        $sourceFile = $this->app->getRootPath() . 'vendor/' . $source;
        $toDir      = trim($toDir, '/');
        $lockFile   = $toDir . DIRECTORY_SEPARATOR . md5($source) . '.lock';
        if (is_file($lockFile)) {
            $this->output->warning("文件: {$source} 已存在, 不进行解压");
            
            return true;
        }
        
        try {
            if (!class_exists('ZipArchive')) {
                throw new Exception('PHP需要安装ZipArchive扩展才能继续安装');
            }
            
            $this->output->info("开始解压文件: {$source} 至 {$toDir}");
            $zip = new ZipArchive();
            $res = $zip->open($sourceFile);
            if (true !== $res) {
                throw new Exception("打开文件失败: {$source}");
            }
            
            if (!$res = $zip->extractTo($this->app->getRootPath() . $toDir)) {
                $zip->close();
                
                throw new Exception("解压文件失败: {$source}");
            }
            $zip->close();
            
            File::write($lockFile, "本文件为系统解压文件 {$source} 至 {$toDir} 后自动生成的防止重复解压锁，删除后执行Composer将导致对应的文件重新被覆盖");
            
            $this->output->info("解压文件至: {$toDir} 成功!");
            
            return true;
        } catch (Exception $e) {
            $this->output->error($e->getMessage());
            
            return false;
        }
    }
    
    
    /**
     * 安装配置文件
     * @return bool
     */
    protected function moveConfig()
    {
        $this->output->writeln('<info>开始安装配置文件...</info>');
        
        $packages  = $this->getPackages();
        $configDir = $this->app->getConfigPath() . DIRECTORY_SEPARATOR . 'extend' . DIRECTORY_SEPARATOR;
        if (!is_dir($configDir)) {
            if (!File::createDir($configDir)) {
                $this->output->error("配置文件目录不可写: {$configDir}");
                
                return false;
            }
        }
        
        foreach ($packages as $package) {
            if (!empty($package['extra']['busyphp']['config'])) {
                $installPath = $this->app->getRootPath() . 'vendor/' . $package['name'] . DIRECTORY_SEPARATOR;
                foreach ((array) $package['extra']['busyphp']['config'] as $name => $file) {
                    $target = $configDir . $name . '.php';
                    $source = $installPath . $file;
                    
                    if (is_file($target)) {
                        $this->output->warning("配置文件 {$target} 已存在!");
                        continue;
                    }
                    
                    if (!is_file($source)) {
                        $this->output->error("配置文件 {$source} 不存在!");
                        
                        return false;
                    }
                    
                    if (!copy($source, $target)) {
                        $this->output->error("安装配置文件 {$source} 至 {$target} 失败!");
                        
                        return false;
                    }
                }
            }
        }
        
        $this->output->writeln('<info>配置文件安装成功!</info>');
        
        return true;
    }
    
    
    /**
     * 获取Composer项目列表
     * @return array
     */
    private function getPackages()
    {
        $packages = [];
        if (is_file($path = $this->app->getRootPath() . 'vendor/composer/installed.json')) {
            $packages = json_decode(@file_get_contents($path), true);
        }
        
        return $packages;
    }
}
